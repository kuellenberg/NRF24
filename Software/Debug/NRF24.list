
NRF24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c98  08003c98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ca0  08003ca0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003cb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003cb4  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2d3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e3d  00000000  00000000  0002c307  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  0002e148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  0002ede8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000117c8  00000000  00000000  0002f980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acdf  00000000  00000000  00041148  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b3e0  00000000  00000000  0004be27  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d60  00000000  00000000  000b7284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c4c 	.word	0x08003c4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003c4c 	.word	0x08003c4c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b5b0      	push	{r4, r5, r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t s,n;
	uint8_t count;
 	uint8_t buffer[10] = {0,0,0,0,0,0,0,0,0,0};
 8000492:	2310      	movs	r3, #16
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	0018      	movs	r0, r3
 8000498:	230a      	movs	r3, #10
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f003 fbcd 	bl	8003c3c <memset>
	uint8_t tx_addr[5] = {"1Node"};
 80004a2:	2508      	movs	r5, #8
 80004a4:	197b      	adds	r3, r7, r5
 80004a6:	4a5f      	ldr	r2, [pc, #380]	; (8000624 <main+0x198>)
 80004a8:	6811      	ldr	r1, [r2, #0]
 80004aa:	6019      	str	r1, [r3, #0]
 80004ac:	7912      	ldrb	r2, [r2, #4]
 80004ae:	711a      	strb	r2, [r3, #4]
	uint8_t pipe0[5] = {"2Node"};
 80004b0:	003b      	movs	r3, r7
 80004b2:	4a5d      	ldr	r2, [pc, #372]	; (8000628 <main+0x19c>)
 80004b4:	6811      	ldr	r1, [r2, #0]
 80004b6:	6019      	str	r1, [r3, #0]
 80004b8:	7912      	ldrb	r2, [r2, #4]
 80004ba:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 ff3c 	bl	8001338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f8bc 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 fa78 	bl	80009b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f990 	bl	80007ec <MX_I2C1_Init>
  MX_ADC_Init();
 80004cc:	f000 f928 	bl	8000720 <MX_ADC_Init>
  MX_SPI1_Init();
 80004d0:	f000 fa3a 	bl	8000948 <MX_SPI1_Init>
  MX_RTC_Init();
 80004d4:	f000 f9ca 	bl	800086c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(BAT_CHECK_GPIO_Port, BAT_CHECK_Pin, GPIO_PIN_SET);
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	0219      	lsls	r1, r3, #8
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	2201      	movs	r2, #1
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fbf4 	bl	8001cd0 <HAL_GPIO_WritePin>

  nRF24_Init(&hspi1);
 80004e8:	4b50      	ldr	r3, [pc, #320]	; (800062c <main+0x1a0>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fb04 	bl	8000af8 <nRF24_Init>
  s = nRF24_GetStatus();
 80004f0:	231d      	movs	r3, #29
 80004f2:	18fc      	adds	r4, r7, r3
 80004f4:	f000 fc12 	bl	8000d1c <nRF24_GetStatus>
 80004f8:	0003      	movs	r3, r0
 80004fa:	7023      	strb	r3, [r4, #0]
  nRF24_FlushTX();
 80004fc:	f000 fd4f 	bl	8000f9e <nRF24_FlushTX>
  nRF24_FlushRX();
 8000500:	f000 fd55 	bl	8000fae <nRF24_FlushRX>
  //nRF24_DisableAA(0);
  nRF24_SetRole(nRF24_ROLE_PTX);
 8000504:	2000      	movs	r0, #0
 8000506:	f000 fc22 	bl	8000d4e <nRF24_SetRole>
  nRF24_SetRFChannel(115);
 800050a:	2073      	movs	r0, #115	; 0x73
 800050c:	f000 fc0f 	bl	8000d2e <nRF24_SetRFChannel>
  nRF24_SetAddr(nRF24_PIPETX, tx_addr);
 8000510:	197b      	adds	r3, r7, r5
 8000512:	0019      	movs	r1, r3
 8000514:	2010      	movs	r0, #16
 8000516:	f000 fcc9 	bl	8000eac <nRF24_SetAddr>
  nRF24_SetAddr(nRF24_PIPE0, pipe0);
 800051a:	003b      	movs	r3, r7
 800051c:	0019      	movs	r1, r3
 800051e:	200a      	movs	r0, #10
 8000520:	f000 fcc4 	bl	8000eac <nRF24_SetAddr>
  nRF24_SetDatarate(nRF24_DR_1Mbps);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fc64 	bl	8000df2 <nRF24_SetDatarate>
  nRF24_SetCRC(nRF24_CRC_Disabled);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fc8a 	bl	8000e44 <nRF24_SetCRC>
  nRF24_SetPowerMode(nRF24_MODE_PWR_UP);
 8000530:	2002      	movs	r0, #2
 8000532:	f000 fc35 	bl	8000da0 <nRF24_SetPowerMode>
  nRF24_SetARD(nRF24_ARD_1000);
 8000536:	2030      	movs	r0, #48	; 0x30
 8000538:	f000 fcdf 	bl	8000efa <nRF24_SetARD>
  nRF24_SetARC(5);
 800053c:	2005      	movs	r0, #5
 800053e:	f000 fd05 	bl	8000f4c <nRF24_SetARC>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  n = '0';
 8000542:	231f      	movs	r3, #31
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  strcpy(buffer, "Test");
 800054a:	2410      	movs	r4, #16
 800054c:	193b      	adds	r3, r7, r4
 800054e:	4a38      	ldr	r2, [pc, #224]	; (8000630 <main+0x1a4>)
 8000550:	6811      	ldr	r1, [r2, #0]
 8000552:	6019      	str	r1, [r3, #0]
 8000554:	7912      	ldrb	r2, [r2, #4]
 8000556:	711a      	strb	r2, [r3, #4]
	  buffer[4] = n++;
 8000558:	201f      	movs	r0, #31
 800055a:	183b      	adds	r3, r7, r0
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	183a      	adds	r2, r7, r0
 8000560:	1c59      	adds	r1, r3, #1
 8000562:	7011      	strb	r1, [r2, #0]
 8000564:	193a      	adds	r2, r7, r4
 8000566:	7113      	strb	r3, [r2, #4]
	  if (n>'9') n = '0';
 8000568:	183b      	adds	r3, r7, r0
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b39      	cmp	r3, #57	; 0x39
 800056e:	d903      	bls.n	8000578 <main+0xec>
 8000570:	231f      	movs	r3, #31
 8000572:	18fb      	adds	r3, r7, r3
 8000574:	2230      	movs	r2, #48	; 0x30
 8000576:	701a      	strb	r2, [r3, #0]
	  nRF24_WriteTXPayload(buffer, 5);
 8000578:	2310      	movs	r3, #16
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	2105      	movs	r1, #5
 800057e:	0018      	movs	r0, r3
 8000580:	f000 fd1e 	bl	8000fc0 <nRF24_WriteTXPayload>
	  nRF24_CE_HIGH;
 8000584:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <main+0x1a8>)
 8000586:	2201      	movs	r2, #1
 8000588:	2102      	movs	r1, #2
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fba0 	bl	8001cd0 <HAL_GPIO_WritePin>
	  count = 10;
 8000590:	231e      	movs	r3, #30
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	220a      	movs	r2, #10
 8000596:	701a      	strb	r2, [r3, #0]
	  do {
		  s = nRF24_GetStatus();
 8000598:	251d      	movs	r5, #29
 800059a:	197c      	adds	r4, r7, r5
 800059c:	f000 fbbe 	bl	8000d1c <nRF24_GetStatus>
 80005a0:	0003      	movs	r3, r0
 80005a2:	7023      	strb	r3, [r4, #0]
		  if (s & nRF24_STATUS_TX_DS) {
 80005a4:	197b      	adds	r3, r7, r5
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2220      	movs	r2, #32
 80005aa:	4013      	ands	r3, r2
 80005ac:	d009      	beq.n	80005c2 <main+0x136>
			  s = s;
 80005ae:	211d      	movs	r1, #29
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	187a      	adds	r2, r7, r1
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	701a      	strb	r2, [r3, #0]
			  s = s;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	187a      	adds	r2, r7, r1
 80005bc:	7812      	ldrb	r2, [r2, #0]
 80005be:	701a      	strb	r2, [r3, #0]
			  break;
 80005c0:	e009      	b.n	80005d6 <main+0x14a>
		  }
	  } while(--count);
 80005c2:	211e      	movs	r1, #30
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	187a      	adds	r2, r7, r1
 80005c8:	7812      	ldrb	r2, [r2, #0]
 80005ca:	3a01      	subs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1e0      	bne.n	8000598 <main+0x10c>
	  //nRF24_WriteRegister(nRF24_REG_STATUS, 0b01110000);
	  nRF24_CE_LOW;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <main+0x1a8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fb77 	bl	8001cd0 <HAL_GPIO_WritePin>
	  s = nRF24_GetStatus();
 80005e2:	251d      	movs	r5, #29
 80005e4:	197c      	adds	r4, r7, r5
 80005e6:	f000 fb99 	bl	8000d1c <nRF24_GetStatus>
 80005ea:	0003      	movs	r3, r0
 80005ec:	7023      	strb	r3, [r4, #0]
	  s = s;
 80005ee:	197b      	adds	r3, r7, r5
 80005f0:	197a      	adds	r2, r7, r5
 80005f2:	7812      	ldrb	r2, [r2, #0]
 80005f4:	701a      	strb	r2, [r3, #0]
	  s = nRF24_ReadRegister(nRF24_REG_OBSERVE_TX);
 80005f6:	197c      	adds	r4, r7, r5
 80005f8:	2008      	movs	r0, #8
 80005fa:	f000 fb55 	bl	8000ca8 <nRF24_ReadRegister>
 80005fe:	0003      	movs	r3, r0
 8000600:	7023      	strb	r3, [r4, #0]
	  s = s;
 8000602:	197b      	adds	r3, r7, r5
 8000604:	197a      	adds	r2, r7, r5
 8000606:	7812      	ldrb	r2, [r2, #0]
 8000608:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(500);
 800060a:	23fa      	movs	r3, #250	; 0xfa
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	0018      	movs	r0, r3
 8000610:	f000 ff02 	bl	8001418 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <main+0x1ac>)
 800061a:	0019      	movs	r1, r3
 800061c:	0010      	movs	r0, r2
 800061e:	f001 fb74 	bl	8001d0a <HAL_GPIO_TogglePin>
  {
 8000622:	e792      	b.n	800054a <main+0xbe>
 8000624:	08003c6c 	.word	0x08003c6c
 8000628:	08003c74 	.word	0x08003c74
 800062c:	2000009c 	.word	0x2000009c
 8000630:	08003c64 	.word	0x08003c64
 8000634:	50000400 	.word	0x50000400
 8000638:	50000800 	.word	0x50000800

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b099      	sub	sp, #100	; 0x64
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	242c      	movs	r4, #44	; 0x2c
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2334      	movs	r3, #52	; 0x34
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f003 faf5 	bl	8003c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	2318      	movs	r3, #24
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	0018      	movs	r0, r3
 8000658:	2314      	movs	r3, #20
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f003 faed 	bl	8003c3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	2318      	movs	r3, #24
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f003 fae6 	bl	8003c3c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <SystemClock_Config+0xdc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a29      	ldr	r2, [pc, #164]	; (800071c <SystemClock_Config+0xe0>)
 8000676:	401a      	ands	r2, r3
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <SystemClock_Config+0xdc>)
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	0109      	lsls	r1, r1, #4
 800067e:	430a      	orrs	r2, r1
 8000680:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000682:	0021      	movs	r1, r4
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2218      	movs	r2, #24
 8000688:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2201      	movs	r2, #1
 800068e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2201      	movs	r2, #1
 8000694:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	22a0      	movs	r2, #160	; 0xa0
 80006a0:	0212      	lsls	r2, r2, #8
 80006a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 fc75 	bl	8001f9c <HAL_RCC_OscConfig>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006b6:	f000 fa19 	bl	8000aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	2118      	movs	r1, #24
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	220f      	movs	r2, #15
 80006c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2100      	movs	r1, #0
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 ffdc 	bl	800269c <HAL_RCC_ClockConfig>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006e8:	f000 fa00 	bl	8000aec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2228      	movs	r2, #40	; 0x28
 80006f0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	0292      	lsls	r2, r2, #10
 80006fe:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000700:	003b      	movs	r3, r7
 8000702:	0018      	movs	r0, r3
 8000704:	f002 f9b4 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800070c:	f000 f9ee 	bl	8000aec <Error_Handler>
  }
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b019      	add	sp, #100	; 0x64
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	40007000 	.word	0x40007000
 800071c:	ffffe7ff 	.word	0xffffe7ff

08000720 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	003b      	movs	r3, r7
 8000728:	0018      	movs	r0, r3
 800072a:	2308      	movs	r3, #8
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f003 fa84 	bl	8003c3c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000734:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_ADC_Init+0xc0>)
 8000736:	4a2b      	ldr	r2, [pc, #172]	; (80007e4 <MX_ADC_Init+0xc4>)
 8000738:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800073a:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <MX_ADC_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_ADC_Init+0xc0>)
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	0612      	lsls	r2, r2, #24
 8000746:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_ADC_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_ADC_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_ADC_Init+0xc0>)
 8000756:	2201      	movs	r2, #1
 8000758:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_ADC_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_ADC_Init+0xc0>)
 8000762:	2220      	movs	r2, #32
 8000764:	2100      	movs	r1, #0
 8000766:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_ADC_Init+0xc0>)
 800076a:	2221      	movs	r2, #33	; 0x21
 800076c:	2100      	movs	r1, #0
 800076e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_ADC_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_ADC_Init+0xc0>)
 8000778:	22c2      	movs	r2, #194	; 0xc2
 800077a:	32ff      	adds	r2, #255	; 0xff
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_ADC_Init+0xc0>)
 8000780:	222c      	movs	r2, #44	; 0x2c
 8000782:	2100      	movs	r1, #0
 8000784:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_ADC_Init+0xc0>)
 8000788:	2204      	movs	r2, #4
 800078a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_ADC_Init+0xc0>)
 800078e:	2200      	movs	r2, #0
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_ADC_Init+0xc0>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_ADC_Init+0xc0>)
 800079a:	2201      	movs	r2, #1
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_ADC_Init+0xc0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_ADC_Init+0xc0>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fe58 	bl	800145c <HAL_ADC_Init>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80007b0:	f000 f99c 	bl	8000aec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007b4:	003b      	movs	r3, r7
 80007b6:	4a0c      	ldr	r2, [pc, #48]	; (80007e8 <MX_ADC_Init+0xc8>)
 80007b8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007ba:	003b      	movs	r3, r7
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	0152      	lsls	r2, r2, #5
 80007c0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c2:	003a      	movs	r2, r7
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_ADC_Init+0xc0>)
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 ffbb 	bl	8001744 <HAL_ADC_ConfigChannel>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80007d2:	f000 f98b 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	200000f4 	.word	0x200000f4
 80007e4:	40012400 	.word	0x40012400
 80007e8:	04000002 	.word	0x04000002

080007ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_I2C1_Init+0x78>)
 80007f2:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <MX_I2C1_Init+0x7c>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_I2C1_Init+0x78>)
 80007f8:	22e1      	movs	r2, #225	; 0xe1
 80007fa:	00d2      	lsls	r2, r2, #3
 80007fc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_I2C1_Init+0x78>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_I2C1_Init+0x78>)
 8000806:	2201      	movs	r2, #1
 8000808:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_I2C1_Init+0x78>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_I2C1_Init+0x78>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_I2C1_Init+0x78>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_I2C1_Init+0x78>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_I2C1_Init+0x78>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_I2C1_Init+0x78>)
 800082a:	0018      	movs	r0, r3
 800082c:	f001 fa88 	bl	8001d40 <HAL_I2C_Init>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 f95a 	bl	8000aec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_I2C1_Init+0x78>)
 800083a:	2100      	movs	r1, #0
 800083c:	0018      	movs	r0, r3
 800083e:	f001 fb15 	bl	8001e6c <HAL_I2CEx_ConfigAnalogFilter>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000846:	f000 f951 	bl	8000aec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_I2C1_Init+0x78>)
 800084c:	2100      	movs	r1, #0
 800084e:	0018      	movs	r0, r3
 8000850:	f001 fb58 	bl	8001f04 <HAL_I2CEx_ConfigDigitalFilter>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000858:	f000 f948 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	2000002c 	.word	0x2000002c
 8000868:	40005400 	.word	0x40005400

0800086c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f003 f9de 	bl	8003c3c <memset>
  RTC_DateTypeDef sDate = {0};
 8000880:	003b      	movs	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <MX_RTC_Init+0xd4>)
 8000888:	4a2e      	ldr	r2, [pc, #184]	; (8000944 <MX_RTC_Init+0xd8>)
 800088a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_RTC_Init+0xd4>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_RTC_Init+0xd4>)
 8000894:	227f      	movs	r2, #127	; 0x7f
 8000896:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_RTC_Init+0xd4>)
 800089a:	22ff      	movs	r2, #255	; 0xff
 800089c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_RTC_Init+0xd4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_RTC_Init+0xd4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_RTC_Init+0xd4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_RTC_Init+0xd4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_RTC_Init+0xd4>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f002 fa01 	bl	8002cc0 <HAL_RTC_Init>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80008c2:	f000 f913 	bl	8000aec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008e4:	1d39      	adds	r1, r7, #4
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_RTC_Init+0xd4>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	0018      	movs	r0, r3
 80008ec:	f002 fa86 	bl	8002dfc <HAL_RTC_SetTime>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80008f4:	f000 f8fa 	bl	8000aec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008f8:	003b      	movs	r3, r7
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008fe:	003b      	movs	r3, r7
 8000900:	2201      	movs	r2, #1
 8000902:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000904:	003b      	movs	r3, r7
 8000906:	2201      	movs	r2, #1
 8000908:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800090a:	003b      	movs	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000910:	0039      	movs	r1, r7
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_RTC_Init+0xd4>)
 8000914:	2201      	movs	r2, #1
 8000916:	0018      	movs	r0, r3
 8000918:	f002 fb34 	bl	8002f84 <HAL_RTC_SetDate>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000920:	f000 f8e4 	bl	8000aec <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_RTC_Init+0xd4>)
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	0018      	movs	r0, r3
 800092c:	f002 fc52 	bl	80031d4 <HAL_RTCEx_SetWakeUpTimer>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8000934:	f000 f8da 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b006      	add	sp, #24
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000078 	.word	0x20000078
 8000944:	40002800 	.word	0x40002800

08000948 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_SPI1_Init+0x68>)
 800094e:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <MX_SPI1_Init+0x6c>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000954:	2282      	movs	r2, #130	; 0x82
 8000956:	0052      	lsls	r2, r2, #1
 8000958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_SPI1_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_SPI1_Init+0x68>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_SPI1_Init+0x68>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_SPI1_Init+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000994:	2207      	movs	r2, #7
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <MX_SPI1_Init+0x68>)
 800099a:	0018      	movs	r0, r3
 800099c:	f002 fcba 	bl	8003314 <HAL_SPI_Init>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a4:	f000 f8a2 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	2000009c 	.word	0x2000009c
 80009b4:	40013000 	.word	0x40013000

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	240c      	movs	r4, #12
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	0018      	movs	r0, r3
 80009c4:	2314      	movs	r3, #20
 80009c6:	001a      	movs	r2, r3
 80009c8:	2100      	movs	r1, #0
 80009ca:	f003 f937 	bl	8003c3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009d2:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009d4:	2104      	movs	r1, #4
 80009d6:	430a      	orrs	r2, r1
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009da:	4b41      	ldr	r3, [pc, #260]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009de:	2204      	movs	r2, #4
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ea:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	430a      	orrs	r2, r1
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f6:	2201      	movs	r2, #1
 80009f8:	4013      	ands	r3, r2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a02:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a04:	2102      	movs	r1, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4013      	ands	r3, r2
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	4832      	ldr	r0, [pc, #200]	; (8000ae4 <MX_GPIO_Init+0x12c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	0019      	movs	r1, r3
 8000a20:	f001 f956 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_GPIO_Init+0x130>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	2103      	movs	r1, #3
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 f950 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_PWR_Pin|BAT_CHECK_Pin, GPIO_PIN_RESET);
 8000a30:	2381      	movs	r3, #129	; 0x81
 8000a32:	0219      	lsls	r1, r3, #8
 8000a34:	23a0      	movs	r3, #160	; 0xa0
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	2200      	movs	r2, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 f948 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	0212      	lsls	r2, r2, #8
 8000a46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	4a21      	ldr	r2, [pc, #132]	; (8000ae4 <MX_GPIO_Init+0x12c>)
 8000a5e:	0019      	movs	r1, r3
 8000a60:	0010      	movs	r0, r2
 8000a62:	f000 ffc7 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2204      	movs	r2, #4
 8000a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000a78:	193a      	adds	r2, r7, r4
 8000a7a:	23a0      	movs	r3, #160	; 0xa0
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	0011      	movs	r1, r2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 ffb7 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin;
 8000a86:	0021      	movs	r1, r4
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2201      	movs	r2, #1
 8000a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	000c      	movs	r4, r1
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <MX_GPIO_Init+0x130>)
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	f000 ffa3 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_PWR_Pin BAT_CHECK_Pin */
  GPIO_InitStruct.Pin = NRF_PWR_Pin|BAT_CHECK_Pin;
 8000aae:	0021      	movs	r1, r4
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2281      	movs	r2, #129	; 0x81
 8000ab4:	0212      	lsls	r2, r2, #8
 8000ab6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2201      	movs	r2, #1
 8000abc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	187a      	adds	r2, r7, r1
 8000acc:	23a0      	movs	r3, #160	; 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 ff8e 	bl	80019f4 <HAL_GPIO_Init>

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b009      	add	sp, #36	; 0x24
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	50000800 	.word	0x50000800
 8000ae8:	50000400 	.word	0x50000400

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <nRF24_Init>:

// Peripheral libraries
#include "stm32l0xx_hal.h"

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	nrf24_hspi = hspi;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <nRF24_Init+0x40>)
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <nRF24_Init+0x44>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 f8df 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <nRF24_Init+0x44>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	2101      	movs	r1, #1
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 f8d9 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF_PWR_GPIO_Port, NRF_PWR_Pin, GPIO_PIN_RESET);
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	0059      	lsls	r1, r3, #1
 8000b22:	23a0      	movs	r3, #160	; 0xa0
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	2200      	movs	r2, #0
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 f8d1 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	20000028 	.word	0x20000028
 8000b3c:	50000400 	.word	0x50000400

08000b40 <nRF24_Command>:

uint8_t nRF24_Command(uint8_t cmd)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	0002      	movs	r2, r0
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	701a      	strb	r2, [r3, #0]
	uint8_t recv;

	nRF24_CSN_LOW;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <nRF24_Command+0x48>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2101      	movs	r1, #1
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 f8bc 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(nrf24_hspi, &cmd, &recv, 1, HAL_MAX_DELAY);
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <nRF24_Command+0x4c>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	240f      	movs	r4, #15
 8000b5e:	193a      	adds	r2, r7, r4
 8000b60:	1df9      	adds	r1, r7, #7
 8000b62:	2301      	movs	r3, #1
 8000b64:	425b      	negs	r3, r3
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f002 fdb2 	bl	80036d2 <HAL_SPI_TransmitReceive>
	nRF24_CSN_HIGH;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <nRF24_Command+0x48>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	2101      	movs	r1, #1
 8000b74:	0018      	movs	r0, r3
 8000b76:	f001 f8ab 	bl	8001cd0 <HAL_GPIO_WritePin>

	return recv;
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	781b      	ldrb	r3, [r3, #0]
}
 8000b7e:	0018      	movs	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b005      	add	sp, #20
 8000b84:	bd90      	pop	{r4, r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	50000400 	.word	0x50000400
 8000b8c:	20000028 	.word	0x20000028

08000b90 <nRF24_WriteRegister>:

void nRF24_WriteRegister(uint8_t reg, uint8_t data)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	1dbb      	adds	r3, r7, #6
 8000b9e:	1c0a      	adds	r2, r1, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
	uint8_t cmd;

	cmd = nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP);
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	221f      	movs	r2, #31
 8000baa:	4013      	ands	r3, r2
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	2220      	movs	r2, #32
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b25b      	sxtb	r3, r3
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	240f      	movs	r4, #15
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	701a      	strb	r2, [r3, #0]

	nRF24_CSN_LOW;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <nRF24_WriteRegister+0x6c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f001 f884 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nrf24_hspi, &cmd, 1, HAL_MAX_DELAY);
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <nRF24_WriteRegister+0x70>)
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	425b      	negs	r3, r3
 8000bd0:	1939      	adds	r1, r7, r4
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f002 fc27 	bl	8003426 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, &data, 1, HAL_MAX_DELAY);
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <nRF24_WriteRegister+0x70>)
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	425b      	negs	r3, r3
 8000be0:	1db9      	adds	r1, r7, #6
 8000be2:	2201      	movs	r2, #1
 8000be4:	f002 fc1f 	bl	8003426 <HAL_SPI_Transmit>
	nRF24_CSN_HIGH;
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <nRF24_WriteRegister+0x6c>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	2101      	movs	r1, #1
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 f86e 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b005      	add	sp, #20
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	50000400 	.word	0x50000400
 8000c00:	20000028 	.word	0x20000028

08000c04 <nRF24_WriteMBRegister>:

void nRF24_WriteMBRegister(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6039      	str	r1, [r7, #0]
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	1c02      	adds	r2, r0, #0
 8000c12:	701a      	strb	r2, [r3, #0]
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	1c0a      	adds	r2, r1, #0
 8000c18:	701a      	strb	r2, [r3, #0]
	uint8_t cmd;
	uint8_t i;

	cmd = nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP);
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	221f      	movs	r2, #31
 8000c22:	4013      	ands	r3, r2
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	2220      	movs	r2, #32
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	240e      	movs	r4, #14
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	701a      	strb	r2, [r3, #0]

	nRF24_CSN_LOW;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <nRF24_WriteMBRegister+0x9c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	2101      	movs	r1, #1
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f001 f848 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nrf24_hspi, &cmd, 1, HAL_MAX_DELAY);
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <nRF24_WriteMBRegister+0xa0>)
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	2301      	movs	r3, #1
 8000c46:	425b      	negs	r3, r3
 8000c48:	1939      	adds	r1, r7, r4
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f002 fbeb 	bl	8003426 <HAL_SPI_Transmit>
	for(i = 0; i < len; i++)
 8000c50:	230f      	movs	r3, #15
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e010      	b.n	8000c7c <nRF24_WriteMBRegister+0x78>
		HAL_SPI_Transmit(nrf24_hspi, &buf[i], 1, HAL_MAX_DELAY);
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <nRF24_WriteMBRegister+0xa0>)
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	240f      	movs	r4, #15
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	18d1      	adds	r1, r2, r3
 8000c68:	2301      	movs	r3, #1
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f002 fbda 	bl	8003426 <HAL_SPI_Transmit>
	for(i = 0; i < len; i++)
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	3201      	adds	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fa      	adds	r2, r7, r3
 8000c80:	1dbb      	adds	r3, r7, #6
 8000c82:	7812      	ldrb	r2, [r2, #0]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3e7      	bcc.n	8000c5a <nRF24_WriteMBRegister+0x56>
	nRF24_CSN_HIGH;
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <nRF24_WriteMBRegister+0x9c>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2101      	movs	r1, #1
 8000c90:	0018      	movs	r0, r3
 8000c92:	f001 f81d 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b005      	add	sp, #20
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	50000400 	.word	0x50000400
 8000ca4:	20000028 	.word	0x20000028

08000ca8 <nRF24_ReadRegister>:

uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	0002      	movs	r2, r0
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	701a      	strb	r2, [r3, #0]
	uint8_t cmd, recv;

	cmd = nRF24_CMD_R_REGISTER | (reg & nRF24_MASK_REG_MAP);
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	221f      	movs	r2, #31
 8000cba:	4013      	ands	r3, r2
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	240f      	movs	r4, #15
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	701a      	strb	r2, [r3, #0]

	nRF24_CSN_LOW;
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <nRF24_ReadRegister+0x6c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2101      	movs	r1, #1
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f001 f800 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nrf24_hspi, &cmd, 1, HAL_MAX_DELAY);
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <nRF24_ReadRegister+0x70>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	1939      	adds	r1, r7, r4
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f002 fba3 	bl	8003426 <HAL_SPI_Transmit>
	cmd = nRF24_CMD_NOP;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	22ff      	movs	r2, #255	; 0xff
 8000ce4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(nrf24_hspi, &cmd, &recv, 1, HAL_MAX_DELAY);
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <nRF24_ReadRegister+0x70>)
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	250e      	movs	r5, #14
 8000cec:	197a      	adds	r2, r7, r5
 8000cee:	1939      	adds	r1, r7, r4
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	425b      	negs	r3, r3
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f002 fceb 	bl	80036d2 <HAL_SPI_TransmitReceive>
	nRF24_CSN_HIGH;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <nRF24_ReadRegister+0x6c>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2101      	movs	r1, #1
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 ffe4 	bl	8001cd0 <HAL_GPIO_WritePin>

	return recv;
 8000d08:	197b      	adds	r3, r7, r5
 8000d0a:	781b      	ldrb	r3, [r3, #0]
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b004      	add	sp, #16
 8000d12:	bdb0      	pop	{r4, r5, r7, pc}
 8000d14:	50000400 	.word	0x50000400
 8000d18:	20000028 	.word	0x20000028

08000d1c <nRF24_GetStatus>:
		HAL_SPI_TransmitReceive(nrf24_hspi, &cmd, &buf[i], 1, HAL_MAX_DELAY);
	nRF24_CSN_HIGH;
}

uint8_t nRF24_GetStatus(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	return nRF24_Command(nRF24_CMD_NOP);
 8000d20:	20ff      	movs	r0, #255	; 0xff
 8000d22:	f7ff ff0d 	bl	8000b40 <nRF24_Command>
 8000d26:	0003      	movs	r3, r0
}
 8000d28:	0018      	movs	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	0002      	movs	r2, r0
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(nRF24_REG_RF_CH, channel);
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	0019      	movs	r1, r3
 8000d40:	2005      	movs	r0, #5
 8000d42:	f7ff ff25 	bl	8000b90 <nRF24_WriteRegister>
}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <nRF24_SetRole>:

void nRF24_SetRole(uint8_t role)
{
 8000d4e:	b5b0      	push	{r4, r5, r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	0002      	movs	r2, r0
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	701a      	strb	r2, [r3, #0]
	uint8_t reg;

	reg = nRF24_ReadRegister(nRF24_REG_CONFIG);
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	0005      	movs	r5, r0
 8000d5e:	183c      	adds	r4, r7, r0
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ffa1 	bl	8000ca8 <nRF24_ReadRegister>
 8000d66:	0003      	movs	r3, r0
 8000d68:	7023      	strb	r3, [r4, #0]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000d6a:	0028      	movs	r0, r5
 8000d6c:	183b      	adds	r3, r7, r0
 8000d6e:	183a      	adds	r2, r7, r0
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	2101      	movs	r1, #1
 8000d74:	438a      	bics	r2, r1
 8000d76:	701a      	strb	r2, [r3, #0]
	reg |= nRF24_CONFIG_PRIM_RX & role;
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4013      	ands	r3, r2
 8000d80:	b2d9      	uxtb	r1, r3
 8000d82:	183b      	adds	r3, r7, r0
 8000d84:	183a      	adds	r2, r7, r0
 8000d86:	7812      	ldrb	r2, [r2, #0]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(nRF24_REG_CONFIG, reg);
 8000d8c:	183b      	adds	r3, r7, r0
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	0019      	movs	r1, r3
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fefc 	bl	8000b90 <nRF24_WriteRegister>
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b004      	add	sp, #16
 8000d9e:	bdb0      	pop	{r4, r5, r7, pc}

08000da0 <nRF24_SetPowerMode>:

void nRF24_SetPowerMode(uint8_t mode)
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	701a      	strb	r2, [r3, #0]
	uint8_t reg;

	reg = nRF24_ReadRegister(nRF24_REG_CONFIG);
 8000dac:	200f      	movs	r0, #15
 8000dae:	0005      	movs	r5, r0
 8000db0:	183c      	adds	r4, r7, r0
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff ff78 	bl	8000ca8 <nRF24_ReadRegister>
 8000db8:	0003      	movs	r3, r0
 8000dba:	7023      	strb	r3, [r4, #0]
	reg &= ~nRF24_CONFIG_PWR_UP;
 8000dbc:	0028      	movs	r0, r5
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	183a      	adds	r2, r7, r0
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	438a      	bics	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
	reg |= nRF24_CONFIG_PWR_UP & mode;
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2202      	movs	r2, #2
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	b2d9      	uxtb	r1, r3
 8000dd4:	183b      	adds	r3, r7, r0
 8000dd6:	183a      	adds	r2, r7, r0
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(nRF24_REG_CONFIG, reg);
 8000dde:	183b      	adds	r3, r7, r0
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	0019      	movs	r1, r3
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fed3 	bl	8000b90 <nRF24_WriteRegister>
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b004      	add	sp, #16
 8000df0:	bdb0      	pop	{r4, r5, r7, pc}

08000df2 <nRF24_SetDatarate>:
	reg |= nRF24_MASK_RF_PWR & power;
	nRF24_WriteRegister(nRF24_REG_RF_SETUP, reg);
}

void nRF24_SetDatarate(uint8_t datarate)
{
 8000df2:	b5b0      	push	{r4, r5, r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	0002      	movs	r2, r0
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	701a      	strb	r2, [r3, #0]
	uint8_t reg;

	reg = nRF24_ReadRegister(nRF24_REG_RF_SETUP);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	0005      	movs	r5, r0
 8000e02:	183c      	adds	r4, r7, r0
 8000e04:	2006      	movs	r0, #6
 8000e06:	f7ff ff4f 	bl	8000ca8 <nRF24_ReadRegister>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	7023      	strb	r3, [r4, #0]
	reg &= ~nRF24_MASK_DATARATE;
 8000e0e:	0028      	movs	r0, r5
 8000e10:	183b      	adds	r3, r7, r0
 8000e12:	183a      	adds	r2, r7, r0
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	2128      	movs	r1, #40	; 0x28
 8000e18:	438a      	bics	r2, r1
 8000e1a:	701a      	strb	r2, [r3, #0]
	reg |= nRF24_MASK_DATARATE & datarate;
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2228      	movs	r2, #40	; 0x28
 8000e22:	4013      	ands	r3, r2
 8000e24:	b2d9      	uxtb	r1, r3
 8000e26:	183b      	adds	r3, r7, r0
 8000e28:	183a      	adds	r2, r7, r0
 8000e2a:	7812      	ldrb	r2, [r2, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(nRF24_REG_RF_SETUP, reg);
 8000e30:	183b      	adds	r3, r7, r0
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	0019      	movs	r1, r3
 8000e36:	2006      	movs	r0, #6
 8000e38:	f7ff feaa 	bl	8000b90 <nRF24_WriteRegister>
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b004      	add	sp, #16
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}

08000e44 <nRF24_SetCRC>:

void nRF24_SetCRC(uint8_t crc)
{
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	701a      	strb	r2, [r3, #0]
	uint8_t reg;

	reg = nRF24_ReadRegister(nRF24_REG_CONFIG);
 8000e50:	200f      	movs	r0, #15
 8000e52:	0005      	movs	r5, r0
 8000e54:	183c      	adds	r4, r7, r0
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff ff26 	bl	8000ca8 <nRF24_ReadRegister>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	7023      	strb	r3, [r4, #0]
	reg &= ~nRF24_MASK_CRC;
 8000e60:	0028      	movs	r0, r5
 8000e62:	183b      	adds	r3, r7, r0
 8000e64:	183a      	adds	r2, r7, r0
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	210c      	movs	r1, #12
 8000e6a:	438a      	bics	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
	reg |= nRF24_MASK_CRC & crc;
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	220c      	movs	r2, #12
 8000e74:	4013      	ands	r3, r2
 8000e76:	b2d9      	uxtb	r1, r3
 8000e78:	183b      	adds	r3, r7, r0
 8000e7a:	183a      	adds	r2, r7, r0
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(nRF24_REG_CONFIG, reg);
 8000e82:	183b      	adds	r3, r7, r0
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0019      	movs	r1, r3
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff fe81 	bl	8000b90 <nRF24_WriteRegister>
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b004      	add	sp, #16
 8000e94:	bdb0      	pop	{r4, r5, r7, pc}

08000e96 <nRF24_GetAddrWidth>:

uint8_t nRF24_GetAddrWidth(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
	return nRF24_ReadRegister(nRF24_REG_SETUP_AW) + 2;
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f7ff ff04 	bl	8000ca8 <nRF24_ReadRegister>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	b2db      	uxtb	r3, r3
}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <nRF24_SetAddr>:
{
	nRF24_WriteRegister(nRF24_REG_SETUP_AW, aw - 2);
}

void nRF24_SetAddr(uint8_t pipe, uint8_t *addr)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	701a      	strb	r2, [r3, #0]
	uint8_t aw;

	switch (pipe)
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b0a      	cmp	r3, #10
 8000ec0:	db0a      	blt.n	8000ed8 <nRF24_SetAddr+0x2c>
 8000ec2:	2b0b      	cmp	r3, #11
 8000ec4:	dd01      	ble.n	8000eca <nRF24_SetAddr+0x1e>
 8000ec6:	2b10      	cmp	r3, #16
 8000ec8:	d106      	bne.n	8000ed8 <nRF24_SetAddr+0x2c>
	{
	case nRF24_PIPETX:
	case nRF24_PIPE0:
	case nRF24_PIPE1:
		aw = nRF24_GetAddrWidth();
 8000eca:	230f      	movs	r3, #15
 8000ecc:	18fc      	adds	r4, r7, r3
 8000ece:	f7ff ffe2 	bl	8000e96 <nRF24_GetAddrWidth>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	7023      	strb	r3, [r4, #0]
		break;
 8000ed6:	e003      	b.n	8000ee0 <nRF24_SetAddr+0x34>
	default:
		aw = 1;
 8000ed8:	230f      	movs	r3, #15
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
	}
	nRF24_WriteMBRegister(pipe, addr, aw);
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	781a      	ldrb	r2, [r3, #0]
 8000ee6:	6839      	ldr	r1, [r7, #0]
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff fe89 	bl	8000c04 <nRF24_WriteMBRegister>
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b005      	add	sp, #20
 8000ef8:	bd90      	pop	{r4, r7, pc}

08000efa <nRF24_SetARD>:

void nRF24_SetARD(uint8_t ard)
{
 8000efa:	b5b0      	push	{r4, r5, r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	0002      	movs	r2, r0
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	701a      	strb	r2, [r3, #0]
	uint8_t reg;

	reg = nRF24_ReadRegister(nRF24_REG_SETUP_RETR);
 8000f06:	200f      	movs	r0, #15
 8000f08:	0005      	movs	r5, r0
 8000f0a:	183c      	adds	r4, r7, r0
 8000f0c:	2004      	movs	r0, #4
 8000f0e:	f7ff fecb 	bl	8000ca8 <nRF24_ReadRegister>
 8000f12:	0003      	movs	r3, r0
 8000f14:	7023      	strb	r3, [r4, #0]
	reg &= ~nRF24_MASK_ARD;
 8000f16:	0028      	movs	r0, r5
 8000f18:	183b      	adds	r3, r7, r0
 8000f1a:	183a      	adds	r2, r7, r0
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	210f      	movs	r1, #15
 8000f20:	400a      	ands	r2, r1
 8000f22:	701a      	strb	r2, [r3, #0]
	reg |= nRF24_MASK_ARD & ard;
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	220f      	movs	r2, #15
 8000f2a:	4393      	bics	r3, r2
 8000f2c:	b2d9      	uxtb	r1, r3
 8000f2e:	183b      	adds	r3, r7, r0
 8000f30:	183a      	adds	r2, r7, r0
 8000f32:	7812      	ldrb	r2, [r2, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(nRF24_REG_SETUP_RETR, reg);
 8000f38:	183b      	adds	r3, r7, r0
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f7ff fe26 	bl	8000b90 <nRF24_WriteRegister>
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b004      	add	sp, #16
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}

08000f4c <nRF24_SetARC>:

void nRF24_SetARC(uint8_t arc)
{
 8000f4c:	b5b0      	push	{r4, r5, r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	0002      	movs	r2, r0
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	701a      	strb	r2, [r3, #0]
	uint8_t reg;

	reg = nRF24_ReadRegister(nRF24_REG_SETUP_RETR);
 8000f58:	200f      	movs	r0, #15
 8000f5a:	0005      	movs	r5, r0
 8000f5c:	183c      	adds	r4, r7, r0
 8000f5e:	2004      	movs	r0, #4
 8000f60:	f7ff fea2 	bl	8000ca8 <nRF24_ReadRegister>
 8000f64:	0003      	movs	r3, r0
 8000f66:	7023      	strb	r3, [r4, #0]
	reg &= ~nRF24_MASK_ARC;
 8000f68:	0028      	movs	r0, r5
 8000f6a:	183b      	adds	r3, r7, r0
 8000f6c:	183a      	adds	r2, r7, r0
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	210f      	movs	r1, #15
 8000f72:	438a      	bics	r2, r1
 8000f74:	701a      	strb	r2, [r3, #0]
	reg |= nRF24_MASK_ARC & arc;
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	b2d9      	uxtb	r1, r3
 8000f80:	183b      	adds	r3, r7, r0
 8000f82:	183a      	adds	r2, r7, r0
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(nRF24_REG_SETUP_RETR, reg);
 8000f8a:	183b      	adds	r3, r7, r0
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	0019      	movs	r1, r3
 8000f90:	2004      	movs	r0, #4
 8000f92:	f7ff fdfd 	bl	8000b90 <nRF24_WriteRegister>
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b004      	add	sp, #16
 8000f9c:	bdb0      	pop	{r4, r5, r7, pc}

08000f9e <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
	nRF24_Command(nRF24_CMD_FLUSH_TX);
 8000fa2:	20e1      	movs	r0, #225	; 0xe1
 8000fa4:	f7ff fdcc 	bl	8000b40 <nRF24_Command>
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
	nRF24_Command(nRF24_CMD_FLUSH_RX);
 8000fb2:	20e2      	movs	r0, #226	; 0xe2
 8000fb4:	f7ff fdc4 	bl	8000b40 <nRF24_Command>
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t *payload, uint8_t len)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	000a      	movs	r2, r1
 8000fca:	1cfb      	adds	r3, r7, #3
 8000fcc:	701a      	strb	r2, [r3, #0]
	uint8_t cmd, i;

	cmd = nRF24_CMD_W_TX_PAYLOAD;
 8000fce:	240e      	movs	r4, #14
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	22a0      	movs	r2, #160	; 0xa0
 8000fd4:	701a      	strb	r2, [r3, #0]
	nRF24_CSN_LOW;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <nRF24_WriteTXPayload+0x88>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f000 fe77 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nrf24_hspi, &cmd, 1, HAL_MAX_DELAY);
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <nRF24_WriteTXPayload+0x8c>)
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	425b      	negs	r3, r3
 8000fea:	1939      	adds	r1, r7, r4
 8000fec:	2201      	movs	r2, #1
 8000fee:	f002 fa1a 	bl	8003426 <HAL_SPI_Transmit>
	cmd = nRF24_CMD_NOP;
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	22ff      	movs	r2, #255	; 0xff
 8000ff6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < len; i++)
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e010      	b.n	8001024 <nRF24_WriteTXPayload+0x64>
		HAL_SPI_Transmit(nrf24_hspi, &payload[i], 1, HAL_MAX_DELAY);
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <nRF24_WriteTXPayload+0x8c>)
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	240f      	movs	r4, #15
 8001008:	193b      	adds	r3, r7, r4
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	18d1      	adds	r1, r2, r3
 8001010:	2301      	movs	r3, #1
 8001012:	425b      	negs	r3, r3
 8001014:	2201      	movs	r2, #1
 8001016:	f002 fa06 	bl	8003426 <HAL_SPI_Transmit>
	for(i = 0; i < len; i++)
 800101a:	193b      	adds	r3, r7, r4
 800101c:	781a      	ldrb	r2, [r3, #0]
 800101e:	193b      	adds	r3, r7, r4
 8001020:	3201      	adds	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	230f      	movs	r3, #15
 8001026:	18fa      	adds	r2, r7, r3
 8001028:	1cfb      	adds	r3, r7, #3
 800102a:	7812      	ldrb	r2, [r2, #0]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d3e7      	bcc.n	8001002 <nRF24_WriteTXPayload+0x42>
	nRF24_CSN_HIGH;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <nRF24_WriteTXPayload+0x88>)
 8001034:	2201      	movs	r2, #1
 8001036:	2101      	movs	r1, #1
 8001038:	0018      	movs	r0, r3
 800103a:	f000 fe49 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b005      	add	sp, #20
 8001044:	bd90      	pop	{r4, r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	50000400 	.word	0x50000400
 800104c:	20000028 	.word	0x20000028

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <HAL_MspInit+0x24>)
 8001056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_MspInit+0x24>)
 800105a:	2101      	movs	r1, #1
 800105c:	430a      	orrs	r2, r1
 800105e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_MspInit+0x24>)
 8001062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_MspInit+0x24>)
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	0549      	lsls	r1, r1, #21
 800106a:	430a      	orrs	r2, r1
 800106c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	230c      	movs	r3, #12
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	0018      	movs	r0, r3
 8001086:	2314      	movs	r3, #20
 8001088:	001a      	movs	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	f002 fdd6 	bl	8003c3c <memset>
  if(hadc->Instance==ADC1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a15      	ldr	r2, [pc, #84]	; (80010ec <HAL_ADC_MspInit+0x74>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d123      	bne.n	80010e2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_ADC_MspInit+0x78>)
 800109c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_ADC_MspInit+0x78>)
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	0089      	lsls	r1, r1, #2
 80010a4:	430a      	orrs	r2, r1
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_ADC_MspInit+0x78>)
 80010aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_ADC_MspInit+0x78>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	430a      	orrs	r2, r1
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_ADC_MspInit+0x78>)
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b8:	2201      	movs	r2, #1
 80010ba:	4013      	ands	r3, r2
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 80010c0:	210c      	movs	r1, #12
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2202      	movs	r2, #2
 80010c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2203      	movs	r2, #3
 80010cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 80010d4:	187a      	adds	r2, r7, r1
 80010d6:	23a0      	movs	r3, #160	; 0xa0
 80010d8:	05db      	lsls	r3, r3, #23
 80010da:	0011      	movs	r1, r2
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fc89 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b008      	add	sp, #32
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	40012400 	.word	0x40012400
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	230c      	movs	r3, #12
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	0018      	movs	r0, r3
 8001102:	2314      	movs	r3, #20
 8001104:	001a      	movs	r2, r3
 8001106:	2100      	movs	r1, #0
 8001108:	f002 fd98 	bl	8003c3c <memset>
  if(hi2c->Instance==I2C1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a18      	ldr	r2, [pc, #96]	; (8001174 <HAL_I2C_MspInit+0x80>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12a      	bne.n	800116c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_I2C_MspInit+0x84>)
 8001118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_I2C_MspInit+0x84>)
 800111c:	2101      	movs	r1, #1
 800111e:	430a      	orrs	r2, r1
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_I2C_MspInit+0x84>)
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	2201      	movs	r2, #1
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800112e:	210c      	movs	r1, #12
 8001130:	187b      	adds	r3, r7, r1
 8001132:	22c0      	movs	r2, #192	; 0xc0
 8001134:	00d2      	lsls	r2, r2, #3
 8001136:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001138:	187b      	adds	r3, r7, r1
 800113a:	2212      	movs	r2, #18
 800113c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2201      	movs	r2, #1
 8001142:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2203      	movs	r2, #3
 8001148:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2201      	movs	r2, #1
 800114e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	187a      	adds	r2, r7, r1
 8001152:	23a0      	movs	r3, #160	; 0xa0
 8001154:	05db      	lsls	r3, r3, #23
 8001156:	0011      	movs	r1, r2
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fc4b 	bl	80019f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_I2C_MspInit+0x84>)
 8001160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_I2C_MspInit+0x84>)
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	0389      	lsls	r1, r1, #14
 8001168:	430a      	orrs	r2, r1
 800116a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	b008      	add	sp, #32
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40005400 	.word	0x40005400
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_RTC_MspInit+0x28>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d106      	bne.n	800119c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_RTC_MspInit+0x2c>)
 8001190:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_RTC_MspInit+0x2c>)
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	02c9      	lsls	r1, r1, #11
 8001198:	430a      	orrs	r2, r1
 800119a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40002800 	.word	0x40002800
 80011a8:	40021000 	.word	0x40021000

080011ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	230c      	movs	r3, #12
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	0018      	movs	r0, r3
 80011ba:	2314      	movs	r3, #20
 80011bc:	001a      	movs	r2, r3
 80011be:	2100      	movs	r1, #0
 80011c0:	f002 fd3c 	bl	8003c3c <memset>
  if(hspi->Instance==SPI1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a18      	ldr	r2, [pc, #96]	; (800122c <HAL_SPI_MspInit+0x80>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d129      	bne.n	8001222 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_SPI_MspInit+0x84>)
 80011d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_SPI_MspInit+0x84>)
 80011d4:	2180      	movs	r1, #128	; 0x80
 80011d6:	0149      	lsls	r1, r1, #5
 80011d8:	430a      	orrs	r2, r1
 80011da:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_SPI_MspInit+0x84>)
 80011de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_SPI_MspInit+0x84>)
 80011e2:	2101      	movs	r1, #1
 80011e4:	430a      	orrs	r2, r1
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_SPI_MspInit+0x84>)
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	2201      	movs	r2, #1
 80011ee:	4013      	ands	r3, r2
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011f4:	210c      	movs	r1, #12
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	22e0      	movs	r2, #224	; 0xe0
 80011fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2202      	movs	r2, #2
 8001200:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2203      	movs	r2, #3
 800120c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	187a      	adds	r2, r7, r1
 8001216:	23a0      	movs	r3, #160	; 0xa0
 8001218:	05db      	lsls	r3, r3, #23
 800121a:	0011      	movs	r1, r2
 800121c:	0018      	movs	r0, r3
 800121e:	f000 fbe9 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b008      	add	sp, #32
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	40013000 	.word	0x40013000
 8001230:	40021000 	.word	0x40021000

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f8c0 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <SystemInit+0x64>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <SystemInit+0x64>)
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	0049      	lsls	r1, r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <SystemInit+0x64>)
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <SystemInit+0x64>)
 8001280:	4913      	ldr	r1, [pc, #76]	; (80012d0 <SystemInit+0x68>)
 8001282:	400a      	ands	r2, r1
 8001284:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <SystemInit+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <SystemInit+0x64>)
 800128c:	4911      	ldr	r1, [pc, #68]	; (80012d4 <SystemInit+0x6c>)
 800128e:	400a      	ands	r2, r1
 8001290:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <SystemInit+0x64>)
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <SystemInit+0x64>)
 8001298:	2101      	movs	r1, #1
 800129a:	438a      	bics	r2, r1
 800129c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <SystemInit+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <SystemInit+0x64>)
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <SystemInit+0x70>)
 80012a6:	400a      	ands	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <SystemInit+0x64>)
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <SystemInit+0x64>)
 80012b0:	490a      	ldr	r1, [pc, #40]	; (80012dc <SystemInit+0x74>)
 80012b2:	400a      	ands	r2, r1
 80012b4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <SystemInit+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <SystemInit+0x78>)
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	0512      	lsls	r2, r2, #20
 80012c2:	609a      	str	r2, [r3, #8]
#endif
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	40021000 	.word	0x40021000
 80012d0:	88ff400c 	.word	0x88ff400c
 80012d4:	fef6fff6 	.word	0xfef6fff6
 80012d8:	fffbffff 	.word	0xfffbffff
 80012dc:	ff02ffff 	.word	0xff02ffff
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80012e4:	480d      	ldr	r0, [pc, #52]	; (800131c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80012e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80012e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012ea:	e003      	b.n	80012f4 <LoopCopyDataInit>

080012ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80012ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012f2:	3104      	adds	r1, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80012f4:	480b      	ldr	r0, [pc, #44]	; (8001324 <LoopForever+0xa>)
  ldr  r3, =_edata
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <LoopForever+0xe>)
  adds  r2, r0, r1
 80012f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012fc:	d3f6      	bcc.n	80012ec <CopyDataInit>
  ldr  r2, =_sbss
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <LoopForever+0x12>)
  b  LoopFillZerobss
 8001300:	e002      	b.n	8001308 <LoopFillZerobss>

08001302 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001302:	2300      	movs	r3, #0
  str  r3, [r2]
 8001304:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001306:	3204      	adds	r2, #4

08001308 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <LoopForever+0x16>)
  cmp  r2, r3
 800130a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800130c:	d3f9      	bcc.n	8001302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800130e:	f7ff ffab 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001312:	f002 fc6f 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff f8b9 	bl	800048c <main>

0800131a <LoopForever>:

LoopForever:
    b LoopForever
 800131a:	e7fe      	b.n	800131a <LoopForever>
   ldr   r0, =_estack
 800131c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8001320:	08003ca8 	.word	0x08003ca8
  ldr  r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001328:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800132c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001330:	20000154 	.word	0x20000154

08001334 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC1_COMP_IRQHandler>
	...

08001338 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_Init+0x3c>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_Init+0x3c>)
 800134a:	2140      	movs	r1, #64	; 0x40
 800134c:	430a      	orrs	r2, r1
 800134e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001350:	2000      	movs	r0, #0
 8001352:	f000 f811 	bl	8001378 <HAL_InitTick>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d003      	beq.n	8001362 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	e001      	b.n	8001366 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001362:	f7ff fe75 	bl	8001050 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	781b      	ldrb	r3, [r3, #0]
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	40022000 	.word	0x40022000

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_InitTick+0x5c>)
 8001382:	681c      	ldr	r4, [r3, #0]
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_InitTick+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	0019      	movs	r1, r3
 800138a:	23fa      	movs	r3, #250	; 0xfa
 800138c:	0098      	lsls	r0, r3, #2
 800138e:	f7fe febb 	bl	8000108 <__udivsi3>
 8001392:	0003      	movs	r3, r0
 8001394:	0019      	movs	r1, r3
 8001396:	0020      	movs	r0, r4
 8001398:	f7fe feb6 	bl	8000108 <__udivsi3>
 800139c:	0003      	movs	r3, r0
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 fb1b 	bl	80019da <HAL_SYSTICK_Config>
 80013a4:	1e03      	subs	r3, r0, #0
 80013a6:	d001      	beq.n	80013ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e00f      	b.n	80013cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d80b      	bhi.n	80013ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	2301      	movs	r3, #1
 80013b6:	425b      	negs	r3, r3
 80013b8:	2200      	movs	r2, #0
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 faf8 	bl	80019b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_InitTick+0x64>)
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b003      	add	sp, #12
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x1c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	001a      	movs	r2, r3
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_IncTick+0x20>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	18d2      	adds	r2, r2, r3
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_IncTick+0x20>)
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	20000008 	.word	0x20000008
 8001400:	20000150 	.word	0x20000150

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <HAL_GetTick+0x10>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	20000150 	.word	0x20000150

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff fff0 	bl	8001404 <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_Delay+0x40>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	001a      	movs	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	189b      	adds	r3, r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	f7ff ffe0 	bl	8001404 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b004      	add	sp, #16
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000008 	.word	0x20000008

0800145c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e159      	b.n	8001722 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10a      	bne.n	800148c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2250      	movs	r2, #80	; 0x50
 8001480:	2100      	movs	r1, #0
 8001482:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff fdf6 	bl	8001078 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001490:	2210      	movs	r2, #16
 8001492:	4013      	ands	r3, r2
 8001494:	2b10      	cmp	r3, #16
 8001496:	d005      	beq.n	80014a4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2204      	movs	r2, #4
 80014a0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80014a2:	d00b      	beq.n	80014bc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	2210      	movs	r2, #16
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2250      	movs	r2, #80	; 0x50
 80014b4:	2100      	movs	r1, #0
 80014b6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e132      	b.n	8001722 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c0:	4a9a      	ldr	r2, [pc, #616]	; (800172c <HAL_ADC_Init+0x2d0>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	2202      	movs	r2, #2
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2203      	movs	r2, #3
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d108      	bne.n	80014ec <HAL_ADC_Init+0x90>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_ADC_Init+0x90>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <HAL_ADC_Init+0x92>
 80014ec:	2300      	movs	r3, #0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d149      	bne.n	8001586 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	23c0      	movs	r3, #192	; 0xc0
 80014f8:	061b      	lsls	r3, r3, #24
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d00b      	beq.n	8001516 <HAL_ADC_Init+0xba>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	05db      	lsls	r3, r3, #23
 8001506:	429a      	cmp	r2, r3
 8001508:	d005      	beq.n	8001516 <HAL_ADC_Init+0xba>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	429a      	cmp	r2, r3
 8001514:	d111      	bne.n	800153a <HAL_ADC_Init+0xde>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	0892      	lsrs	r2, r2, #2
 8001524:	611a      	str	r2, [r3, #16]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6919      	ldr	r1, [r3, #16]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	e014      	b.n	8001564 <HAL_ADC_Init+0x108>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	0892      	lsrs	r2, r2, #2
 8001548:	611a      	str	r2, [r3, #16]
 800154a:	4b79      	ldr	r3, [pc, #484]	; (8001730 <HAL_ADC_Init+0x2d4>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b78      	ldr	r3, [pc, #480]	; (8001730 <HAL_ADC_Init+0x2d4>)
 8001550:	4978      	ldr	r1, [pc, #480]	; (8001734 <HAL_ADC_Init+0x2d8>)
 8001552:	400a      	ands	r2, r1
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	4b76      	ldr	r3, [pc, #472]	; (8001730 <HAL_ADC_Init+0x2d4>)
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	4b74      	ldr	r3, [pc, #464]	; (8001730 <HAL_ADC_Init+0x2d4>)
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2118      	movs	r1, #24
 8001570:	438a      	bics	r2, r1
 8001572:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68d9      	ldr	r1, [r3, #12]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001586:	4b6a      	ldr	r3, [pc, #424]	; (8001730 <HAL_ADC_Init+0x2d4>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4b69      	ldr	r3, [pc, #420]	; (8001730 <HAL_ADC_Init+0x2d4>)
 800158c:	496a      	ldr	r1, [pc, #424]	; (8001738 <HAL_ADC_Init+0x2dc>)
 800158e:	400a      	ands	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001592:	4b67      	ldr	r3, [pc, #412]	; (8001730 <HAL_ADC_Init+0x2d4>)
 8001594:	6819      	ldr	r1, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159a:	065a      	lsls	r2, r3, #25
 800159c:	4b64      	ldr	r3, [pc, #400]	; (8001730 <HAL_ADC_Init+0x2d4>)
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	055b      	lsls	r3, r3, #21
 80015ac:	4013      	ands	r3, r2
 80015ae:	d108      	bne.n	80015c2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	0549      	lsls	r1, r1, #21
 80015be:	430a      	orrs	r2, r1
 80015c0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	495b      	ldr	r1, [pc, #364]	; (800173c <HAL_ADC_Init+0x2e0>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68d9      	ldr	r1, [r3, #12]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_Init+0x18c>
 80015e4:	2304      	movs	r3, #4
 80015e6:	e000      	b.n	80015ea <HAL_ADC_Init+0x18e>
 80015e8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80015ea:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2020      	movs	r0, #32
 80015f0:	5c1b      	ldrb	r3, [r3, r0]
 80015f2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80015f4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	202c      	movs	r0, #44	; 0x2c
 80015fa:	5c1b      	ldrb	r3, [r3, r0]
 80015fc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015fe:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001604:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800160c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001614:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001622:	23c2      	movs	r3, #194	; 0xc2
 8001624:	33ff      	adds	r3, #255	; 0xff
 8001626:	429a      	cmp	r2, r3
 8001628:	d00b      	beq.n	8001642 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68d9      	ldr	r1, [r3, #12]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2221      	movs	r2, #33	; 0x21
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d11a      	bne.n	8001682 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2220      	movs	r2, #32
 8001650:	5c9b      	ldrb	r3, [r3, r2]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	0249      	lsls	r1, r1, #9
 8001664:	430a      	orrs	r2, r1
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	e00b      	b.n	8001682 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166e:	2220      	movs	r2, #32
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	2201      	movs	r2, #1
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001686:	2b01      	cmp	r3, #1
 8001688:	d11f      	bne.n	80016ca <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	492a      	ldr	r1, [pc, #168]	; (8001740 <HAL_ADC_Init+0x2e4>)
 8001696:	400a      	ands	r2, r1
 8001698:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6919      	ldr	r1, [r3, #16]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80016a8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80016ae:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2101      	movs	r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	e00e      	b.n	80016e8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d107      	bne.n	80016e8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2101      	movs	r1, #1
 80016e4:	438a      	bics	r2, r1
 80016e6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2107      	movs	r1, #7
 80016f4:	438a      	bics	r2, r1
 80016f6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6959      	ldr	r1, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	2203      	movs	r2, #3
 8001716:	4393      	bics	r3, r2
 8001718:	2201      	movs	r2, #1
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	fffffefd 	.word	0xfffffefd
 8001730:	40012708 	.word	0x40012708
 8001734:	ffc3ffff 	.word	0xffc3ffff
 8001738:	fdffffff 	.word	0xfdffffff
 800173c:	fffe0219 	.word	0xfffe0219
 8001740:	fffffc03 	.word	0xfffffc03

08001744 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2250      	movs	r2, #80	; 0x50
 8001752:	5c9b      	ldrb	r3, [r3, r2]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_ADC_ConfigChannel+0x18>
 8001758:	2302      	movs	r3, #2
 800175a:	e06c      	b.n	8001836 <HAL_ADC_ConfigChannel+0xf2>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2250      	movs	r2, #80	; 0x50
 8001760:	2101      	movs	r1, #1
 8001762:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2204      	movs	r2, #4
 800176c:	4013      	ands	r3, r2
 800176e:	d00b      	beq.n	8001788 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001774:	2220      	movs	r2, #32
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2250      	movs	r2, #80	; 0x50
 8001780:	2100      	movs	r1, #0
 8001782:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e056      	b.n	8001836 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <HAL_ADC_ConfigChannel+0xfc>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d028      	beq.n	80017e4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	035b      	lsls	r3, r3, #13
 800179e:	0b5a      	lsrs	r2, r3, #13
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	02db      	lsls	r3, r3, #11
 80017b0:	4013      	ands	r3, r2
 80017b2:	d009      	beq.n	80017c8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <HAL_ADC_ConfigChannel+0x100>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_ADC_ConfigChannel+0x100>)
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0409      	lsls	r1, r1, #16
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80017c2:	200a      	movs	r0, #10
 80017c4:	f000 f844 	bl	8001850 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	029b      	lsls	r3, r3, #10
 80017d0:	4013      	ands	r3, r2
 80017d2:	d02b      	beq.n	800182c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_ADC_ConfigChannel+0x100>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_ADC_ConfigChannel+0x100>)
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	03c9      	lsls	r1, r1, #15
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e023      	b.n	800182c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	035b      	lsls	r3, r3, #13
 80017f0:	0b5b      	lsrs	r3, r3, #13
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	400a      	ands	r2, r1
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	02db      	lsls	r3, r3, #11
 8001804:	4013      	ands	r3, r2
 8001806:	d005      	beq.n	8001814 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_ADC_ConfigChannel+0x100>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_ADC_ConfigChannel+0x100>)
 800180e:	490e      	ldr	r1, [pc, #56]	; (8001848 <HAL_ADC_ConfigChannel+0x104>)
 8001810:	400a      	ands	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	029b      	lsls	r3, r3, #10
 800181c:	4013      	ands	r3, r2
 800181e:	d005      	beq.n	800182c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_ADC_ConfigChannel+0x100>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <HAL_ADC_ConfigChannel+0x100>)
 8001826:	4909      	ldr	r1, [pc, #36]	; (800184c <HAL_ADC_ConfigChannel+0x108>)
 8001828:	400a      	ands	r2, r1
 800182a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2250      	movs	r2, #80	; 0x50
 8001830:	2100      	movs	r1, #0
 8001832:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	0018      	movs	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	00001001 	.word	0x00001001
 8001844:	40012708 	.word	0x40012708
 8001848:	ff7fffff 	.word	0xff7fffff
 800184c:	ffbfffff 	.word	0xffbfffff

08001850 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <ADC_DelayMicroSecond+0x34>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	490a      	ldr	r1, [pc, #40]	; (8001888 <ADC_DelayMicroSecond+0x38>)
 800185e:	0018      	movs	r0, r3
 8001860:	f7fe fc52 	bl	8000108 <__udivsi3>
 8001864:	0003      	movs	r3, r0
 8001866:	001a      	movs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4353      	muls	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800186e:	e002      	b.n	8001876 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3b01      	subs	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f9      	bne.n	8001870 <ADC_DelayMicroSecond+0x20>
  } 
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000000 	.word	0x20000000
 8001888:	000f4240 	.word	0x000f4240

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	0002      	movs	r2, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	d828      	bhi.n	80018f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a2:	4a2f      	ldr	r2, [pc, #188]	; (8001960 <__NVIC_SetPriority+0xd4>)
 80018a4:	1dfb      	adds	r3, r7, #7
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	33c0      	adds	r3, #192	; 0xc0
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	589b      	ldr	r3, [r3, r2]
 80018b2:	1dfa      	adds	r2, r7, #7
 80018b4:	7812      	ldrb	r2, [r2, #0]
 80018b6:	0011      	movs	r1, r2
 80018b8:	2203      	movs	r2, #3
 80018ba:	400a      	ands	r2, r1
 80018bc:	00d2      	lsls	r2, r2, #3
 80018be:	21ff      	movs	r1, #255	; 0xff
 80018c0:	4091      	lsls	r1, r2
 80018c2:	000a      	movs	r2, r1
 80018c4:	43d2      	mvns	r2, r2
 80018c6:	401a      	ands	r2, r3
 80018c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	22ff      	movs	r2, #255	; 0xff
 80018d0:	401a      	ands	r2, r3
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	0018      	movs	r0, r3
 80018d8:	2303      	movs	r3, #3
 80018da:	4003      	ands	r3, r0
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e0:	481f      	ldr	r0, [pc, #124]	; (8001960 <__NVIC_SetPriority+0xd4>)
 80018e2:	1dfb      	adds	r3, r7, #7
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	430a      	orrs	r2, r1
 80018ec:	33c0      	adds	r3, #192	; 0xc0
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018f2:	e031      	b.n	8001958 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f4:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <__NVIC_SetPriority+0xd8>)
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	0019      	movs	r1, r3
 80018fc:	230f      	movs	r3, #15
 80018fe:	400b      	ands	r3, r1
 8001900:	3b08      	subs	r3, #8
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3306      	adds	r3, #6
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	18d3      	adds	r3, r2, r3
 800190a:	3304      	adds	r3, #4
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	1dfa      	adds	r2, r7, #7
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	0011      	movs	r1, r2
 8001914:	2203      	movs	r2, #3
 8001916:	400a      	ands	r2, r1
 8001918:	00d2      	lsls	r2, r2, #3
 800191a:	21ff      	movs	r1, #255	; 0xff
 800191c:	4091      	lsls	r1, r2
 800191e:	000a      	movs	r2, r1
 8001920:	43d2      	mvns	r2, r2
 8001922:	401a      	ands	r2, r3
 8001924:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	22ff      	movs	r2, #255	; 0xff
 800192c:	401a      	ands	r2, r3
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	0018      	movs	r0, r3
 8001934:	2303      	movs	r3, #3
 8001936:	4003      	ands	r3, r0
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800193c:	4809      	ldr	r0, [pc, #36]	; (8001964 <__NVIC_SetPriority+0xd8>)
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	001c      	movs	r4, r3
 8001944:	230f      	movs	r3, #15
 8001946:	4023      	ands	r3, r4
 8001948:	3b08      	subs	r3, #8
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	430a      	orrs	r2, r1
 800194e:	3306      	adds	r3, #6
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	18c3      	adds	r3, r0, r3
 8001954:	3304      	adds	r3, #4
 8001956:	601a      	str	r2, [r3, #0]
}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b003      	add	sp, #12
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <SysTick_Config+0x40>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e010      	b.n	80019a0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <SysTick_Config+0x44>)
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	3a01      	subs	r2, #1
 8001984:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	2301      	movs	r3, #1
 8001988:	425b      	negs	r3, r3
 800198a:	2103      	movs	r1, #3
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff ff7d 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SysTick_Config+0x44>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <SysTick_Config+0x44>)
 800199a:	2207      	movs	r2, #7
 800199c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b002      	add	sp, #8
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	00ffffff 	.word	0x00ffffff
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	210f      	movs	r1, #15
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	1c02      	adds	r2, r0, #0
 80019c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b004      	add	sp, #16
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7ff ffbf 	bl	8001968 <SysTick_Config>
 80019ea:	0003      	movs	r3, r0
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b002      	add	sp, #8
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a0a:	e149      	b.n	8001ca0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2101      	movs	r1, #1
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4091      	lsls	r1, r2
 8001a16:	000a      	movs	r2, r1
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d100      	bne.n	8001a24 <HAL_GPIO_Init+0x30>
 8001a22:	e13a      	b.n	8001c9a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d00b      	beq.n	8001a44 <HAL_GPIO_Init+0x50>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d007      	beq.n	8001a44 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a38:	2b11      	cmp	r3, #17
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b12      	cmp	r3, #18
 8001a42:	d130      	bne.n	8001aa6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	409a      	lsls	r2, r3
 8001a52:	0013      	movs	r3, r2
 8001a54:	43da      	mvns	r2, r3
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	409a      	lsls	r2, r3
 8001a66:	0013      	movs	r3, r2
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	43da      	mvns	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	2201      	movs	r2, #1
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	0013      	movs	r3, r2
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0xf2>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b12      	cmp	r3, #18
 8001ae4:	d123      	bne.n	8001b2e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	58d3      	ldr	r3, [r2, r3]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2207      	movs	r2, #7
 8001af8:	4013      	ands	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	409a      	lsls	r2, r3
 8001b00:	0013      	movs	r3, r2
 8001b02:	43da      	mvns	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2107      	movs	r1, #7
 8001b12:	400b      	ands	r3, r1
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	409a      	lsls	r2, r3
 8001b18:	0013      	movs	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	6939      	ldr	r1, [r7, #16]
 8001b2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	0013      	movs	r3, r2
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	409a      	lsls	r2, r3
 8001b54:	0013      	movs	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	055b      	lsls	r3, r3, #21
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d100      	bne.n	8001b70 <HAL_GPIO_Init+0x17c>
 8001b6e:	e094      	b.n	8001c9a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b70:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <HAL_GPIO_Init+0x2c4>)
 8001b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_GPIO_Init+0x2c4>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_GPIO_Init+0x2c8>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	589b      	ldr	r3, [r3, r2]
 8001b88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	4013      	ands	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	409a      	lsls	r2, r3
 8001b96:	0013      	movs	r3, r2
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	23a0      	movs	r3, #160	; 0xa0
 8001ba4:	05db      	lsls	r3, r3, #23
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0x1de>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a44      	ldr	r2, [pc, #272]	; (8001cc0 <HAL_GPIO_Init+0x2cc>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00d      	beq.n	8001bce <HAL_GPIO_Init+0x1da>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a43      	ldr	r2, [pc, #268]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d007      	beq.n	8001bca <HAL_GPIO_Init+0x1d6>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a42      	ldr	r2, [pc, #264]	; (8001cc8 <HAL_GPIO_Init+0x2d4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_GPIO_Init+0x1d2>
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x1e0>
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	e004      	b.n	8001bd4 <HAL_GPIO_Init+0x1e0>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e002      	b.n	8001bd4 <HAL_GPIO_Init+0x1e0>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_GPIO_Init+0x1e0>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	2103      	movs	r1, #3
 8001bd8:	400a      	ands	r2, r1
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	4093      	lsls	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be4:	4935      	ldr	r1, [pc, #212]	; (8001cbc <HAL_GPIO_Init+0x2c8>)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_GPIO_Init+0x2d8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	025b      	lsls	r3, r3, #9
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c16:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_GPIO_Init+0x2d8>)
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_GPIO_Init+0x2d8>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43da      	mvns	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	029b      	lsls	r3, r3, #10
 8001c34:	4013      	ands	r3, r2
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_GPIO_Init+0x2d8>)
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_GPIO_Init+0x2d8>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	035b      	lsls	r3, r3, #13
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_GPIO_Init+0x2d8>)
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_GPIO_Init+0x2d8>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43da      	mvns	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	039b      	lsls	r3, r3, #14
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c94:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_GPIO_Init+0x2d8>)
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	40da      	lsrs	r2, r3
 8001ca8:	1e13      	subs	r3, r2, #0
 8001caa:	d000      	beq.n	8001cae <HAL_GPIO_Init+0x2ba>
 8001cac:	e6ae      	b.n	8001a0c <HAL_GPIO_Init+0x18>
  }
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b006      	add	sp, #24
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010000 	.word	0x40010000
 8001cc0:	50000400 	.word	0x50000400
 8001cc4:	50000800 	.word	0x50000800
 8001cc8:	50001c00 	.word	0x50001c00
 8001ccc:	40010400 	.word	0x40010400

08001cd0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	0008      	movs	r0, r1
 8001cda:	0011      	movs	r1, r2
 8001cdc:	1cbb      	adds	r3, r7, #2
 8001cde:	1c02      	adds	r2, r0, #0
 8001ce0:	801a      	strh	r2, [r3, #0]
 8001ce2:	1c7b      	adds	r3, r7, #1
 8001ce4:	1c0a      	adds	r2, r1, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ce8:	1c7b      	adds	r3, r7, #1
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf0:	1cbb      	adds	r3, r7, #2
 8001cf2:	881a      	ldrh	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001cfa:	1cbb      	adds	r3, r7, #2
 8001cfc:	881a      	ldrh	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b002      	add	sp, #8
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	000a      	movs	r2, r1
 8001d14:	1cbb      	adds	r3, r7, #2
 8001d16:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d1e:	1cbb      	adds	r3, r7, #2
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	041a      	lsls	r2, r3, #16
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	1cb9      	adds	r1, r7, #2
 8001d2e:	8809      	ldrh	r1, [r1, #0]
 8001d30:	400b      	ands	r3, r1
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b004      	add	sp, #16
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e082      	b.n	8001e58 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2241      	movs	r2, #65	; 0x41
 8001d56:	5c9b      	ldrb	r3, [r3, r2]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d107      	bne.n	8001d6e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2240      	movs	r2, #64	; 0x40
 8001d62:	2100      	movs	r1, #0
 8001d64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff f9c3 	bl	80010f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2241      	movs	r2, #65	; 0x41
 8001d72:	2124      	movs	r1, #36	; 0x24
 8001d74:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	438a      	bics	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4934      	ldr	r1, [pc, #208]	; (8001e60 <HAL_I2C_Init+0x120>)
 8001d90:	400a      	ands	r2, r1
 8001d92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4931      	ldr	r1, [pc, #196]	; (8001e64 <HAL_I2C_Init+0x124>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d108      	bne.n	8001dbe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2180      	movs	r1, #128	; 0x80
 8001db6:	0209      	lsls	r1, r1, #8
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	e007      	b.n	8001dce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2184      	movs	r1, #132	; 0x84
 8001dc8:	0209      	lsls	r1, r1, #8
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d104      	bne.n	8001de0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	491f      	ldr	r1, [pc, #124]	; (8001e68 <HAL_I2C_Init+0x128>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	491a      	ldr	r1, [pc, #104]	; (8001e64 <HAL_I2C_Init+0x124>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	0011      	movs	r1, r2
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	021a      	lsls	r2, r3, #8
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69d9      	ldr	r1, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1a      	ldr	r2, [r3, #32]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2101      	movs	r1, #1
 8001e36:	430a      	orrs	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2241      	movs	r2, #65	; 0x41
 8001e44:	2120      	movs	r1, #32
 8001e46:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2242      	movs	r2, #66	; 0x42
 8001e52:	2100      	movs	r1, #0
 8001e54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b002      	add	sp, #8
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	f0ffffff 	.word	0xf0ffffff
 8001e64:	ffff7fff 	.word	0xffff7fff
 8001e68:	02008000 	.word	0x02008000

08001e6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2241      	movs	r2, #65	; 0x41
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d138      	bne.n	8001ef4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2240      	movs	r2, #64	; 0x40
 8001e86:	5c9b      	ldrb	r3, [r3, r2]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e032      	b.n	8001ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	2101      	movs	r1, #1
 8001e96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2241      	movs	r2, #65	; 0x41
 8001e9c:	2124      	movs	r1, #36	; 0x24
 8001e9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2101      	movs	r1, #1
 8001eac:	438a      	bics	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4911      	ldr	r1, [pc, #68]	; (8001f00 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6819      	ldr	r1, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2101      	movs	r1, #1
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2241      	movs	r2, #65	; 0x41
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2240      	movs	r2, #64	; 0x40
 8001eec:	2100      	movs	r1, #0
 8001eee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e000      	b.n	8001ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
  }
}
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b002      	add	sp, #8
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	ffffefff 	.word	0xffffefff

08001f04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2241      	movs	r2, #65	; 0x41
 8001f12:	5c9b      	ldrb	r3, [r3, r2]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	d139      	bne.n	8001f8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2240      	movs	r2, #64	; 0x40
 8001f1e:	5c9b      	ldrb	r3, [r3, r2]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e033      	b.n	8001f90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2240      	movs	r2, #64	; 0x40
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2241      	movs	r2, #65	; 0x41
 8001f34:	2124      	movs	r1, #36	; 0x24
 8001f36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2101      	movs	r1, #1
 8001f44:	438a      	bics	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2101      	movs	r1, #1
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2241      	movs	r2, #65	; 0x41
 8001f7e:	2120      	movs	r1, #32
 8001f80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2240      	movs	r2, #64	; 0x40
 8001f86:	2100      	movs	r1, #0
 8001f88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f8e:	2302      	movs	r3, #2
  }
}
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b004      	add	sp, #16
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	fffff0ff 	.word	0xfffff0ff

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b5b0      	push	{r4, r5, r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f000 fb70 	bl	8002690 <HAL_RCC_OscConfig+0x6f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb0:	4bc9      	ldr	r3, [pc, #804]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	220c      	movs	r2, #12
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fba:	4bc7      	ldr	r3, [pc, #796]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	025b      	lsls	r3, r3, #9
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d100      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x36>
 8001fd0:	e07d      	b.n	80020ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d007      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d112      	bne.n	8002004 <HAL_RCC_OscConfig+0x68>
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	025b      	lsls	r3, r3, #9
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d10d      	bne.n	8002004 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	4bbb      	ldr	r3, [pc, #748]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d100      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x5a>
 8001ff4:	e06a      	b.n	80020cc <HAL_RCC_OscConfig+0x130>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d166      	bne.n	80020cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f000 fb46 	bl	8002690 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	025b      	lsls	r3, r3, #9
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x84>
 8002010:	4bb1      	ldr	r3, [pc, #708]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4bb0      	ldr	r3, [pc, #704]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	0249      	lsls	r1, r1, #9
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e027      	b.n	8002070 <HAL_RCC_OscConfig+0xd4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	23a0      	movs	r3, #160	; 0xa0
 8002026:	02db      	lsls	r3, r3, #11
 8002028:	429a      	cmp	r2, r3
 800202a:	d10e      	bne.n	800204a <HAL_RCC_OscConfig+0xae>
 800202c:	4baa      	ldr	r3, [pc, #680]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4ba9      	ldr	r3, [pc, #676]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	02c9      	lsls	r1, r1, #11
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	4ba7      	ldr	r3, [pc, #668]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4ba6      	ldr	r3, [pc, #664]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	0249      	lsls	r1, r1, #9
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e012      	b.n	8002070 <HAL_RCC_OscConfig+0xd4>
 800204a:	4ba3      	ldr	r3, [pc, #652]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4ba2      	ldr	r3, [pc, #648]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002050:	49a2      	ldr	r1, [pc, #648]	; (80022dc <HAL_RCC_OscConfig+0x340>)
 8002052:	400a      	ands	r2, r1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	4ba0      	ldr	r3, [pc, #640]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4b9c      	ldr	r3, [pc, #624]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b9b      	ldr	r3, [pc, #620]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 800206a:	499d      	ldr	r1, [pc, #628]	; (80022e0 <HAL_RCC_OscConfig+0x344>)
 800206c:	400a      	ands	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d014      	beq.n	80020a2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff f9c4 	bl	8001404 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002082:	f7ff f9bf 	bl	8001404 <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	; 0x64
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e2fd      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002094:	4b90      	ldr	r3, [pc, #576]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	029b      	lsls	r3, r3, #10
 800209c:	4013      	ands	r3, r2
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0xe6>
 80020a0:	e015      	b.n	80020ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff f9af 	bl	8001404 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff f9aa 	bl	8001404 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e2e8      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020be:	4b86      	ldr	r3, [pc, #536]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	029b      	lsls	r3, r3, #10
 80020c6:	4013      	ands	r3, r2
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x110>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d100      	bne.n	80020da <HAL_RCC_OscConfig+0x13e>
 80020d8:	e09a      	b.n	8002210 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	2220      	movs	r2, #32
 80020e4:	4013      	ands	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80020e8:	4b7b      	ldr	r3, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b7a      	ldr	r3, [pc, #488]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 80020ee:	2120      	movs	r1, #32
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	2220      	movs	r2, #32
 80020f8:	4393      	bics	r3, r2
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d13f      	bne.n	8002188 <HAL_RCC_OscConfig+0x1ec>
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d13c      	bne.n	8002188 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800210e:	4b72      	ldr	r3, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2204      	movs	r2, #4
 8002114:	4013      	ands	r3, r2
 8002116:	d004      	beq.n	8002122 <HAL_RCC_OscConfig+0x186>
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e2b6      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a6f      	ldr	r2, [pc, #444]	; (80022e4 <HAL_RCC_OscConfig+0x348>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	021a      	lsls	r2, r3, #8
 8002132:	4b69      	ldr	r3, [pc, #420]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002138:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2209      	movs	r2, #9
 800213e:	4393      	bics	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	4b65      	ldr	r3, [pc, #404]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002146:	430a      	orrs	r2, r1
 8002148:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800214a:	f000 fbef 	bl	800292c <HAL_RCC_GetSysClockFreq>
 800214e:	0001      	movs	r1, r0
 8002150:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	220f      	movs	r2, #15
 8002158:	4013      	ands	r3, r2
 800215a:	4a63      	ldr	r2, [pc, #396]	; (80022e8 <HAL_RCC_OscConfig+0x34c>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	000a      	movs	r2, r1
 8002160:	40da      	lsrs	r2, r3
 8002162:	4b62      	ldr	r3, [pc, #392]	; (80022ec <HAL_RCC_OscConfig+0x350>)
 8002164:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002166:	4b62      	ldr	r3, [pc, #392]	; (80022f0 <HAL_RCC_OscConfig+0x354>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2513      	movs	r5, #19
 800216c:	197c      	adds	r4, r7, r5
 800216e:	0018      	movs	r0, r3
 8002170:	f7ff f902 	bl	8001378 <HAL_InitTick>
 8002174:	0003      	movs	r3, r0
 8002176:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002178:	197b      	adds	r3, r7, r5
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d047      	beq.n	8002210 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002180:	2313      	movs	r3, #19
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	e283      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	2b00      	cmp	r3, #0
 800218c:	d027      	beq.n	80021de <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800218e:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2209      	movs	r2, #9
 8002194:	4393      	bics	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 800219a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff f930 	bl	8001404 <HAL_GetTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021aa:	f7ff f92b 	bl	8001404 <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e269      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021bc:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2204      	movs	r2, #4
 80021c2:	4013      	ands	r3, r2
 80021c4:	d0f1      	beq.n	80021aa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c6:	4b44      	ldr	r3, [pc, #272]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a46      	ldr	r2, [pc, #280]	; (80022e4 <HAL_RCC_OscConfig+0x348>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	021a      	lsls	r2, r3, #8
 80021d6:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 80021d8:	430a      	orrs	r2, r1
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	e018      	b.n	8002210 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 80021e4:	2101      	movs	r1, #1
 80021e6:	438a      	bics	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff f90b 	bl	8001404 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f4:	f7ff f906 	bl	8001404 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e244      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2204      	movs	r2, #4
 800220c:	4013      	ands	r3, r2
 800220e:	d1f1      	bne.n	80021f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2210      	movs	r2, #16
 8002216:	4013      	ands	r3, r2
 8002218:	d100      	bne.n	800221c <HAL_RCC_OscConfig+0x280>
 800221a:	e0a2      	b.n	8002362 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d141      	bne.n	80022a6 <HAL_RCC_OscConfig+0x30a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d005      	beq.n	800223a <HAL_RCC_OscConfig+0x29e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e22a      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a2d      	ldr	r2, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0x358>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	0a19      	lsrs	r1, r3, #8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	061a      	lsls	r2, r3, #24
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	0b5b      	lsrs	r3, r3, #13
 8002268:	3301      	adds	r3, #1
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	0212      	lsls	r2, r2, #8
 800226e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	210f      	movs	r1, #15
 8002278:	400b      	ands	r3, r1
 800227a:	491b      	ldr	r1, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x34c>)
 800227c:	5ccb      	ldrb	r3, [r1, r3]
 800227e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002280:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_RCC_OscConfig+0x350>)
 8002282:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <HAL_RCC_OscConfig+0x354>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2513      	movs	r5, #19
 800228a:	197c      	adds	r4, r7, r5
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff f873 	bl	8001378 <HAL_InitTick>
 8002292:	0003      	movs	r3, r0
 8002294:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002296:	197b      	adds	r3, r7, r5
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d061      	beq.n	8002362 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800229e:	2313      	movs	r3, #19
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	e1f4      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03f      	beq.n	800232e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x33c>)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0049      	lsls	r1, r1, #1
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff f8a2 	bl	8001404 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022c4:	e018      	b.n	80022f8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c6:	f7ff f89d 	bl	8001404 <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d911      	bls.n	80022f8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e1db      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	fffeffff 	.word	0xfffeffff
 80022e0:	fffbffff 	.word	0xfffbffff
 80022e4:	ffffe0ff 	.word	0xffffe0ff
 80022e8:	08003c7c 	.word	0x08003c7c
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004
 80022f4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022f8:	4bca      	ldr	r3, [pc, #808]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4013      	ands	r3, r2
 8002302:	d0e0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x32a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002304:	4bc7      	ldr	r3, [pc, #796]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4ac7      	ldr	r2, [pc, #796]	; (8002628 <HAL_RCC_OscConfig+0x68c>)
 800230a:	4013      	ands	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1a      	ldr	r2, [r3, #32]
 8002312:	4bc4      	ldr	r3, [pc, #784]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002318:	4bc2      	ldr	r3, [pc, #776]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	0a19      	lsrs	r1, r3, #8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	061a      	lsls	r2, r3, #24
 8002326:	4bbf      	ldr	r3, [pc, #764]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002328:	430a      	orrs	r2, r1
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	e019      	b.n	8002362 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800232e:	4bbd      	ldr	r3, [pc, #756]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4bbc      	ldr	r3, [pc, #752]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002334:	49bd      	ldr	r1, [pc, #756]	; (800262c <HAL_RCC_OscConfig+0x690>)
 8002336:	400a      	ands	r2, r1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7ff f863 	bl	8001404 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002344:	f7ff f85e 	bl	8001404 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e19c      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002356:	4bb3      	ldr	r3, [pc, #716]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2208      	movs	r2, #8
 8002368:	4013      	ands	r3, r2
 800236a:	d036      	beq.n	80023da <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d019      	beq.n	80023a8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002374:	4bab      	ldr	r3, [pc, #684]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002378:	4baa      	ldr	r3, [pc, #680]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 800237a:	2101      	movs	r1, #1
 800237c:	430a      	orrs	r2, r1
 800237e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7ff f840 	bl	8001404 <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238a:	f7ff f83b 	bl	8001404 <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e179      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800239c:	4ba1      	ldr	r3, [pc, #644]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 800239e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a0:	2202      	movs	r2, #2
 80023a2:	4013      	ands	r3, r2
 80023a4:	d0f1      	beq.n	800238a <HAL_RCC_OscConfig+0x3ee>
 80023a6:	e018      	b.n	80023da <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a8:	4b9e      	ldr	r3, [pc, #632]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80023aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023ac:	4b9d      	ldr	r3, [pc, #628]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80023ae:	2101      	movs	r1, #1
 80023b0:	438a      	bics	r2, r1
 80023b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b4:	f7ff f826 	bl	8001404 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023be:	f7ff f821 	bl	8001404 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e15f      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023d0:	4b94      	ldr	r3, [pc, #592]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80023d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d4:	2202      	movs	r2, #2
 80023d6:	4013      	ands	r3, r2
 80023d8:	d1f1      	bne.n	80023be <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	4013      	ands	r3, r2
 80023e2:	d100      	bne.n	80023e6 <HAL_RCC_OscConfig+0x44a>
 80023e4:	e0af      	b.n	8002546 <HAL_RCC_OscConfig+0x5aa>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2323      	movs	r3, #35	; 0x23
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ee:	4b8d      	ldr	r3, [pc, #564]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80023f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	055b      	lsls	r3, r3, #21
 80023f6:	4013      	ands	r3, r2
 80023f8:	d10a      	bne.n	8002410 <HAL_RCC_OscConfig+0x474>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b8a      	ldr	r3, [pc, #552]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80023fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fe:	4b89      	ldr	r3, [pc, #548]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	0549      	lsls	r1, r1, #21
 8002404:	430a      	orrs	r2, r1
 8002406:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002408:	2323      	movs	r3, #35	; 0x23
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	4b87      	ldr	r3, [pc, #540]	; (8002630 <HAL_RCC_OscConfig+0x694>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4013      	ands	r3, r2
 800241a:	d11a      	bne.n	8002452 <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241c:	4b84      	ldr	r3, [pc, #528]	; (8002630 <HAL_RCC_OscConfig+0x694>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b83      	ldr	r3, [pc, #524]	; (8002630 <HAL_RCC_OscConfig+0x694>)
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	0049      	lsls	r1, r1, #1
 8002426:	430a      	orrs	r2, r1
 8002428:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7fe ffeb 	bl	8001404 <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe ffe6 	bl	8001404 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e124      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	4b7a      	ldr	r3, [pc, #488]	; (8002630 <HAL_RCC_OscConfig+0x694>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4013      	ands	r3, r2
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x498>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	429a      	cmp	r2, r3
 800245c:	d107      	bne.n	800246e <HAL_RCC_OscConfig+0x4d2>
 800245e:	4b71      	ldr	r3, [pc, #452]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002460:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002462:	4b70      	ldr	r3, [pc, #448]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	0049      	lsls	r1, r1, #1
 8002468:	430a      	orrs	r2, r1
 800246a:	651a      	str	r2, [r3, #80]	; 0x50
 800246c:	e031      	b.n	80024d2 <HAL_RCC_OscConfig+0x536>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x4f4>
 8002476:	4b6b      	ldr	r3, [pc, #428]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800247a:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 800247c:	496b      	ldr	r1, [pc, #428]	; (800262c <HAL_RCC_OscConfig+0x690>)
 800247e:	400a      	ands	r2, r1
 8002480:	651a      	str	r2, [r3, #80]	; 0x50
 8002482:	4b68      	ldr	r3, [pc, #416]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002486:	4b67      	ldr	r3, [pc, #412]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002488:	496a      	ldr	r1, [pc, #424]	; (8002634 <HAL_RCC_OscConfig+0x698>)
 800248a:	400a      	ands	r2, r1
 800248c:	651a      	str	r2, [r3, #80]	; 0x50
 800248e:	e020      	b.n	80024d2 <HAL_RCC_OscConfig+0x536>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	23a0      	movs	r3, #160	; 0xa0
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	429a      	cmp	r2, r3
 800249a:	d10e      	bne.n	80024ba <HAL_RCC_OscConfig+0x51e>
 800249c:	4b61      	ldr	r3, [pc, #388]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 800249e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024a0:	4b60      	ldr	r3, [pc, #384]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	00c9      	lsls	r1, r1, #3
 80024a6:	430a      	orrs	r2, r1
 80024a8:	651a      	str	r2, [r3, #80]	; 0x50
 80024aa:	4b5e      	ldr	r3, [pc, #376]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80024ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ae:	4b5d      	ldr	r3, [pc, #372]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	0049      	lsls	r1, r1, #1
 80024b4:	430a      	orrs	r2, r1
 80024b6:	651a      	str	r2, [r3, #80]	; 0x50
 80024b8:	e00b      	b.n	80024d2 <HAL_RCC_OscConfig+0x536>
 80024ba:	4b5a      	ldr	r3, [pc, #360]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80024bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024be:	4b59      	ldr	r3, [pc, #356]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80024c0:	495a      	ldr	r1, [pc, #360]	; (800262c <HAL_RCC_OscConfig+0x690>)
 80024c2:	400a      	ands	r2, r1
 80024c4:	651a      	str	r2, [r3, #80]	; 0x50
 80024c6:	4b57      	ldr	r3, [pc, #348]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80024c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ca:	4b56      	ldr	r3, [pc, #344]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80024cc:	4959      	ldr	r1, [pc, #356]	; (8002634 <HAL_RCC_OscConfig+0x698>)
 80024ce:	400a      	ands	r2, r1
 80024d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d015      	beq.n	8002506 <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024da:	f7fe ff93 	bl	8001404 <HAL_GetTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e2:	e009      	b.n	80024f8 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7fe ff8e 	bl	8001404 <HAL_GetTick>
 80024e8:	0002      	movs	r2, r0
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	4a52      	ldr	r2, [pc, #328]	; (8002638 <HAL_RCC_OscConfig+0x69c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0cb      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024f8:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80024fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4013      	ands	r3, r2
 8002502:	d0ef      	beq.n	80024e4 <HAL_RCC_OscConfig+0x548>
 8002504:	e014      	b.n	8002530 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe ff7d 	bl	8001404 <HAL_GetTick>
 800250a:	0003      	movs	r3, r0
 800250c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800250e:	e009      	b.n	8002524 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002510:	f7fe ff78 	bl	8001404 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	4a47      	ldr	r2, [pc, #284]	; (8002638 <HAL_RCC_OscConfig+0x69c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0b5      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002524:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002526:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4013      	ands	r3, r2
 800252e:	d1ef      	bne.n	8002510 <HAL_RCC_OscConfig+0x574>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002530:	2323      	movs	r3, #35	; 0x23
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <HAL_RCC_OscConfig+0x5aa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253a:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 800253c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800253e:	4b39      	ldr	r3, [pc, #228]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002540:	493e      	ldr	r1, [pc, #248]	; (800263c <HAL_RCC_OscConfig+0x6a0>)
 8002542:	400a      	ands	r2, r1
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2b00      	cmp	r3, #0
 800254c:	d100      	bne.n	8002550 <HAL_RCC_OscConfig+0x5b4>
 800254e:	e09e      	b.n	800268e <HAL_RCC_OscConfig+0x6f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d100      	bne.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 8002556:	e077      	b.n	8002648 <HAL_RCC_OscConfig+0x6ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2b02      	cmp	r3, #2
 800255e:	d145      	bne.n	80025ec <HAL_RCC_OscConfig+0x650>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002560:	4b30      	ldr	r3, [pc, #192]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002566:	4936      	ldr	r1, [pc, #216]	; (8002640 <HAL_RCC_OscConfig+0x6a4>)
 8002568:	400a      	ands	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe ff4a 	bl	8001404 <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe ff45 	bl	8001404 <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e083      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002588:	4b26      	ldr	r3, [pc, #152]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	049b      	lsls	r3, r3, #18
 8002590:	4013      	ands	r3, r2
 8002592:	d1f0      	bne.n	8002576 <HAL_RCC_OscConfig+0x5da>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <HAL_RCC_OscConfig+0x6a8>)
 800259a:	4013      	ands	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	431a      	orrs	r2, r3
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80025b0:	430a      	orrs	r2, r1
 80025b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	0449      	lsls	r1, r1, #17
 80025be:	430a      	orrs	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7fe ff1f 	bl	8001404 <HAL_GetTick>
 80025c6:	0003      	movs	r3, r0
 80025c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe ff1a 	bl	8001404 <HAL_GetTick>
 80025d0:	0002      	movs	r2, r0
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e058      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	049b      	lsls	r3, r3, #18
 80025e6:	4013      	ands	r3, r2
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x630>
 80025ea:	e050      	b.n	800268e <HAL_RCC_OscConfig+0x6f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80025f2:	4913      	ldr	r1, [pc, #76]	; (8002640 <HAL_RCC_OscConfig+0x6a4>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe ff04 	bl	8001404 <HAL_GetTick>
 80025fc:	0003      	movs	r3, r0
 80025fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x678>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe feff 	bl	8001404 <HAL_GetTick>
 8002606:	0002      	movs	r2, r0
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x678>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e03d      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	049b      	lsls	r3, r3, #18
 800261c:	4013      	ands	r3, r2
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x666>
 8002620:	e035      	b.n	800268e <HAL_RCC_OscConfig+0x6f2>
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	40021000 	.word	0x40021000
 8002628:	ffff1fff 	.word	0xffff1fff
 800262c:	fffffeff 	.word	0xfffffeff
 8002630:	40007000 	.word	0x40007000
 8002634:	fffffbff 	.word	0xfffffbff
 8002638:	00001388 	.word	0x00001388
 800263c:	efffffff 	.word	0xefffffff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_RCC_OscConfig+0x6b8>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e01d      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_RCC_OscConfig+0x6fc>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	025b      	lsls	r3, r3, #9
 8002660:	401a      	ands	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	429a      	cmp	r2, r3
 8002668:	d10f      	bne.n	800268a <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	23f0      	movs	r3, #240	; 0xf0
 800266e:	039b      	lsls	r3, r3, #14
 8002670:	401a      	ands	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d107      	bne.n	800268a <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	23c0      	movs	r3, #192	; 0xc0
 800267e:	041b      	lsls	r3, r3, #16
 8002680:	401a      	ands	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x6f4>
        }
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b00a      	add	sp, #40	; 0x28
 8002696:	bdb0      	pop	{r4, r5, r7, pc}
 8002698:	40021000 	.word	0x40021000

0800269c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269c:	b5b0      	push	{r4, r5, r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e129      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4b96      	ldr	r3, [pc, #600]	; (800290c <HAL_RCC_ClockConfig+0x270>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2201      	movs	r2, #1
 80026b6:	4013      	ands	r3, r2
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d91e      	bls.n	80026fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b93      	ldr	r3, [pc, #588]	; (800290c <HAL_RCC_ClockConfig+0x270>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	4393      	bics	r3, r2
 80026c6:	0019      	movs	r1, r3
 80026c8:	4b90      	ldr	r3, [pc, #576]	; (800290c <HAL_RCC_ClockConfig+0x270>)
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026d0:	f7fe fe98 	bl	8001404 <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d8:	e009      	b.n	80026ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026da:	f7fe fe93 	bl	8001404 <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	4a8a      	ldr	r2, [pc, #552]	; (8002910 <HAL_RCC_ClockConfig+0x274>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e10a      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b87      	ldr	r3, [pc, #540]	; (800290c <HAL_RCC_ClockConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	4013      	ands	r3, r2
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d1ee      	bne.n	80026da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2202      	movs	r2, #2
 8002702:	4013      	ands	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002706:	4b83      	ldr	r3, [pc, #524]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	22f0      	movs	r2, #240	; 0xf0
 800270c:	4393      	bics	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	4b7f      	ldr	r3, [pc, #508]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 8002716:	430a      	orrs	r2, r1
 8002718:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	4013      	ands	r3, r2
 8002722:	d100      	bne.n	8002726 <HAL_RCC_ClockConfig+0x8a>
 8002724:	e089      	b.n	800283a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800272e:	4b79      	ldr	r3, [pc, #484]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	029b      	lsls	r3, r3, #10
 8002736:	4013      	ands	r3, r2
 8002738:	d120      	bne.n	800277c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e0e2      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002746:	4b73      	ldr	r3, [pc, #460]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	049b      	lsls	r3, r3, #18
 800274e:	4013      	ands	r3, r2
 8002750:	d114      	bne.n	800277c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0d6      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d106      	bne.n	800276c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800275e:	4b6d      	ldr	r3, [pc, #436]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2204      	movs	r2, #4
 8002764:	4013      	ands	r3, r2
 8002766:	d109      	bne.n	800277c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0cb      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800276c:	4b69      	ldr	r3, [pc, #420]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4013      	ands	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0c3      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277c:	4b65      	ldr	r3, [pc, #404]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2203      	movs	r2, #3
 8002782:	4393      	bics	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4b62      	ldr	r3, [pc, #392]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 800278c:	430a      	orrs	r2, r1
 800278e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002790:	f7fe fe38 	bl	8001404 <HAL_GetTick>
 8002794:	0003      	movs	r3, r0
 8002796:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d111      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a0:	e009      	b.n	80027b6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a2:	f7fe fe2f 	bl	8001404 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	4a58      	ldr	r2, [pc, #352]	; (8002910 <HAL_RCC_ClockConfig+0x274>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0a6      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b6:	4b57      	ldr	r3, [pc, #348]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	220c      	movs	r2, #12
 80027bc:	4013      	ands	r3, r2
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d1ef      	bne.n	80027a2 <HAL_RCC_ClockConfig+0x106>
 80027c2:	e03a      	b.n	800283a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d111      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027cc:	e009      	b.n	80027e2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ce:	f7fe fe19 	bl	8001404 <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	4a4d      	ldr	r2, [pc, #308]	; (8002910 <HAL_RCC_ClockConfig+0x274>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e090      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e2:	4b4c      	ldr	r3, [pc, #304]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	220c      	movs	r2, #12
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d1ef      	bne.n	80027ce <HAL_RCC_ClockConfig+0x132>
 80027ee:	e024      	b.n	800283a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d11b      	bne.n	8002830 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f8:	e009      	b.n	800280e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fa:	f7fe fe03 	bl	8001404 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	4a42      	ldr	r2, [pc, #264]	; (8002910 <HAL_RCC_ClockConfig+0x274>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e07a      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800280e:	4b41      	ldr	r3, [pc, #260]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	220c      	movs	r2, #12
 8002814:	4013      	ands	r3, r2
 8002816:	2b04      	cmp	r3, #4
 8002818:	d1ef      	bne.n	80027fa <HAL_RCC_ClockConfig+0x15e>
 800281a:	e00e      	b.n	800283a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7fe fdf2 	bl	8001404 <HAL_GetTick>
 8002820:	0002      	movs	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	4a3a      	ldr	r2, [pc, #232]	; (8002910 <HAL_RCC_ClockConfig+0x274>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e069      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002830:	4b38      	ldr	r3, [pc, #224]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	220c      	movs	r2, #12
 8002836:	4013      	ands	r3, r2
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800283a:	4b34      	ldr	r3, [pc, #208]	; (800290c <HAL_RCC_ClockConfig+0x270>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2201      	movs	r2, #1
 8002840:	4013      	ands	r3, r2
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d21e      	bcs.n	8002886 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002848:	4b30      	ldr	r3, [pc, #192]	; (800290c <HAL_RCC_ClockConfig+0x270>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	4393      	bics	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <HAL_RCC_ClockConfig+0x270>)
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800285a:	f7fe fdd3 	bl	8001404 <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	e009      	b.n	8002878 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7fe fdce 	bl	8001404 <HAL_GetTick>
 8002868:	0002      	movs	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	4a28      	ldr	r2, [pc, #160]	; (8002910 <HAL_RCC_ClockConfig+0x274>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e045      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_ClockConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d1ee      	bne.n	8002864 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2204      	movs	r2, #4
 800288c:	4013      	ands	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4a20      	ldr	r2, [pc, #128]	; (8002918 <HAL_RCC_ClockConfig+0x27c>)
 8002896:	4013      	ands	r3, r2
 8002898:	0019      	movs	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80028a0:	430a      	orrs	r2, r1
 80028a2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2208      	movs	r2, #8
 80028aa:	4013      	ands	r3, r2
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4a1a      	ldr	r2, [pc, #104]	; (800291c <HAL_RCC_ClockConfig+0x280>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	00da      	lsls	r2, r3, #3
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80028c0:	430a      	orrs	r2, r1
 80028c2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028c4:	f000 f832 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80028c8:	0001      	movs	r1, r0
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	220f      	movs	r2, #15
 80028d2:	4013      	ands	r3, r2
 80028d4:	4a12      	ldr	r2, [pc, #72]	; (8002920 <HAL_RCC_ClockConfig+0x284>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	000a      	movs	r2, r1
 80028da:	40da      	lsrs	r2, r3
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_ClockConfig+0x288>)
 80028de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_RCC_ClockConfig+0x28c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	250b      	movs	r5, #11
 80028e6:	197c      	adds	r4, r7, r5
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7fe fd45 	bl	8001378 <HAL_InitTick>
 80028ee:	0003      	movs	r3, r0
 80028f0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80028f2:	197b      	adds	r3, r7, r5
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 80028fa:	230b      	movs	r3, #11
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	e000      	b.n	8002904 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b004      	add	sp, #16
 800290a:	bdb0      	pop	{r4, r5, r7, pc}
 800290c:	40022000 	.word	0x40022000
 8002910:	00001388 	.word	0x00001388
 8002914:	40021000 	.word	0x40021000
 8002918:	fffff8ff 	.word	0xfffff8ff
 800291c:	ffffc7ff 	.word	0xffffc7ff
 8002920:	08003c7c 	.word	0x08003c7c
 8002924:	20000000 	.word	0x20000000
 8002928:	20000004 	.word	0x20000004

0800292c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800292c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292e:	b08f      	sub	sp, #60	; 0x3c
 8002930:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x130>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800293a:	230c      	movs	r3, #12
 800293c:	4013      	ands	r3, r2
 800293e:	2b08      	cmp	r3, #8
 8002940:	d00f      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x36>
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d010      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x3c>
 8002946:	2b04      	cmp	r3, #4
 8002948:	d000      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x20>
 800294a:	e073      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800294c:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x130>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2210      	movs	r2, #16
 8002952:	4013      	ands	r3, r2
 8002954:	d002      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002956:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x134>)
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800295a:	e079      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 800295c:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x138>)
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002960:	e076      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002962:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002966:	e073      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296a:	0c9a      	lsrs	r2, r3, #18
 800296c:	230f      	movs	r3, #15
 800296e:	401a      	ands	r2, r3
 8002970:	4b3e      	ldr	r3, [pc, #248]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x140>)
 8002972:	5c9b      	ldrb	r3, [r3, r2]
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002978:	0d9a      	lsrs	r2, r3, #22
 800297a:	2303      	movs	r3, #3
 800297c:	4013      	ands	r3, r2
 800297e:	3301      	adds	r3, #1
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002982:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x130>)
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	025b      	lsls	r3, r3, #9
 800298a:	4013      	ands	r3, r2
 800298c:	d019      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002998:	2300      	movs	r3, #0
 800299a:	69b8      	ldr	r0, [r7, #24]
 800299c:	69f9      	ldr	r1, [r7, #28]
 800299e:	f7fd fc5f 	bl	8000260 <__aeabi_lmul>
 80029a2:	0003      	movs	r3, r0
 80029a4:	000c      	movs	r4, r1
 80029a6:	0018      	movs	r0, r3
 80029a8:	0021      	movs	r1, r4
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f7fd fc33 	bl	8000220 <__aeabi_uldivmod>
 80029ba:	0003      	movs	r3, r0
 80029bc:	000c      	movs	r4, r1
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
 80029c0:	e035      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029c2:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x130>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2210      	movs	r2, #16
 80029c8:	4013      	ands	r3, r2
 80029ca:	d019      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	4a22      	ldr	r2, [pc, #136]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x134>)
 80029d6:	2300      	movs	r3, #0
 80029d8:	68b8      	ldr	r0, [r7, #8]
 80029da:	68f9      	ldr	r1, [r7, #12]
 80029dc:	f7fd fc40 	bl	8000260 <__aeabi_lmul>
 80029e0:	0003      	movs	r3, r0
 80029e2:	000c      	movs	r4, r1
 80029e4:	0018      	movs	r0, r3
 80029e6:	0021      	movs	r1, r4
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	2300      	movs	r3, #0
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f7fd fc14 	bl	8000220 <__aeabi_uldivmod>
 80029f8:	0003      	movs	r3, r0
 80029fa:	000c      	movs	r4, r1
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
 80029fe:	e016      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	0018      	movs	r0, r3
 8002a04:	2300      	movs	r3, #0
 8002a06:	0019      	movs	r1, r3
 8002a08:	4a16      	ldr	r2, [pc, #88]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f7fd fc28 	bl	8000260 <__aeabi_lmul>
 8002a10:	0003      	movs	r3, r0
 8002a12:	000c      	movs	r4, r1
 8002a14:	0018      	movs	r0, r3
 8002a16:	0021      	movs	r1, r4
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	001d      	movs	r5, r3
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	001e      	movs	r6, r3
 8002a20:	002a      	movs	r2, r5
 8002a22:	0033      	movs	r3, r6
 8002a24:	f7fd fbfc 	bl	8000220 <__aeabi_uldivmod>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	000c      	movs	r4, r1
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a32:	e00d      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x130>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	0b5b      	lsrs	r3, r3, #13
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	3301      	adds	r3, #1
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	0212      	lsls	r2, r2, #8
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	0013      	movs	r3, r2
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a4e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a52:	0018      	movs	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b00f      	add	sp, #60	; 0x3c
 8002a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	003d0900 	.word	0x003d0900
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	007a1200 	.word	0x007a1200
 8002a6c:	08003c8c 	.word	0x08003c8c

08002a70 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a78:	2317      	movs	r3, #23
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2220      	movs	r2, #32
 8002a86:	4013      	ands	r3, r2
 8002a88:	d100      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002a8a:	e0c3      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8c:	4b82      	ldr	r3, [pc, #520]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	055b      	lsls	r3, r3, #21
 8002a94:	4013      	ands	r3, r2
 8002a96:	d10a      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9c:	4b7e      	ldr	r3, [pc, #504]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	0549      	lsls	r1, r1, #21
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002aa6:	2317      	movs	r3, #23
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aae:	4b7b      	ldr	r3, [pc, #492]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d11a      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aba:	4b78      	ldr	r3, [pc, #480]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b77      	ldr	r3, [pc, #476]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0049      	lsls	r1, r1, #1
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fc9c 	bl	8001404 <HAL_GetTick>
 8002acc:	0003      	movs	r3, r0
 8002ace:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad2:	f7fe fc97 	bl	8001404 <HAL_GetTick>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b64      	cmp	r3, #100	; 0x64
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e0d4      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	4b6d      	ldr	r3, [pc, #436]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4013      	ands	r3, r2
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002af0:	4b69      	ldr	r3, [pc, #420]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	23c0      	movs	r3, #192	; 0xc0
 8002af6:	039b      	lsls	r3, r3, #14
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	23c0      	movs	r3, #192	; 0xc0
 8002b02:	039b      	lsls	r3, r3, #14
 8002b04:	4013      	ands	r3, r2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	23c0      	movs	r3, #192	; 0xc0
 8002b12:	029b      	lsls	r3, r3, #10
 8002b14:	401a      	ands	r2, r3
 8002b16:	23c0      	movs	r3, #192	; 0xc0
 8002b18:	029b      	lsls	r3, r3, #10
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d10a      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b1e:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	029b      	lsls	r3, r3, #10
 8002b26:	401a      	ands	r2, r3
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	029b      	lsls	r3, r3, #10
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0ac      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b34:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b38:	23c0      	movs	r3, #192	; 0xc0
 8002b3a:	029b      	lsls	r3, r3, #10
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d03b      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	23c0      	movs	r3, #192	; 0xc0
 8002b4c:	029b      	lsls	r3, r3, #10
 8002b4e:	4013      	ands	r3, r2
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d033      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d02e      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b60:	4b4d      	ldr	r3, [pc, #308]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b6a:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b6e:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b70:	2180      	movs	r1, #128	; 0x80
 8002b72:	0309      	lsls	r1, r1, #12
 8002b74:	430a      	orrs	r2, r1
 8002b76:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b78:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b7c:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b7e:	4949      	ldr	r1, [pc, #292]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002b84:	4b44      	ldr	r3, [pc, #272]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4013      	ands	r3, r2
 8002b92:	d014      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe fc36 	bl	8001404 <HAL_GetTick>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b9c:	e009      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7fe fc31 	bl	8001404 <HAL_GetTick>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	4a3f      	ldr	r2, [pc, #252]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e06d      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bb2:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d0ef      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	23c0      	movs	r3, #192	; 0xc0
 8002bc4:	029b      	lsls	r3, r3, #10
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	23c0      	movs	r3, #192	; 0xc0
 8002bca:	029b      	lsls	r3, r3, #10
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d10c      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002bd0:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a35      	ldr	r2, [pc, #212]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	23c0      	movs	r3, #192	; 0xc0
 8002be0:	039b      	lsls	r3, r3, #14
 8002be2:	401a      	ands	r2, r3
 8002be4:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	23c0      	movs	r3, #192	; 0xc0
 8002bf4:	029b      	lsls	r3, r3, #10
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bfe:	2317      	movs	r3, #23
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c0e:	4928      	ldr	r1, [pc, #160]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	220c      	movs	r2, #12
 8002c24:	4393      	bics	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2204      	movs	r2, #4
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c3c:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c40:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	0019      	movs	r1, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2208      	movs	r2, #8
 8002c56:	4013      	ands	r3, r2
 8002c58:	d009      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	0019      	movs	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	4013      	ands	r3, r2
 8002c76:	d009      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7c:	4a0f      	ldr	r2, [pc, #60]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b006      	add	sp, #24
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	fffcffff 	.word	0xfffcffff
 8002ca4:	fff7ffff 	.word	0xfff7ffff
 8002ca8:	00001388 	.word	0x00001388
 8002cac:	ffcfffff 	.word	0xffcfffff
 8002cb0:	efffffff 	.word	0xefffffff
 8002cb4:	fffff3ff 	.word	0xfffff3ff
 8002cb8:	ffffcfff 	.word	0xffffcfff
 8002cbc:	fff3ffff 	.word	0xfff3ffff

08002cc0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e08e      	b.n	8002df0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2221      	movs	r2, #33	; 0x21
 8002cd6:	5c9b      	ldrb	r3, [r3, r2]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d107      	bne.n	8002cee <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7fe fa47 	bl	800117c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2221      	movs	r2, #33	; 0x21
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	22ca      	movs	r2, #202	; 0xca
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2253      	movs	r2, #83	; 0x53
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 fa10 	bl	800312e <RTC_EnterInitMode>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d009      	beq.n	8002d26 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	22ff      	movs	r2, #255	; 0xff
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2221      	movs	r2, #33	; 0x21
 8002d1e:	2104      	movs	r1, #4
 8002d20:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e064      	b.n	8002df0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4931      	ldr	r1, [pc, #196]	; (8002df8 <HAL_RTC_Init+0x138>)
 8002d32:	400a      	ands	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68d2      	ldr	r2, [r2, #12]
 8002d5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6919      	ldr	r1, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	041a      	lsls	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	438a      	bics	r2, r1
 8002d80:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2103      	movs	r1, #3
 8002d8e:	438a      	bics	r2, r1
 8002d90:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2220      	movs	r2, #32
 8002db2:	4013      	ands	r3, r2
 8002db4:	d113      	bne.n	8002dde <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 f991 	bl	80030e0 <HAL_RTC_WaitForSynchro>
 8002dbe:	1e03      	subs	r3, r0, #0
 8002dc0:	d00d      	beq.n	8002dde <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	22ff      	movs	r2, #255	; 0xff
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2221      	movs	r2, #33	; 0x21
 8002dce:	2104      	movs	r1, #4
 8002dd0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e008      	b.n	8002df0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	22ff      	movs	r2, #255	; 0xff
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2221      	movs	r2, #33	; 0x21
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002dee:	2300      	movs	r3, #0
  }
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b002      	add	sp, #8
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	ff8fffbf 	.word	0xff8fffbf

08002dfc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	5c9b      	ldrb	r3, [r3, r2]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_RTC_SetTime+0x1a>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0ad      	b.n	8002f72 <HAL_RTC_SetTime+0x176>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2221      	movs	r2, #33	; 0x21
 8002e22:	2102      	movs	r1, #2
 8002e24:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d125      	bne.n	8002e78 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2240      	movs	r2, #64	; 0x40
 8002e34:	4013      	ands	r3, r2
 8002e36:	d102      	bne.n	8002e3e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 f99d 	bl	8003182 <RTC_ByteToBcd2>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	785b      	ldrb	r3, [r3, #1]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 f996 	bl	8003182 <RTC_ByteToBcd2>
 8002e56:	0003      	movs	r3, r0
 8002e58:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e5a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	789b      	ldrb	r3, [r3, #2]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 f98e 	bl	8003182 <RTC_ByteToBcd2>
 8002e66:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002e68:	0022      	movs	r2, r4
 8002e6a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	78db      	ldrb	r3, [r3, #3]
 8002e70:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	e017      	b.n	8002ea8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2240      	movs	r2, #64	; 0x40
 8002e80:	4013      	ands	r3, r2
 8002e82:	d102      	bne.n	8002e8a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	785b      	ldrb	r3, [r3, #1]
 8002e94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e96:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e9c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	78db      	ldrb	r3, [r3, #3]
 8002ea2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	22ca      	movs	r2, #202	; 0xca
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2253      	movs	r2, #83	; 0x53
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 f937 	bl	800312e <RTC_EnterInitMode>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	22ff      	movs	r2, #255	; 0xff
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2221      	movs	r2, #33	; 0x21
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	2100      	movs	r1, #0
 8002eda:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e048      	b.n	8002f72 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4925      	ldr	r1, [pc, #148]	; (8002f7c <HAL_RTC_SetTime+0x180>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4922      	ldr	r1, [pc, #136]	; (8002f80 <HAL_RTC_SetTime+0x184>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	438a      	bics	r2, r1
 8002f22:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d113      	bne.n	8002f58 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 f8d4 	bl	80030e0 <HAL_RTC_WaitForSynchro>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d00d      	beq.n	8002f58 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	22ff      	movs	r2, #255	; 0xff
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2221      	movs	r2, #33	; 0x21
 8002f48:	2104      	movs	r1, #4
 8002f4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	2100      	movs	r1, #0
 8002f52:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e00c      	b.n	8002f72 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2221      	movs	r2, #33	; 0x21
 8002f64:	2101      	movs	r1, #1
 8002f66:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
  }
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b007      	add	sp, #28
 8002f78:	bd90      	pop	{r4, r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	007f7f7f 	.word	0x007f7f7f
 8002f80:	fffbffff 	.word	0xfffbffff

08002f84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	5c9b      	ldrb	r3, [r3, r2]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_RTC_SetDate+0x1a>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e099      	b.n	80030d2 <HAL_RTC_SetDate+0x14e>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2221      	movs	r2, #33	; 0x21
 8002faa:	2102      	movs	r1, #2
 8002fac:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10e      	bne.n	8002fd2 <HAL_RTC_SetDate+0x4e>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	001a      	movs	r2, r3
 8002fba:	2310      	movs	r3, #16
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	4393      	bics	r3, r2
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	330a      	adds	r3, #10
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11c      	bne.n	8003012 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	78db      	ldrb	r3, [r3, #3]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f8d0 	bl	8003182 <RTC_ByteToBcd2>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	785b      	ldrb	r3, [r3, #1]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 f8c9 	bl	8003182 <RTC_ByteToBcd2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ff4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	789b      	ldrb	r3, [r3, #2]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 f8c1 	bl	8003182 <RTC_ByteToBcd2>
 8003000:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003002:	0022      	movs	r2, r4
 8003004:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e00e      	b.n	8003030 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	78db      	ldrb	r3, [r3, #3]
 8003016:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	785b      	ldrb	r3, [r3, #1]
 800301c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800301e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003024:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	22ca      	movs	r2, #202	; 0xca
 8003036:	625a      	str	r2, [r3, #36]	; 0x24
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2253      	movs	r2, #83	; 0x53
 800303e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f873 	bl	800312e <RTC_EnterInitMode>
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d00d      	beq.n	8003068 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	22ff      	movs	r2, #255	; 0xff
 8003052:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2221      	movs	r2, #33	; 0x21
 8003058:	2104      	movs	r1, #4
 800305a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e034      	b.n	80030d2 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	491b      	ldr	r1, [pc, #108]	; (80030dc <HAL_RTC_SetDate+0x158>)
 8003070:	400a      	ands	r2, r1
 8003072:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	438a      	bics	r2, r1
 8003082:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2220      	movs	r2, #32
 800308c:	4013      	ands	r3, r2
 800308e:	d113      	bne.n	80030b8 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	0018      	movs	r0, r3
 8003094:	f000 f824 	bl	80030e0 <HAL_RTC_WaitForSynchro>
 8003098:	1e03      	subs	r3, r0, #0
 800309a:	d00d      	beq.n	80030b8 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	22ff      	movs	r2, #255	; 0xff
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2221      	movs	r2, #33	; 0x21
 80030a8:	2104      	movs	r1, #4
 80030aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	2100      	movs	r1, #0
 80030b2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e00c      	b.n	80030d2 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2221      	movs	r2, #33	; 0x21
 80030c4:	2101      	movs	r1, #1
 80030c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	2100      	movs	r1, #0
 80030ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
  }
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b007      	add	sp, #28
 80030d8:	bd90      	pop	{r4, r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	00ffff3f 	.word	0x00ffff3f

080030e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	21a0      	movs	r1, #160	; 0xa0
 80030f4:	438a      	bics	r2, r1
 80030f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80030f8:	f7fe f984 	bl	8001404 <HAL_GetTick>
 80030fc:	0003      	movs	r3, r0
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003100:	e00a      	b.n	8003118 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003102:	f7fe f97f 	bl	8001404 <HAL_GetTick>
 8003106:	0002      	movs	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1ad2      	subs	r2, r2, r3
 800310c:	23fa      	movs	r3, #250	; 0xfa
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	429a      	cmp	r2, r3
 8003112:	d901      	bls.n	8003118 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e006      	b.n	8003126 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	4013      	ands	r3, r2
 8003122:	d0ee      	beq.n	8003102 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b004      	add	sp, #16
 800312c:	bd80      	pop	{r7, pc}

0800312e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2240      	movs	r2, #64	; 0x40
 800313e:	4013      	ands	r3, r2
 8003140:	d11a      	bne.n	8003178 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2201      	movs	r2, #1
 8003148:	4252      	negs	r2, r2
 800314a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800314c:	f7fe f95a 	bl	8001404 <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003154:	e00a      	b.n	800316c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003156:	f7fe f955 	bl	8001404 <HAL_GetTick>
 800315a:	0002      	movs	r2, r0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1ad2      	subs	r2, r2, r3
 8003160:	23fa      	movs	r3, #250	; 0xfa
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	429a      	cmp	r2, r3
 8003166:	d901      	bls.n	800316c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e006      	b.n	800317a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2240      	movs	r2, #64	; 0x40
 8003174:	4013      	ands	r3, r2
 8003176:	d0ee      	beq.n	8003156 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b004      	add	sp, #16
 8003180:	bd80      	pop	{r7, pc}

08003182 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	0002      	movs	r2, r0
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003192:	230b      	movs	r3, #11
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	1dfa      	adds	r2, r7, #7
 8003198:	7812      	ldrb	r2, [r2, #0]
 800319a:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800319c:	e008      	b.n	80031b0 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3301      	adds	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80031a4:	220b      	movs	r2, #11
 80031a6:	18bb      	adds	r3, r7, r2
 80031a8:	18ba      	adds	r2, r7, r2
 80031aa:	7812      	ldrb	r2, [r2, #0]
 80031ac:	3a0a      	subs	r2, #10
 80031ae:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80031b0:	230b      	movs	r3, #11
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b09      	cmp	r3, #9
 80031b8:	d8f1      	bhi.n	800319e <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	230b      	movs	r3, #11
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	b2db      	uxtb	r3, r3
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b004      	add	sp, #16
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	5c9b      	ldrb	r3, [r3, r2]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e08c      	b.n	8003308 <HAL_RTCEx_SetWakeUpTimer+0x134>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	2101      	movs	r1, #1
 80031f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2221      	movs	r2, #33	; 0x21
 80031fa:	2102      	movs	r1, #2
 80031fc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	22ca      	movs	r2, #202	; 0xca
 8003204:	625a      	str	r2, [r3, #36]	; 0x24
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2253      	movs	r2, #83	; 0x53
 800320c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4013      	ands	r3, r2
 800321a:	d021      	beq.n	8003260 <HAL_RTCEx_SetWakeUpTimer+0x8c>
  {
    tickstart = HAL_GetTick();
 800321c:	f7fe f8f2 	bl	8001404 <HAL_GetTick>
 8003220:	0003      	movs	r3, r0
 8003222:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003224:	e016      	b.n	8003254 <HAL_RTCEx_SetWakeUpTimer+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003226:	f7fe f8ed 	bl	8001404 <HAL_GetTick>
 800322a:	0002      	movs	r2, r0
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	1ad2      	subs	r2, r2, r3
 8003230:	23fa      	movs	r3, #250	; 0xfa
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d90d      	bls.n	8003254 <HAL_RTCEx_SetWakeUpTimer+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	22ff      	movs	r2, #255	; 0xff
 800323e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2221      	movs	r2, #33	; 0x21
 8003244:	2103      	movs	r1, #3
 8003246:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	2100      	movs	r1, #0
 800324e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e059      	b.n	8003308 <HAL_RTCEx_SetWakeUpTimer+0x134>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2204      	movs	r2, #4
 800325c:	4013      	ands	r3, r2
 800325e:	d1e2      	bne.n	8003226 <HAL_RTCEx_SetWakeUpTimer+0x52>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4929      	ldr	r1, [pc, #164]	; (8003310 <HAL_RTCEx_SetWakeUpTimer+0x13c>)
 800326c:	400a      	ands	r2, r1
 800326e:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003270:	f7fe f8c8 	bl	8001404 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003278:	e016      	b.n	80032a8 <HAL_RTCEx_SetWakeUpTimer+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800327a:	f7fe f8c3 	bl	8001404 <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	23fa      	movs	r3, #250	; 0xfa
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	429a      	cmp	r2, r3
 800328a:	d90d      	bls.n	80032a8 <HAL_RTCEx_SetWakeUpTimer+0xd4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	22ff      	movs	r2, #255	; 0xff
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2221      	movs	r2, #33	; 0x21
 8003298:	2103      	movs	r1, #3
 800329a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	2100      	movs	r1, #0
 80032a2:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e02f      	b.n	8003308 <HAL_RTCEx_SetWakeUpTimer+0x134>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2204      	movs	r2, #4
 80032b0:	4013      	ands	r3, r2
 80032b2:	d0e2      	beq.n	800327a <HAL_RTCEx_SetWakeUpTimer+0xa6>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2107      	movs	r1, #7
 80032c0:	438a      	bics	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6899      	ldr	r1, [r3, #8]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	00c9      	lsls	r1, r1, #3
 80032ea:	430a      	orrs	r2, r1
 80032ec:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	22ff      	movs	r2, #255	; 0xff
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2221      	movs	r2, #33	; 0x21
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b006      	add	sp, #24
 800330e:	bd80      	pop	{r7, pc}
 8003310:	fffffbff 	.word	0xfffffbff

08003314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07b      	b.n	800341e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	2382      	movs	r3, #130	; 0x82
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	429a      	cmp	r2, r3
 8003338:	d009      	beq.n	800334e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	61da      	str	r2, [r3, #28]
 8003340:	e005      	b.n	800334e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2251      	movs	r2, #81	; 0x51
 8003358:	5c9b      	ldrb	r3, [r3, r2]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d107      	bne.n	8003370 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2250      	movs	r2, #80	; 0x50
 8003364:	2100      	movs	r1, #0
 8003366:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0018      	movs	r0, r3
 800336c:	f7fd ff1e 	bl	80011ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2251      	movs	r2, #81	; 0x51
 8003374:	2102      	movs	r1, #2
 8003376:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2140      	movs	r1, #64	; 0x40
 8003384:	438a      	bics	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	2382      	movs	r3, #130	; 0x82
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	401a      	ands	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6899      	ldr	r1, [r3, #8]
 8003396:	2384      	movs	r3, #132	; 0x84
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	400b      	ands	r3, r1
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68d9      	ldr	r1, [r3, #12]
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	400b      	ands	r3, r1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2102      	movs	r1, #2
 80033b0:	400b      	ands	r3, r1
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2101      	movs	r1, #1
 80033ba:	400b      	ands	r3, r1
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6999      	ldr	r1, [r3, #24]
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	400b      	ands	r3, r1
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	2138      	movs	r1, #56	; 0x38
 80033d0:	400b      	ands	r3, r1
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	2180      	movs	r1, #128	; 0x80
 80033da:	400b      	ands	r3, r1
 80033dc:	431a      	orrs	r2, r3
 80033de:	0011      	movs	r1, r2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	019b      	lsls	r3, r3, #6
 80033e8:	401a      	ands	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	0c1b      	lsrs	r3, r3, #16
 80033f8:	2204      	movs	r2, #4
 80033fa:	4013      	ands	r3, r2
 80033fc:	0019      	movs	r1, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2210      	movs	r2, #16
 8003404:	401a      	ands	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2251      	movs	r2, #81	; 0x51
 8003418:	2101      	movs	r1, #1
 800341a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b088      	sub	sp, #32
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	1dbb      	adds	r3, r7, #6
 8003434:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003436:	231f      	movs	r3, #31
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2250      	movs	r2, #80	; 0x50
 8003442:	5c9b      	ldrb	r3, [r3, r2]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_SPI_Transmit+0x26>
 8003448:	2302      	movs	r3, #2
 800344a:	e13e      	b.n	80036ca <HAL_SPI_Transmit+0x2a4>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2250      	movs	r2, #80	; 0x50
 8003450:	2101      	movs	r1, #1
 8003452:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003454:	f7fd ffd6 	bl	8001404 <HAL_GetTick>
 8003458:	0003      	movs	r3, r0
 800345a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800345c:	2316      	movs	r3, #22
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	1dba      	adds	r2, r7, #6
 8003462:	8812      	ldrh	r2, [r2, #0]
 8003464:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2251      	movs	r2, #81	; 0x51
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	d004      	beq.n	800347c <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003472:	231f      	movs	r3, #31
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	2202      	movs	r2, #2
 8003478:	701a      	strb	r2, [r3, #0]
    goto error;
 800347a:	e11b      	b.n	80036b4 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_SPI_Transmit+0x64>
 8003482:	1dbb      	adds	r3, r7, #6
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800348a:	231f      	movs	r3, #31
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
    goto error;
 8003492:	e10f      	b.n	80036b4 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2251      	movs	r2, #81	; 0x51
 8003498:	2103      	movs	r1, #3
 800349a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1dba      	adds	r2, r7, #6
 80034ac:	8812      	ldrh	r2, [r2, #0]
 80034ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1dba      	adds	r2, r7, #6
 80034b4:	8812      	ldrh	r2, [r2, #0]
 80034b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	429a      	cmp	r2, r3
 80034e0:	d110      	bne.n	8003504 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2140      	movs	r1, #64	; 0x40
 80034ee:	438a      	bics	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	01c9      	lsls	r1, r1, #7
 8003500:	430a      	orrs	r2, r1
 8003502:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	4013      	ands	r3, r2
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	d007      	beq.n	8003522 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2140      	movs	r1, #64	; 0x40
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	429a      	cmp	r2, r3
 800352c:	d14e      	bne.n	80035cc <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d004      	beq.n	8003540 <HAL_SPI_Transmit+0x11a>
 8003536:	2316      	movs	r3, #22
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d13f      	bne.n	80035c0 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	881a      	ldrh	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	1c9a      	adds	r2, r3, #2
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003564:	e02c      	b.n	80035c0 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2202      	movs	r2, #2
 800356e:	4013      	ands	r3, r2
 8003570:	2b02      	cmp	r3, #2
 8003572:	d112      	bne.n	800359a <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	881a      	ldrh	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	1c9a      	adds	r2, r3, #2
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	86da      	strh	r2, [r3, #54]	; 0x36
 8003598:	e012      	b.n	80035c0 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800359a:	f7fd ff33 	bl	8001404 <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d802      	bhi.n	80035b0 <HAL_SPI_Transmit+0x18a>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	d102      	bne.n	80035b6 <HAL_SPI_Transmit+0x190>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80035b6:	231f      	movs	r3, #31
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	2203      	movs	r2, #3
 80035bc:	701a      	strb	r2, [r3, #0]
          goto error;
 80035be:	e079      	b.n	80036b4 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1cd      	bne.n	8003566 <HAL_SPI_Transmit+0x140>
 80035ca:	e04f      	b.n	800366c <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <HAL_SPI_Transmit+0x1b8>
 80035d4:	2316      	movs	r3, #22
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d141      	bne.n	8003662 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	7812      	ldrb	r2, [r2, #0]
 80035ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003604:	e02d      	b.n	8003662 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2202      	movs	r2, #2
 800360e:	4013      	ands	r3, r2
 8003610:	2b02      	cmp	r3, #2
 8003612:	d113      	bne.n	800363c <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	86da      	strh	r2, [r3, #54]	; 0x36
 800363a:	e012      	b.n	8003662 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363c:	f7fd fee2 	bl	8001404 <HAL_GetTick>
 8003640:	0002      	movs	r2, r0
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d802      	bhi.n	8003652 <HAL_SPI_Transmit+0x22c>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	d102      	bne.n	8003658 <HAL_SPI_Transmit+0x232>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d104      	bne.n	8003662 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003658:	231f      	movs	r3, #31
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2203      	movs	r2, #3
 800365e:	701a      	strb	r2, [r3, #0]
          goto error;
 8003660:	e028      	b.n	80036b4 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1cc      	bne.n	8003606 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	0018      	movs	r0, r3
 8003674:	f000 fa78 	bl	8003b68 <SPI_EndRxTxTransaction>
 8003678:	1e03      	subs	r3, r0, #0
 800367a:	d002      	beq.n	8003682 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80036a8:	231f      	movs	r3, #31
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	e000      	b.n	80036b4 <HAL_SPI_Transmit+0x28e>
  }

error:
 80036b2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2251      	movs	r2, #81	; 0x51
 80036b8:	2101      	movs	r1, #1
 80036ba:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2250      	movs	r2, #80	; 0x50
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80036c4:	231f      	movs	r3, #31
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	781b      	ldrb	r3, [r3, #0]
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b008      	add	sp, #32
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b08c      	sub	sp, #48	; 0x30
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	001a      	movs	r2, r3
 80036e0:	1cbb      	adds	r3, r7, #2
 80036e2:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036e4:	2301      	movs	r3, #1
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036e8:	232b      	movs	r3, #43	; 0x2b
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2250      	movs	r2, #80	; 0x50
 80036f4:	5c9b      	ldrb	r3, [r3, r2]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x2c>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e1a1      	b.n	8003a42 <HAL_SPI_TransmitReceive+0x370>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2250      	movs	r2, #80	; 0x50
 8003702:	2101      	movs	r1, #1
 8003704:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003706:	f7fd fe7d 	bl	8001404 <HAL_GetTick>
 800370a:	0003      	movs	r3, r0
 800370c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800370e:	2023      	movs	r0, #35	; 0x23
 8003710:	183b      	adds	r3, r7, r0
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	2151      	movs	r1, #81	; 0x51
 8003716:	5c52      	ldrb	r2, [r2, r1]
 8003718:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003720:	231a      	movs	r3, #26
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	1cba      	adds	r2, r7, #2
 8003726:	8812      	ldrh	r2, [r2, #0]
 8003728:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800372a:	183b      	adds	r3, r7, r0
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d012      	beq.n	8003758 <HAL_SPI_TransmitReceive+0x86>
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	2382      	movs	r3, #130	; 0x82
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	429a      	cmp	r2, r3
 800373a:	d108      	bne.n	800374e <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d104      	bne.n	800374e <HAL_SPI_TransmitReceive+0x7c>
 8003744:	2323      	movs	r3, #35	; 0x23
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b04      	cmp	r3, #4
 800374c:	d004      	beq.n	8003758 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800374e:	232b      	movs	r3, #43	; 0x2b
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	2202      	movs	r2, #2
 8003754:	701a      	strb	r2, [r3, #0]
    goto error;
 8003756:	e169      	b.n	8003a2c <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d006      	beq.n	800376c <HAL_SPI_TransmitReceive+0x9a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_SPI_TransmitReceive+0x9a>
 8003764:	1cbb      	adds	r3, r7, #2
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800376c:	232b      	movs	r3, #43	; 0x2b
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
    goto error;
 8003774:	e15a      	b.n	8003a2c <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2251      	movs	r2, #81	; 0x51
 800377a:	5c9b      	ldrb	r3, [r3, r2]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b04      	cmp	r3, #4
 8003780:	d003      	beq.n	800378a <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2251      	movs	r2, #81	; 0x51
 8003786:	2105      	movs	r1, #5
 8003788:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1cba      	adds	r2, r7, #2
 800379a:	8812      	ldrh	r2, [r2, #0]
 800379c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1cba      	adds	r2, r7, #2
 80037a2:	8812      	ldrh	r2, [r2, #0]
 80037a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1cba      	adds	r2, r7, #2
 80037b0:	8812      	ldrh	r2, [r2, #0]
 80037b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1cba      	adds	r2, r7, #2
 80037b8:	8812      	ldrh	r2, [r2, #0]
 80037ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d007      	beq.n	80037e6 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2140      	movs	r1, #64	; 0x40
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d000      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x122>
 80037f2:	e07a      	b.n	80038ea <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x134>
 80037fc:	231a      	movs	r3, #26
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d166      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	881a      	ldrh	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	1c9a      	adds	r2, r3, #2
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800382a:	e053      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2202      	movs	r2, #2
 8003834:	4013      	ands	r3, r2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d11b      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x1a0>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d016      	beq.n	8003872 <HAL_SPI_TransmitReceive+0x1a0>
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d113      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	1c9a      	adds	r2, r3, #2
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2201      	movs	r2, #1
 800387a:	4013      	ands	r3, r2
 800387c:	2b01      	cmp	r3, #1
 800387e:	d119      	bne.n	80038b4 <HAL_SPI_TransmitReceive+0x1e2>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d014      	beq.n	80038b4 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	b292      	uxth	r2, r2
 8003896:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	1c9a      	adds	r2, r3, #2
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038b0:	2301      	movs	r3, #1
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038b4:	f7fd fda6 	bl	8001404 <HAL_GetTick>
 80038b8:	0002      	movs	r2, r0
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d807      	bhi.n	80038d4 <HAL_SPI_TransmitReceive+0x202>
 80038c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c6:	3301      	adds	r3, #1
 80038c8:	d004      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 80038ca:	232b      	movs	r3, #43	; 0x2b
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	2203      	movs	r2, #3
 80038d0:	701a      	strb	r2, [r3, #0]
        goto error;
 80038d2:	e0ab      	b.n	8003a2c <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1a6      	bne.n	800382c <HAL_SPI_TransmitReceive+0x15a>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1a1      	bne.n	800382c <HAL_SPI_TransmitReceive+0x15a>
 80038e8:	e07f      	b.n	80039ea <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_SPI_TransmitReceive+0x22c>
 80038f2:	231a      	movs	r3, #26
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d000      	beq.n	80038fe <HAL_SPI_TransmitReceive+0x22c>
 80038fc:	e06b      	b.n	80039d6 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003924:	e057      	b.n	80039d6 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2202      	movs	r2, #2
 800392e:	4013      	ands	r3, r2
 8003930:	2b02      	cmp	r3, #2
 8003932:	d11c      	bne.n	800396e <HAL_SPI_TransmitReceive+0x29c>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d017      	beq.n	800396e <HAL_SPI_TransmitReceive+0x29c>
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d114      	bne.n	800396e <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	7812      	ldrb	r2, [r2, #0]
 8003950:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2201      	movs	r2, #1
 8003976:	4013      	ands	r3, r2
 8003978:	2b01      	cmp	r3, #1
 800397a:	d119      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x2de>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d014      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ac:	2301      	movs	r3, #1
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039b0:	f7fd fd28 	bl	8001404 <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039bc:	429a      	cmp	r2, r3
 80039be:	d802      	bhi.n	80039c6 <HAL_SPI_TransmitReceive+0x2f4>
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	3301      	adds	r3, #1
 80039c4:	d102      	bne.n	80039cc <HAL_SPI_TransmitReceive+0x2fa>
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 80039cc:	232b      	movs	r3, #43	; 0x2b
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	2203      	movs	r2, #3
 80039d2:	701a      	strb	r2, [r3, #0]
        goto error;
 80039d4:	e02a      	b.n	8003a2c <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1a2      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x254>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d19d      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 f8b9 	bl	8003b68 <SPI_EndRxTxTransaction>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d007      	beq.n	8003a0a <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80039fa:	232b      	movs	r3, #43	; 0x2b
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a08:	e010      	b.n	8003a2c <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10b      	bne.n	8003a2a <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	e000      	b.n	8003a2c <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8003a2a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2251      	movs	r2, #81	; 0x51
 8003a30:	2101      	movs	r1, #1
 8003a32:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2250      	movs	r2, #80	; 0x50
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003a3c:	232b      	movs	r3, #43	; 0x2b
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	781b      	ldrb	r3, [r3, #0]
}
 8003a42:	0018      	movs	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b00c      	add	sp, #48	; 0x30
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	1dfb      	adds	r3, r7, #7
 8003a5a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a5c:	f7fd fcd2 	bl	8001404 <HAL_GetTick>
 8003a60:	0002      	movs	r2, r0
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	18d3      	adds	r3, r2, r3
 8003a6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a6c:	f7fd fcca 	bl	8001404 <HAL_GetTick>
 8003a70:	0003      	movs	r3, r0
 8003a72:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a74:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	015b      	lsls	r3, r3, #5
 8003a7a:	0d1b      	lsrs	r3, r3, #20
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	4353      	muls	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a82:	e058      	b.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	d055      	beq.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a8a:	f7fd fcbb 	bl	8001404 <HAL_GetTick>
 8003a8e:	0002      	movs	r2, r0
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d902      	bls.n	8003aa0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d142      	bne.n	8003b26 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	21e0      	movs	r1, #224	; 0xe0
 8003aac:	438a      	bics	r2, r1
 8003aae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	2382      	movs	r3, #130	; 0x82
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d113      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d005      	beq.n	8003ad4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d107      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2140      	movs	r1, #64	; 0x40
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	019b      	lsls	r3, r3, #6
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d110      	bne.n	8003b12 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	491a      	ldr	r1, [pc, #104]	; (8003b64 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003afc:	400a      	ands	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2180      	movs	r1, #128	; 0x80
 8003b0c:	0189      	lsls	r1, r1, #6
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2251      	movs	r2, #81	; 0x51
 8003b16:	2101      	movs	r1, #1
 8003b18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2250      	movs	r2, #80	; 0x50
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e017      	b.n	8003b56 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	425a      	negs	r2, r3
 8003b46:	4153      	adcs	r3, r2
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	001a      	movs	r2, r3
 8003b4c:	1dfb      	adds	r3, r7, #7
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d197      	bne.n	8003a84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b008      	add	sp, #32
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	20000000 	.word	0x20000000
 8003b64:	ffffdfff 	.word	0xffffdfff

08003b68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <SPI_EndRxTxTransaction+0x84>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	491d      	ldr	r1, [pc, #116]	; (8003bf0 <SPI_EndRxTxTransaction+0x88>)
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7fc fac4 	bl	8000108 <__udivsi3>
 8003b80:	0003      	movs	r3, r0
 8003b82:	001a      	movs	r2, r3
 8003b84:	0013      	movs	r3, r2
 8003b86:	015b      	lsls	r3, r3, #5
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	189b      	adds	r3, r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	2382      	movs	r3, #130	; 0x82
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d112      	bne.n	8003bc4 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	0013      	movs	r3, r2
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2180      	movs	r1, #128	; 0x80
 8003bac:	f7ff ff4e 	bl	8003a4c <SPI_WaitFlagStateUntilTimeout>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d016      	beq.n	8003be2 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	2220      	movs	r2, #32
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e00f      	b.n	8003be4 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2280      	movs	r2, #128	; 0x80
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b80      	cmp	r3, #128	; 0x80
 8003bdc:	d0f2      	beq.n	8003bc4 <SPI_EndRxTxTransaction+0x5c>
 8003bde:	e000      	b.n	8003be2 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003be0:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b006      	add	sp, #24
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000000 	.word	0x20000000
 8003bf0:	016e3600 	.word	0x016e3600

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	2600      	movs	r6, #0
 8003bf8:	4d0c      	ldr	r5, [pc, #48]	; (8003c2c <__libc_init_array+0x38>)
 8003bfa:	4c0d      	ldr	r4, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfc:	1b64      	subs	r4, r4, r5
 8003bfe:	10a4      	asrs	r4, r4, #2
 8003c00:	42a6      	cmp	r6, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	2600      	movs	r6, #0
 8003c06:	f000 f821 	bl	8003c4c <_init>
 8003c0a:	4d0a      	ldr	r5, [pc, #40]	; (8003c34 <__libc_init_array+0x40>)
 8003c0c:	4c0a      	ldr	r4, [pc, #40]	; (8003c38 <__libc_init_array+0x44>)
 8003c0e:	1b64      	subs	r4, r4, r5
 8003c10:	10a4      	asrs	r4, r4, #2
 8003c12:	42a6      	cmp	r6, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	00b3      	lsls	r3, r6, #2
 8003c1a:	58eb      	ldr	r3, [r5, r3]
 8003c1c:	4798      	blx	r3
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	00b3      	lsls	r3, r6, #2
 8003c24:	58eb      	ldr	r3, [r5, r3]
 8003c26:	4798      	blx	r3
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	08003ca0 	.word	0x08003ca0
 8003c30:	08003ca0 	.word	0x08003ca0
 8003c34:	08003ca0 	.word	0x08003ca0
 8003c38:	08003ca4 	.word	0x08003ca4

08003c3c <memset>:
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	1812      	adds	r2, r2, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d100      	bne.n	8003c46 <memset+0xa>
 8003c44:	4770      	bx	lr
 8003c46:	7019      	strb	r1, [r3, #0]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	e7f9      	b.n	8003c40 <memset+0x4>

08003c4c <_init>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr

08003c58 <_fini>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr
