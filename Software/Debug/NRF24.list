
NRF24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800303c  0800303c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003058  08003058  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003058  08003058  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003058  08003058  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  0800306c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800306c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a02d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a07  00000000  00000000  0002a061  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a58  00000000  00000000  0002ba68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000970  00000000  00000000  0002c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010762  00000000  00000000  0002ce30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008edb  00000000  00000000  0003d592  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00063fe8  00000000  00000000  0004646d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aa455  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002464  00000000  00000000  000aa4d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003024 	.word	0x08003024

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003024 	.word	0x08003024

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t s;
	uint8_t buffer[6] = {0,0,0,0,0,0};
 8000226:	003b      	movs	r3, r7
 8000228:	0018      	movs	r0, r3
 800022a:	2306      	movs	r3, #6
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f002 fef0 	bl	8003014 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fca8 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f832 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f97a 	bl	8000534 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000240:	f000 f900 	bl	8000444 <MX_I2C1_Init>
  MX_ADC_Init();
 8000244:	f000 f898 	bl	8000378 <MX_ADC_Init>
  MX_SPI1_Init();
 8000248:	f000 f93c 	bl	80004c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  nRF24_Init(&hspi1);
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <main+0x78>)
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fa10 	bl	8000674 <nRF24_Init>
  s = nRF24_GetStatus();
 8000254:	1dfc      	adds	r4, r7, #7
 8000256:	f000 fb1b 	bl	8000890 <nRF24_GetStatus>
 800025a:	0003      	movs	r3, r0
 800025c:	7023      	strb	r3, [r4, #0]
  __NOP;
  nRF24_SetRFChannel(10);
 800025e:	200a      	movs	r0, #10
 8000260:	f000 fb26 	bl	80008b0 <nRF24_SetRFChannel>
  s = nRF24_ReadRegister(nRF24_REG_RF_CH);
 8000264:	1dfc      	adds	r4, r7, #7
 8000266:	2005      	movs	r0, #5
 8000268:	f000 fa8a 	bl	8000780 <nRF24_ReadRegister>
 800026c:	0003      	movs	r3, r0
 800026e:	7023      	strb	r3, [r4, #0]
  __NOP;
  nRF24_ReadMBRegister(nRF24_REG_TX_ADDR, buffer, 5);
 8000270:	003b      	movs	r3, r7
 8000272:	2205      	movs	r2, #5
 8000274:	0019      	movs	r1, r3
 8000276:	2010      	movs	r0, #16
 8000278:	f000 fab8 	bl	80007ec <nRF24_ReadMBRegister>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	4a06      	ldr	r2, [pc, #24]	; (800029c <main+0x7c>)
 8000282:	0019      	movs	r1, r3
 8000284:	0010      	movs	r0, r2
 8000286:	f001 f968 	bl	800155a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800028a:	23fa      	movs	r3, #250	; 0xfa
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fcea 	bl	8000c68 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000294:	e7f2      	b.n	800027c <main+0x5c>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	2000007c 	.word	0x2000007c
 800029c:	50000800 	.word	0x50000800

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b099      	sub	sp, #100	; 0x64
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	242c      	movs	r4, #44	; 0x2c
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	0018      	movs	r0, r3
 80002ac:	2334      	movs	r3, #52	; 0x34
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f002 feaf 	bl	8003014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b6:	2318      	movs	r3, #24
 80002b8:	18fb      	adds	r3, r7, r3
 80002ba:	0018      	movs	r0, r3
 80002bc:	2314      	movs	r3, #20
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f002 fea7 	bl	8003014 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c6:	003b      	movs	r3, r7
 80002c8:	0018      	movs	r0, r3
 80002ca:	2318      	movs	r3, #24
 80002cc:	001a      	movs	r2, r3
 80002ce:	2100      	movs	r1, #0
 80002d0:	f002 fea0 	bl	8003014 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002d4:	4b26      	ldr	r3, [pc, #152]	; (8000370 <SystemClock_Config+0xd0>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a26      	ldr	r2, [pc, #152]	; (8000374 <SystemClock_Config+0xd4>)
 80002da:	401a      	ands	r2, r3
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <SystemClock_Config+0xd0>)
 80002de:	2180      	movs	r1, #128	; 0x80
 80002e0:	0109      	lsls	r1, r1, #4
 80002e2:	430a      	orrs	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002e6:	0021      	movs	r1, r4
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2210      	movs	r2, #16
 80002ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2201      	movs	r2, #1
 80002f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	22a0      	movs	r2, #160	; 0xa0
 80002fe:	0212      	lsls	r2, r2, #8
 8000300:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	187b      	adds	r3, r7, r1
 800030a:	0018      	movs	r0, r3
 800030c:	f001 fa6e 	bl	80017ec <HAL_RCC_OscConfig>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000314:	f000 f9a8 	bl	8000668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	2118      	movs	r1, #24
 800031a:	187b      	adds	r3, r7, r1
 800031c:	220f      	movs	r2, #15
 800031e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2100      	movs	r1, #0
 800033c:	0018      	movs	r0, r3
 800033e:	f001 fdcf 	bl	8001ee0 <HAL_RCC_ClockConfig>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000346:	f000 f98f 	bl	8000668 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800034a:	003b      	movs	r3, r7
 800034c:	2208      	movs	r2, #8
 800034e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000350:	003b      	movs	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	003b      	movs	r3, r7
 8000358:	0018      	movs	r0, r3
 800035a:	f001 ff6f 	bl	800223c <HAL_RCCEx_PeriphCLKConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000362:	f000 f981 	bl	8000668 <Error_Handler>
  }
}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b019      	add	sp, #100	; 0x64
 800036c:	bd90      	pop	{r4, r7, pc}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	40007000 	.word	0x40007000
 8000374:	ffffe7ff 	.word	0xffffe7ff

08000378 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800037e:	003b      	movs	r3, r7
 8000380:	0018      	movs	r0, r3
 8000382:	2308      	movs	r3, #8
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f002 fe44 	bl	8003014 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800038c:	4b2a      	ldr	r3, [pc, #168]	; (8000438 <MX_ADC_Init+0xc0>)
 800038e:	4a2b      	ldr	r2, [pc, #172]	; (800043c <MX_ADC_Init+0xc4>)
 8000390:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000392:	4b29      	ldr	r3, [pc, #164]	; (8000438 <MX_ADC_Init+0xc0>)
 8000394:	2200      	movs	r2, #0
 8000396:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000398:	4b27      	ldr	r3, [pc, #156]	; (8000438 <MX_ADC_Init+0xc0>)
 800039a:	22c0      	movs	r2, #192	; 0xc0
 800039c:	0612      	lsls	r2, r2, #24
 800039e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003a0:	4b25      	ldr	r3, [pc, #148]	; (8000438 <MX_ADC_Init+0xc0>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a6:	4b24      	ldr	r3, [pc, #144]	; (8000438 <MX_ADC_Init+0xc0>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003ac:	4b22      	ldr	r3, [pc, #136]	; (8000438 <MX_ADC_Init+0xc0>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b2:	4b21      	ldr	r3, [pc, #132]	; (8000438 <MX_ADC_Init+0xc0>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003b8:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <MX_ADC_Init+0xc0>)
 80003ba:	2220      	movs	r2, #32
 80003bc:	2100      	movs	r1, #0
 80003be:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003c0:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <MX_ADC_Init+0xc0>)
 80003c2:	2221      	movs	r2, #33	; 0x21
 80003c4:	2100      	movs	r1, #0
 80003c6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <MX_ADC_Init+0xc0>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <MX_ADC_Init+0xc0>)
 80003d0:	22c2      	movs	r2, #194	; 0xc2
 80003d2:	32ff      	adds	r2, #255	; 0xff
 80003d4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_ADC_Init+0xc0>)
 80003d8:	222c      	movs	r2, #44	; 0x2c
 80003da:	2100      	movs	r1, #0
 80003dc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003de:	4b16      	ldr	r3, [pc, #88]	; (8000438 <MX_ADC_Init+0xc0>)
 80003e0:	2204      	movs	r2, #4
 80003e2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <MX_ADC_Init+0xc0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <MX_ADC_Init+0xc0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_ADC_Init+0xc0>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <MX_ADC_Init+0xc0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_ADC_Init+0xc0>)
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fc54 	bl	8000cac <HAL_ADC_Init>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000408:	f000 f92e 	bl	8000668 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800040c:	003b      	movs	r3, r7
 800040e:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <MX_ADC_Init+0xc8>)
 8000410:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000412:	003b      	movs	r3, r7
 8000414:	2280      	movs	r2, #128	; 0x80
 8000416:	0152      	lsls	r2, r2, #5
 8000418:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800041a:	003a      	movs	r2, r7
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_ADC_Init+0xc0>)
 800041e:	0011      	movs	r1, r2
 8000420:	0018      	movs	r0, r3
 8000422:	f000 fdb7 	bl	8000f94 <HAL_ADC_ConfigChannel>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800042a:	f000 f91d 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	200000d4 	.word	0x200000d4
 800043c:	40012400 	.word	0x40012400
 8000440:	04000002 	.word	0x04000002

08000444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000448:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <MX_I2C1_Init+0x78>)
 800044a:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <MX_I2C1_Init+0x7c>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 800044e:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <MX_I2C1_Init+0x78>)
 8000450:	22e1      	movs	r2, #225	; 0xe1
 8000452:	00d2      	lsls	r2, r2, #3
 8000454:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000456:	4b19      	ldr	r3, [pc, #100]	; (80004bc <MX_I2C1_Init+0x78>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045c:	4b17      	ldr	r3, [pc, #92]	; (80004bc <MX_I2C1_Init+0x78>)
 800045e:	2201      	movs	r2, #1
 8000460:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <MX_I2C1_Init+0x78>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <MX_I2C1_Init+0x78>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800046e:	4b13      	ldr	r3, [pc, #76]	; (80004bc <MX_I2C1_Init+0x78>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_I2C1_Init+0x78>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <MX_I2C1_Init+0x78>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000480:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_I2C1_Init+0x78>)
 8000482:	0018      	movs	r0, r3
 8000484:	f001 f884 	bl	8001590 <HAL_I2C_Init>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800048c:	f000 f8ec 	bl	8000668 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <MX_I2C1_Init+0x78>)
 8000492:	2100      	movs	r1, #0
 8000494:	0018      	movs	r0, r3
 8000496:	f001 f911 	bl	80016bc <HAL_I2CEx_ConfigAnalogFilter>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800049e:	f000 f8e3 	bl	8000668 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MX_I2C1_Init+0x78>)
 80004a4:	2100      	movs	r1, #0
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 f954 	bl	8001754 <HAL_I2CEx_ConfigDigitalFilter>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80004b0:	f000 f8da 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	20000030 	.word	0x20000030
 80004c0:	40005400 	.word	0x40005400

080004c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_SPI1_Init+0x68>)
 80004ca:	4a19      	ldr	r2, [pc, #100]	; (8000530 <MX_SPI1_Init+0x6c>)
 80004cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <MX_SPI1_Init+0x68>)
 80004d0:	2282      	movs	r2, #130	; 0x82
 80004d2:	0052      	lsls	r2, r2, #1
 80004d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_SPI1_Init+0x68>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <MX_SPI1_Init+0x68>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_SPI1_Init+0x68>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <MX_SPI1_Init+0x68>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_SPI1_Init+0x68>)
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	0092      	lsls	r2, r2, #2
 80004f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <MX_SPI1_Init+0x68>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_SPI1_Init+0x68>)
 80004fe:	2200      	movs	r2, #0
 8000500:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <MX_SPI1_Init+0x68>)
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_SPI1_Init+0x68>)
 800050a:	2200      	movs	r2, #0
 800050c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <MX_SPI1_Init+0x68>)
 8000510:	2207      	movs	r2, #7
 8000512:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <MX_SPI1_Init+0x68>)
 8000516:	0018      	movs	r0, r3
 8000518:	f001 ffb8 	bl	800248c <HAL_SPI_Init>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000520:	f000 f8a2 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	2000007c 	.word	0x2000007c
 8000530:	40013000 	.word	0x40013000

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b089      	sub	sp, #36	; 0x24
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	240c      	movs	r4, #12
 800053c:	193b      	adds	r3, r7, r4
 800053e:	0018      	movs	r0, r3
 8000540:	2314      	movs	r3, #20
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f002 fd65 	bl	8003014 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	4b44      	ldr	r3, [pc, #272]	; (800065c <MX_GPIO_Init+0x128>)
 800054c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800054e:	4b43      	ldr	r3, [pc, #268]	; (800065c <MX_GPIO_Init+0x128>)
 8000550:	2104      	movs	r1, #4
 8000552:	430a      	orrs	r2, r1
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
 8000556:	4b41      	ldr	r3, [pc, #260]	; (800065c <MX_GPIO_Init+0x128>)
 8000558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055a:	2204      	movs	r2, #4
 800055c:	4013      	ands	r3, r2
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b3e      	ldr	r3, [pc, #248]	; (800065c <MX_GPIO_Init+0x128>)
 8000564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000566:	4b3d      	ldr	r3, [pc, #244]	; (800065c <MX_GPIO_Init+0x128>)
 8000568:	2101      	movs	r1, #1
 800056a:	430a      	orrs	r2, r1
 800056c:	62da      	str	r2, [r3, #44]	; 0x2c
 800056e:	4b3b      	ldr	r3, [pc, #236]	; (800065c <MX_GPIO_Init+0x128>)
 8000570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000572:	2201      	movs	r2, #1
 8000574:	4013      	ands	r3, r2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b38      	ldr	r3, [pc, #224]	; (800065c <MX_GPIO_Init+0x128>)
 800057c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800057e:	4b37      	ldr	r3, [pc, #220]	; (800065c <MX_GPIO_Init+0x128>)
 8000580:	2102      	movs	r1, #2
 8000582:	430a      	orrs	r2, r1
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
 8000586:	4b35      	ldr	r3, [pc, #212]	; (800065c <MX_GPIO_Init+0x128>)
 8000588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058a:	2202      	movs	r2, #2
 800058c:	4013      	ands	r3, r2
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	021b      	lsls	r3, r3, #8
 8000596:	4832      	ldr	r0, [pc, #200]	; (8000660 <MX_GPIO_Init+0x12c>)
 8000598:	2200      	movs	r2, #0
 800059a:	0019      	movs	r1, r3
 800059c:	f000 ffc0 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80005a0:	4b30      	ldr	r3, [pc, #192]	; (8000664 <MX_GPIO_Init+0x130>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	2103      	movs	r1, #3
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 ffba 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_PWR_Pin|BAT_CHECK_Pin, GPIO_PIN_RESET);
 80005ac:	2381      	movs	r3, #129	; 0x81
 80005ae:	0219      	lsls	r1, r3, #8
 80005b0:	23a0      	movs	r3, #160	; 0xa0
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	2200      	movs	r2, #0
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 ffb2 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	0212      	lsls	r2, r2, #8
 80005c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2201      	movs	r2, #1
 80005c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <MX_GPIO_Init+0x12c>)
 80005da:	0019      	movs	r1, r3
 80005dc:	0010      	movs	r0, r2
 80005de:	f000 fe31 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2204      	movs	r2, #4
 80005e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005f4:	193a      	adds	r2, r7, r4
 80005f6:	23a0      	movs	r3, #160	; 0xa0
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fe21 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin;
 8000602:	0021      	movs	r1, r4
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2203      	movs	r2, #3
 8000608:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2201      	movs	r2, #1
 800060e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061c:	000c      	movs	r4, r1
 800061e:	187b      	adds	r3, r7, r1
 8000620:	4a10      	ldr	r2, [pc, #64]	; (8000664 <MX_GPIO_Init+0x130>)
 8000622:	0019      	movs	r1, r3
 8000624:	0010      	movs	r0, r2
 8000626:	f000 fe0d 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_PWR_Pin BAT_CHECK_Pin */
  GPIO_InitStruct.Pin = NRF_PWR_Pin|BAT_CHECK_Pin;
 800062a:	0021      	movs	r1, r4
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2281      	movs	r2, #129	; 0x81
 8000630:	0212      	lsls	r2, r2, #8
 8000632:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	187a      	adds	r2, r7, r1
 8000648:	23a0      	movs	r3, #160	; 0xa0
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fdf8 	bl	8001244 <HAL_GPIO_Init>

}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b009      	add	sp, #36	; 0x24
 800065a:	bd90      	pop	{r4, r7, pc}
 800065c:	40021000 	.word	0x40021000
 8000660:	50000800 	.word	0x50000800
 8000664:	50000400 	.word	0x50000400

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <nRF24_Init>:

// Peripheral libraries
#include "stm32l0xx_hal.h"

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	nrf24_hspi = hspi;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <nRF24_Init+0x40>)
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <nRF24_Init+0x44>)
 8000684:	2200      	movs	r2, #0
 8000686:	2102      	movs	r1, #2
 8000688:	0018      	movs	r0, r3
 800068a:	f000 ff49 	bl	8001520 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <nRF24_Init+0x44>)
 8000690:	2201      	movs	r2, #1
 8000692:	2101      	movs	r1, #1
 8000694:	0018      	movs	r0, r3
 8000696:	f000 ff43 	bl	8001520 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF_PWR_GPIO_Port, NRF_PWR_Pin, GPIO_PIN_RESET);
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	0059      	lsls	r1, r3, #1
 800069e:	23a0      	movs	r3, #160	; 0xa0
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	2200      	movs	r2, #0
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 ff3b 	bl	8001520 <HAL_GPIO_WritePin>
}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	50000400 	.word	0x50000400

080006bc <nRF24_SendByte>:

uint8_t nRF24_SendByte(uint8_t value)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b087      	sub	sp, #28
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	0002      	movs	r2, r0
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	701a      	strb	r2, [r3, #0]
	uint8_t recv;

	nRF24_CSN_LOW;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <nRF24_SendByte+0x48>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 ff26 	bl	8001520 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(nrf24_hspi, &value, &recv, 1, HAL_MAX_DELAY);
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <nRF24_SendByte+0x4c>)
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	240f      	movs	r4, #15
 80006da:	193a      	adds	r2, r7, r4
 80006dc:	1df9      	adds	r1, r7, #7
 80006de:	2301      	movs	r3, #1
 80006e0:	425b      	negs	r3, r3
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2301      	movs	r3, #1
 80006e6:	f002 f99d 	bl	8002a24 <HAL_SPI_TransmitReceive>
	nRF24_CSN_HIGH;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <nRF24_SendByte+0x48>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	2101      	movs	r1, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 ff15 	bl	8001520 <HAL_GPIO_WritePin>

	return recv;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	781b      	ldrb	r3, [r3, #0]
}
 80006fa:	0018      	movs	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b005      	add	sp, #20
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	50000400 	.word	0x50000400
 8000708:	2000002c 	.word	0x2000002c

0800070c <nRF24_WriteRegister>:

void nRF24_WriteRegister(uint8_t reg, uint8_t value)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	0002      	movs	r2, r0
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	1dbb      	adds	r3, r7, #6
 800071a:	1c0a      	adds	r2, r1, #0
 800071c:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	data = nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP);
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	221f      	movs	r2, #31
 8000726:	4013      	ands	r3, r2
 8000728:	b25b      	sxtb	r3, r3
 800072a:	2220      	movs	r2, #32
 800072c:	4313      	orrs	r3, r2
 800072e:	b25b      	sxtb	r3, r3
 8000730:	b2da      	uxtb	r2, r3
 8000732:	240f      	movs	r4, #15
 8000734:	193b      	adds	r3, r7, r4
 8000736:	701a      	strb	r2, [r3, #0]

	nRF24_CSN_LOW;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <nRF24_WriteRegister+0x6c>)
 800073a:	2200      	movs	r2, #0
 800073c:	2101      	movs	r1, #1
 800073e:	0018      	movs	r0, r3
 8000740:	f000 feee 	bl	8001520 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nrf24_hspi, &data, 1, HAL_MAX_DELAY);
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <nRF24_WriteRegister+0x70>)
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	2301      	movs	r3, #1
 800074a:	425b      	negs	r3, r3
 800074c:	1939      	adds	r1, r7, r4
 800074e:	2201      	movs	r2, #1
 8000750:	f001 fefb 	bl	800254a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf24_hspi, &value, 1, HAL_MAX_DELAY);
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <nRF24_WriteRegister+0x70>)
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	425b      	negs	r3, r3
 800075c:	1db9      	adds	r1, r7, #6
 800075e:	2201      	movs	r2, #1
 8000760:	f001 fef3 	bl	800254a <HAL_SPI_Transmit>
	nRF24_CSN_HIGH;
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <nRF24_WriteRegister+0x6c>)
 8000766:	2201      	movs	r2, #1
 8000768:	2101      	movs	r1, #1
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fed8 	bl	8001520 <HAL_GPIO_WritePin>
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b005      	add	sp, #20
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	50000400 	.word	0x50000400
 800077c:	2000002c 	.word	0x2000002c

08000780 <nRF24_ReadRegister>:
		HAL_SPI_Transmit(nrf24_hspi, &value[i], 1, HAL_MAX_DELAY);
	nRF24_CSN_HIGH;
}

uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	701a      	strb	r2, [r3, #0]
	uint8_t data, recv;

	data = nRF24_CMD_R_REGISTER | (reg & nRF24_MASK_REG_MAP);
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	221f      	movs	r2, #31
 8000792:	4013      	ands	r3, r2
 8000794:	b2da      	uxtb	r2, r3
 8000796:	240f      	movs	r4, #15
 8000798:	193b      	adds	r3, r7, r4
 800079a:	701a      	strb	r2, [r3, #0]

	nRF24_CSN_LOW;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <nRF24_ReadRegister+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	2101      	movs	r1, #1
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 febc 	bl	8001520 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nrf24_hspi, &data, 1, HAL_MAX_DELAY);
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <nRF24_ReadRegister+0x68>)
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	425b      	negs	r3, r3
 80007b0:	1939      	adds	r1, r7, r4
 80007b2:	2201      	movs	r2, #1
 80007b4:	f001 fec9 	bl	800254a <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf24_hspi, &recv, 1, HAL_MAX_DELAY);
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <nRF24_ReadRegister+0x68>)
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	425b      	negs	r3, r3
 80007c0:	240e      	movs	r4, #14
 80007c2:	1939      	adds	r1, r7, r4
 80007c4:	2201      	movs	r2, #1
 80007c6:	f002 f80f 	bl	80027e8 <HAL_SPI_Receive>
	nRF24_CSN_HIGH;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <nRF24_ReadRegister+0x64>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	2101      	movs	r1, #1
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fea5 	bl	8001520 <HAL_GPIO_WritePin>

	return recv;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	781b      	ldrb	r3, [r3, #0]
}
 80007da:	0018      	movs	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	b005      	add	sp, #20
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	50000400 	.word	0x50000400
 80007e8:	2000002c 	.word	0x2000002c

080007ec <nRF24_ReadMBRegister>:

void nRF24_ReadMBRegister(uint8_t reg, uint8_t *recv, uint8_t len)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	6039      	str	r1, [r7, #0]
 80007f4:	0011      	movs	r1, r2
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	1c02      	adds	r2, r0, #0
 80007fa:	701a      	strb	r2, [r3, #0]
 80007fc:	1dbb      	adds	r3, r7, #6
 80007fe:	1c0a      	adds	r2, r1, #0
 8000800:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t i;

	data = nRF24_CMD_R_REGISTER | (reg & nRF24_MASK_REG_MAP);
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	221f      	movs	r2, #31
 8000808:	4013      	ands	r3, r2
 800080a:	b2da      	uxtb	r2, r3
 800080c:	240e      	movs	r4, #14
 800080e:	193b      	adds	r3, r7, r4
 8000810:	701a      	strb	r2, [r3, #0]

	nRF24_CSN_LOW;
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <nRF24_ReadMBRegister+0x9c>)
 8000814:	2200      	movs	r2, #0
 8000816:	2101      	movs	r1, #1
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fe81 	bl	8001520 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nrf24_hspi, &data, 1, HAL_MAX_DELAY);
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <nRF24_ReadMBRegister+0xa0>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2301      	movs	r3, #1
 8000824:	425b      	negs	r3, r3
 8000826:	1939      	adds	r1, r7, r4
 8000828:	2201      	movs	r2, #1
 800082a:	f001 fe8e 	bl	800254a <HAL_SPI_Transmit>
	data = nRF24_CMD_NOP;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	22ff      	movs	r2, #255	; 0xff
 8000832:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < len; i++)
 8000834:	230f      	movs	r3, #15
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	e013      	b.n	8000866 <nRF24_ReadMBRegister+0x7a>
		HAL_SPI_TransmitReceive(nrf24_hspi, &data, &recv[i], 1, HAL_MAX_DELAY);
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <nRF24_ReadMBRegister+0xa0>)
 8000840:	6818      	ldr	r0, [r3, #0]
 8000842:	240f      	movs	r4, #15
 8000844:	193b      	adds	r3, r7, r4
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	18d2      	adds	r2, r2, r3
 800084c:	230e      	movs	r3, #14
 800084e:	18f9      	adds	r1, r7, r3
 8000850:	2301      	movs	r3, #1
 8000852:	425b      	negs	r3, r3
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	f002 f8e4 	bl	8002a24 <HAL_SPI_TransmitReceive>
	for(i = 0; i < len; i++)
 800085c:	193b      	adds	r3, r7, r4
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	193b      	adds	r3, r7, r4
 8000862:	3201      	adds	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	230f      	movs	r3, #15
 8000868:	18fa      	adds	r2, r7, r3
 800086a:	1dbb      	adds	r3, r7, #6
 800086c:	7812      	ldrb	r2, [r2, #0]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	429a      	cmp	r2, r3
 8000872:	d3e4      	bcc.n	800083e <nRF24_ReadMBRegister+0x52>
	nRF24_CSN_HIGH;
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <nRF24_ReadMBRegister+0x9c>)
 8000876:	2201      	movs	r2, #1
 8000878:	2101      	movs	r1, #1
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fe50 	bl	8001520 <HAL_GPIO_WritePin>
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b005      	add	sp, #20
 8000886:	bd90      	pop	{r4, r7, pc}
 8000888:	50000400 	.word	0x50000400
 800088c:	2000002c 	.word	0x2000002c

08000890 <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	status_reg = nRF24_SendByte(nRF24_CMD_NOP);
 8000894:	20ff      	movs	r0, #255	; 0xff
 8000896:	f7ff ff11 	bl	80006bc <nRF24_SendByte>
 800089a:	0003      	movs	r3, r0
 800089c:	001a      	movs	r2, r3
 800089e:	4b03      	ldr	r3, [pc, #12]	; (80008ac <nRF24_GetStatus+0x1c>)
 80008a0:	701a      	strb	r2, [r3, #0]
	return status_reg;
 80008a2:	4b02      	ldr	r3, [pc, #8]	; (80008ac <nRF24_GetStatus+0x1c>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
}
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000028 	.word	0x20000028

080008b0 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	0002      	movs	r2, r0
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(nRF24_REG_RF_CH, channel);
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	0019      	movs	r1, r3
 80008c2:	2005      	movs	r0, #5
 80008c4:	f7ff ff22 	bl	800070c <nRF24_WriteRegister>
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_MspInit+0x24>)
 80008d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x24>)
 80008da:	2101      	movs	r1, #1
 80008dc:	430a      	orrs	r2, r1
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <HAL_MspInit+0x24>)
 80008e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <HAL_MspInit+0x24>)
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0549      	lsls	r1, r1, #21
 80008ea:	430a      	orrs	r2, r1
 80008ec:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	230c      	movs	r3, #12
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f002 fb82 	bl	8003014 <memset>
  if(hadc->Instance==ADC1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a15      	ldr	r2, [pc, #84]	; (800096c <HAL_ADC_MspInit+0x74>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d123      	bne.n	8000962 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_ADC_MspInit+0x78>)
 800091c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_ADC_MspInit+0x78>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0089      	lsls	r1, r1, #2
 8000924:	430a      	orrs	r2, r1
 8000926:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_ADC_MspInit+0x78>)
 800092a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_ADC_MspInit+0x78>)
 800092e:	2101      	movs	r1, #1
 8000930:	430a      	orrs	r2, r1
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_ADC_MspInit+0x78>)
 8000936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000938:	2201      	movs	r2, #1
 800093a:	4013      	ands	r3, r2
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 8000940:	210c      	movs	r1, #12
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2202      	movs	r2, #2
 8000946:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2203      	movs	r2, #3
 800094c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8000954:	187a      	adds	r2, r7, r1
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	0011      	movs	r1, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f000 fc71 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b008      	add	sp, #32
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	40012400 	.word	0x40012400
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	230c      	movs	r3, #12
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	0018      	movs	r0, r3
 8000982:	2314      	movs	r3, #20
 8000984:	001a      	movs	r2, r3
 8000986:	2100      	movs	r1, #0
 8000988:	f002 fb44 	bl	8003014 <memset>
  if(hi2c->Instance==I2C1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <HAL_I2C_MspInit+0x80>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12a      	bne.n	80009ec <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_I2C_MspInit+0x84>)
 8000998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_I2C_MspInit+0x84>)
 800099c:	2101      	movs	r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_I2C_MspInit+0x84>)
 80009a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a6:	2201      	movs	r2, #1
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ae:	210c      	movs	r1, #12
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	22c0      	movs	r2, #192	; 0xc0
 80009b4:	00d2      	lsls	r2, r2, #3
 80009b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2212      	movs	r2, #18
 80009bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2201      	movs	r2, #1
 80009c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2203      	movs	r2, #3
 80009c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2201      	movs	r2, #1
 80009ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	187a      	adds	r2, r7, r1
 80009d2:	23a0      	movs	r3, #160	; 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 fc33 	bl	8001244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_I2C_MspInit+0x84>)
 80009e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_I2C_MspInit+0x84>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	0389      	lsls	r1, r1, #14
 80009e8:	430a      	orrs	r2, r1
 80009ea:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b008      	add	sp, #32
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	230c      	movs	r3, #12
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	0018      	movs	r0, r3
 8000a0a:	2314      	movs	r3, #20
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	f002 fb00 	bl	8003014 <memset>
  if(hspi->Instance==SPI1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <HAL_SPI_MspInit+0x80>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d129      	bne.n	8000a72 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_SPI_MspInit+0x84>)
 8000a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_SPI_MspInit+0x84>)
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	0149      	lsls	r1, r1, #5
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_SPI_MspInit+0x84>)
 8000a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <HAL_SPI_MspInit+0x84>)
 8000a32:	2101      	movs	r1, #1
 8000a34:	430a      	orrs	r2, r1
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_SPI_MspInit+0x84>)
 8000a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4013      	ands	r3, r2
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a44:	210c      	movs	r1, #12
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	22e0      	movs	r2, #224	; 0xe0
 8000a4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2202      	movs	r2, #2
 8000a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	187a      	adds	r2, r7, r1
 8000a66:	23a0      	movs	r3, #160	; 0xa0
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 fbe9 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b008      	add	sp, #32
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	40013000 	.word	0x40013000
 8000a80:	40021000 	.word	0x40021000

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aac:	f000 f8c0 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <SystemInit+0x64>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <SystemInit+0x64>)
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	0049      	lsls	r1, r1, #1
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <SystemInit+0x64>)
 8000acc:	68da      	ldr	r2, [r3, #12]
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <SystemInit+0x64>)
 8000ad0:	4913      	ldr	r1, [pc, #76]	; (8000b20 <SystemInit+0x68>)
 8000ad2:	400a      	ands	r2, r1
 8000ad4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <SystemInit+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <SystemInit+0x64>)
 8000adc:	4911      	ldr	r1, [pc, #68]	; (8000b24 <SystemInit+0x6c>)
 8000ade:	400a      	ands	r2, r1
 8000ae0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <SystemInit+0x64>)
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <SystemInit+0x64>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	438a      	bics	r2, r1
 8000aec:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <SystemInit+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <SystemInit+0x64>)
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <SystemInit+0x70>)
 8000af6:	400a      	ands	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <SystemInit+0x64>)
 8000afc:	68da      	ldr	r2, [r3, #12]
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <SystemInit+0x64>)
 8000b00:	490a      	ldr	r1, [pc, #40]	; (8000b2c <SystemInit+0x74>)
 8000b02:	400a      	ands	r2, r1
 8000b04:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SystemInit+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <SystemInit+0x78>)
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	0512      	lsls	r2, r2, #20
 8000b12:	609a      	str	r2, [r3, #8]
#endif
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	88ff400c 	.word	0x88ff400c
 8000b24:	fef6fff6 	.word	0xfef6fff6
 8000b28:	fffbffff 	.word	0xfffbffff
 8000b2c:	ff02ffff 	.word	0xff02ffff
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000b38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b3a:	e003      	b.n	8000b44 <LoopCopyDataInit>

08000b3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000b3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b42:	3104      	adds	r1, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000b48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b4c:	d3f6      	bcc.n	8000b3c <CopyDataInit>
  ldr  r2, =_sbss
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <LoopForever+0x12>)
  b  LoopFillZerobss
 8000b50:	e002      	b.n	8000b58 <LoopFillZerobss>

08000b52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000b52:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b54:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b56:	3204      	adds	r2, #4

08000b58 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <LoopForever+0x16>)
  cmp  r2, r3
 8000b5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b5c:	d3f9      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b5e:	f7ff ffab 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f002 fa33 	bl	8002fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fb5b 	bl	8000220 <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
   ldr   r0, =_estack
 8000b6c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000b70:	08003060 	.word	0x08003060
  ldr  r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b78:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b7c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b80:	20000134 	.word	0x20000134

08000b84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_COMP_IRQHandler>
	...

08000b88 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_Init+0x3c>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_Init+0x3c>)
 8000b9a:	2140      	movs	r1, #64	; 0x40
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 f811 	bl	8000bc8 <HAL_InitTick>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	e001      	b.n	8000bb6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb2:	f7ff fe8d 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
}
 8000bba:	0018      	movs	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_InitTick+0x5c>)
 8000bd2:	681c      	ldr	r4, [r3, #0]
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_InitTick+0x60>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	0019      	movs	r1, r3
 8000bda:	23fa      	movs	r3, #250	; 0xfa
 8000bdc:	0098      	lsls	r0, r3, #2
 8000bde:	f7ff fa93 	bl	8000108 <__udivsi3>
 8000be2:	0003      	movs	r3, r0
 8000be4:	0019      	movs	r1, r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	f7ff fa8e 	bl	8000108 <__udivsi3>
 8000bec:	0003      	movs	r3, r0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 fb1b 	bl	800122a <HAL_SYSTICK_Config>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e00f      	b.n	8000c1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d80b      	bhi.n	8000c1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2301      	movs	r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 faf8 	bl	8001200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_InitTick+0x64>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b003      	add	sp, #12
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_IncTick+0x1c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	001a      	movs	r2, r3
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x20>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	18d2      	adds	r2, r2, r3
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_IncTick+0x20>)
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000130 	.word	0x20000130

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <HAL_GetTick+0x10>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	20000130 	.word	0x20000130

08000c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c70:	f7ff fff0 	bl	8000c54 <HAL_GetTick>
 8000c74:	0003      	movs	r3, r0
 8000c76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	d005      	beq.n	8000c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_Delay+0x40>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	001a      	movs	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	189b      	adds	r3, r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	f7ff ffe0 	bl	8000c54 <HAL_GetTick>
 8000c94:	0002      	movs	r2, r0
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d8f7      	bhi.n	8000c90 <HAL_Delay+0x28>
  {
  }
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b004      	add	sp, #16
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e159      	b.n	8000f72 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10a      	bne.n	8000cdc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2250      	movs	r2, #80	; 0x50
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff fe0e 	bl	80008f8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce0:	2210      	movs	r2, #16
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	d005      	beq.n	8000cf4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2204      	movs	r2, #4
 8000cf0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000cf2:	d00b      	beq.n	8000d0c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cf8:	2210      	movs	r2, #16
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2250      	movs	r2, #80	; 0x50
 8000d04:	2100      	movs	r1, #0
 8000d06:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e132      	b.n	8000f72 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d10:	4a9a      	ldr	r2, [pc, #616]	; (8000f7c <HAL_ADC_Init+0x2d0>)
 8000d12:	4013      	ands	r3, r2
 8000d14:	2202      	movs	r2, #2
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	2203      	movs	r2, #3
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d108      	bne.n	8000d3c <HAL_ADC_Init+0x90>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2201      	movs	r2, #1
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d101      	bne.n	8000d3c <HAL_ADC_Init+0x90>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <HAL_ADC_Init+0x92>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d149      	bne.n	8000dd6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	23c0      	movs	r3, #192	; 0xc0
 8000d48:	061b      	lsls	r3, r3, #24
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d00b      	beq.n	8000d66 <HAL_ADC_Init+0xba>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	05db      	lsls	r3, r3, #23
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d005      	beq.n	8000d66 <HAL_ADC_Init+0xba>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	061b      	lsls	r3, r3, #24
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d111      	bne.n	8000d8a <HAL_ADC_Init+0xde>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	691a      	ldr	r2, [r3, #16]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	0892      	lsrs	r2, r2, #2
 8000d74:	611a      	str	r2, [r3, #16]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6919      	ldr	r1, [r3, #16]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	e014      	b.n	8000db4 <HAL_ADC_Init+0x108>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	0092      	lsls	r2, r2, #2
 8000d96:	0892      	lsrs	r2, r2, #2
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	4b79      	ldr	r3, [pc, #484]	; (8000f80 <HAL_ADC_Init+0x2d4>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b78      	ldr	r3, [pc, #480]	; (8000f80 <HAL_ADC_Init+0x2d4>)
 8000da0:	4978      	ldr	r1, [pc, #480]	; (8000f84 <HAL_ADC_Init+0x2d8>)
 8000da2:	400a      	ands	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	4b76      	ldr	r3, [pc, #472]	; (8000f80 <HAL_ADC_Init+0x2d4>)
 8000da8:	6819      	ldr	r1, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	4b74      	ldr	r3, [pc, #464]	; (8000f80 <HAL_ADC_Init+0x2d4>)
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2118      	movs	r1, #24
 8000dc0:	438a      	bics	r2, r1
 8000dc2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68d9      	ldr	r1, [r3, #12]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000dd6:	4b6a      	ldr	r3, [pc, #424]	; (8000f80 <HAL_ADC_Init+0x2d4>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b69      	ldr	r3, [pc, #420]	; (8000f80 <HAL_ADC_Init+0x2d4>)
 8000ddc:	496a      	ldr	r1, [pc, #424]	; (8000f88 <HAL_ADC_Init+0x2dc>)
 8000dde:	400a      	ands	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000de2:	4b67      	ldr	r3, [pc, #412]	; (8000f80 <HAL_ADC_Init+0x2d4>)
 8000de4:	6819      	ldr	r1, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dea:	065a      	lsls	r2, r3, #25
 8000dec:	4b64      	ldr	r3, [pc, #400]	; (8000f80 <HAL_ADC_Init+0x2d4>)
 8000dee:	430a      	orrs	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	055b      	lsls	r3, r3, #21
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d108      	bne.n	8000e12 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	0549      	lsls	r1, r1, #21
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	495b      	ldr	r1, [pc, #364]	; (8000f8c <HAL_ADC_Init+0x2e0>)
 8000e1e:	400a      	ands	r2, r1
 8000e20:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68d9      	ldr	r1, [r3, #12]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d101      	bne.n	8000e38 <HAL_ADC_Init+0x18c>
 8000e34:	2304      	movs	r3, #4
 8000e36:	e000      	b.n	8000e3a <HAL_ADC_Init+0x18e>
 8000e38:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e3a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2020      	movs	r0, #32
 8000e40:	5c1b      	ldrb	r3, [r3, r0]
 8000e42:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e44:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	202c      	movs	r0, #44	; 0x2c
 8000e4a:	5c1b      	ldrb	r3, [r3, r0]
 8000e4c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e4e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e54:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000e5c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e64:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e72:	23c2      	movs	r3, #194	; 0xc2
 8000e74:	33ff      	adds	r3, #255	; 0xff
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d00b      	beq.n	8000e92 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68d9      	ldr	r1, [r3, #12]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2221      	movs	r2, #33	; 0x21
 8000e96:	5c9b      	ldrb	r3, [r3, r2]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d11a      	bne.n	8000ed2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2220      	movs	r2, #32
 8000ea0:	5c9b      	ldrb	r3, [r3, r2]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d109      	bne.n	8000eba <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0249      	lsls	r1, r1, #9
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	e00b      	b.n	8000ed2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	2201      	movs	r2, #1
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d11f      	bne.n	8000f1a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	492a      	ldr	r1, [pc, #168]	; (8000f90 <HAL_ADC_Init+0x2e4>)
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6919      	ldr	r1, [r3, #16]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000ef8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000efe:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2101      	movs	r1, #1
 8000f14:	430a      	orrs	r2, r1
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	e00e      	b.n	8000f38 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d107      	bne.n	8000f38 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	691a      	ldr	r2, [r3, #16]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2101      	movs	r1, #1
 8000f34:	438a      	bics	r2, r1
 8000f36:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2107      	movs	r1, #7
 8000f44:	438a      	bics	r2, r1
 8000f46:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6959      	ldr	r1, [r3, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f64:	2203      	movs	r2, #3
 8000f66:	4393      	bics	r3, r2
 8000f68:	2201      	movs	r2, #1
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	fffffefd 	.word	0xfffffefd
 8000f80:	40012708 	.word	0x40012708
 8000f84:	ffc3ffff 	.word	0xffc3ffff
 8000f88:	fdffffff 	.word	0xfdffffff
 8000f8c:	fffe0219 	.word	0xfffe0219
 8000f90:	fffffc03 	.word	0xfffffc03

08000f94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2250      	movs	r2, #80	; 0x50
 8000fa2:	5c9b      	ldrb	r3, [r3, r2]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x18>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e06c      	b.n	8001086 <HAL_ADC_ConfigChannel+0xf2>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2250      	movs	r2, #80	; 0x50
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2204      	movs	r2, #4
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d00b      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2250      	movs	r2, #80	; 0x50
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e056      	b.n	8001086 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4a2c      	ldr	r2, [pc, #176]	; (8001090 <HAL_ADC_ConfigChannel+0xfc>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d028      	beq.n	8001034 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	035b      	lsls	r3, r3, #13
 8000fee:	0b5a      	lsrs	r2, r3, #13
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	02db      	lsls	r3, r3, #11
 8001000:	4013      	ands	r3, r2
 8001002:	d009      	beq.n	8001018 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001004:	4b23      	ldr	r3, [pc, #140]	; (8001094 <HAL_ADC_ConfigChannel+0x100>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <HAL_ADC_ConfigChannel+0x100>)
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	0409      	lsls	r1, r1, #16
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001012:	200a      	movs	r0, #10
 8001014:	f000 f844 	bl	80010a0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	029b      	lsls	r3, r3, #10
 8001020:	4013      	ands	r3, r2
 8001022:	d02b      	beq.n	800107c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_ADC_ConfigChannel+0x100>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_ADC_ConfigChannel+0x100>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	03c9      	lsls	r1, r1, #15
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e023      	b.n	800107c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	035b      	lsls	r3, r3, #13
 8001040:	0b5b      	lsrs	r3, r3, #13
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	400a      	ands	r2, r1
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	02db      	lsls	r3, r3, #11
 8001054:	4013      	ands	r3, r2
 8001056:	d005      	beq.n	8001064 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_ADC_ConfigChannel+0x100>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_ADC_ConfigChannel+0x100>)
 800105e:	490e      	ldr	r1, [pc, #56]	; (8001098 <HAL_ADC_ConfigChannel+0x104>)
 8001060:	400a      	ands	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	029b      	lsls	r3, r3, #10
 800106c:	4013      	ands	r3, r2
 800106e:	d005      	beq.n	800107c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_ADC_ConfigChannel+0x100>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_ADC_ConfigChannel+0x100>)
 8001076:	4909      	ldr	r1, [pc, #36]	; (800109c <HAL_ADC_ConfigChannel+0x108>)
 8001078:	400a      	ands	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2250      	movs	r2, #80	; 0x50
 8001080:	2100      	movs	r1, #0
 8001082:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	00001001 	.word	0x00001001
 8001094:	40012708 	.word	0x40012708
 8001098:	ff7fffff 	.word	0xff7fffff
 800109c:	ffbfffff 	.word	0xffbfffff

080010a0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <ADC_DelayMicroSecond+0x34>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	490a      	ldr	r1, [pc, #40]	; (80010d8 <ADC_DelayMicroSecond+0x38>)
 80010ae:	0018      	movs	r0, r3
 80010b0:	f7ff f82a 	bl	8000108 <__udivsi3>
 80010b4:	0003      	movs	r3, r0
 80010b6:	001a      	movs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4353      	muls	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80010be:	e002      	b.n	80010c6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1f9      	bne.n	80010c0 <ADC_DelayMicroSecond+0x20>
  } 
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b004      	add	sp, #16
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	000f4240 	.word	0x000f4240

080010dc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	0002      	movs	r2, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b7f      	cmp	r3, #127	; 0x7f
 80010f0:	d932      	bls.n	8001158 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <NVIC_SetPriority+0xd4>)
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	0019      	movs	r1, r3
 80010fa:	230f      	movs	r3, #15
 80010fc:	400b      	ands	r3, r1
 80010fe:	3b08      	subs	r3, #8
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3306      	adds	r3, #6
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	18d3      	adds	r3, r2, r3
 8001108:	3304      	adds	r3, #4
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	1dfa      	adds	r2, r7, #7
 800110e:	7812      	ldrb	r2, [r2, #0]
 8001110:	0011      	movs	r1, r2
 8001112:	2203      	movs	r2, #3
 8001114:	400a      	ands	r2, r1
 8001116:	00d2      	lsls	r2, r2, #3
 8001118:	21ff      	movs	r1, #255	; 0xff
 800111a:	4091      	lsls	r1, r2
 800111c:	000a      	movs	r2, r1
 800111e:	43d2      	mvns	r2, r2
 8001120:	401a      	ands	r2, r3
 8001122:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	019b      	lsls	r3, r3, #6
 8001128:	22ff      	movs	r2, #255	; 0xff
 800112a:	401a      	ands	r2, r3
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	0018      	movs	r0, r3
 8001132:	2303      	movs	r3, #3
 8001134:	4003      	ands	r3, r0
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113a:	481d      	ldr	r0, [pc, #116]	; (80011b0 <NVIC_SetPriority+0xd4>)
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	001c      	movs	r4, r3
 8001142:	230f      	movs	r3, #15
 8001144:	4023      	ands	r3, r4
 8001146:	3b08      	subs	r3, #8
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	430a      	orrs	r2, r1
 800114c:	3306      	adds	r3, #6
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	18c3      	adds	r3, r0, r3
 8001152:	3304      	adds	r3, #4
 8001154:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001156:	e027      	b.n	80011a8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001158:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <NVIC_SetPriority+0xd8>)
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b25b      	sxtb	r3, r3
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	33c0      	adds	r3, #192	; 0xc0
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	589b      	ldr	r3, [r3, r2]
 8001168:	1dfa      	adds	r2, r7, #7
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	0011      	movs	r1, r2
 800116e:	2203      	movs	r2, #3
 8001170:	400a      	ands	r2, r1
 8001172:	00d2      	lsls	r2, r2, #3
 8001174:	21ff      	movs	r1, #255	; 0xff
 8001176:	4091      	lsls	r1, r2
 8001178:	000a      	movs	r2, r1
 800117a:	43d2      	mvns	r2, r2
 800117c:	401a      	ands	r2, r3
 800117e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	019b      	lsls	r3, r3, #6
 8001184:	22ff      	movs	r2, #255	; 0xff
 8001186:	401a      	ands	r2, r3
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	0018      	movs	r0, r3
 800118e:	2303      	movs	r3, #3
 8001190:	4003      	ands	r3, r0
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001196:	4807      	ldr	r0, [pc, #28]	; (80011b4 <NVIC_SetPriority+0xd8>)
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b25b      	sxtb	r3, r3
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	430a      	orrs	r2, r1
 80011a2:	33c0      	adds	r3, #192	; 0xc0
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	501a      	str	r2, [r3, r0]
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b003      	add	sp, #12
 80011ae:	bd90      	pop	{r4, r7, pc}
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <SysTick_Config+0x40>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d901      	bls.n	80011ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2301      	movs	r3, #1
 80011cc:	e010      	b.n	80011f0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <SysTick_Config+0x44>)
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	3a01      	subs	r2, #1
 80011d4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d6:	2301      	movs	r3, #1
 80011d8:	425b      	negs	r3, r3
 80011da:	2103      	movs	r1, #3
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff ff7d 	bl	80010dc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <SysTick_Config+0x44>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SysTick_Config+0x44>)
 80011ea:	2207      	movs	r2, #7
 80011ec:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	00ffffff 	.word	0x00ffffff
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	210f      	movs	r1, #15
 800120c:	187b      	adds	r3, r7, r1
 800120e:	1c02      	adds	r2, r0, #0
 8001210:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	187b      	adds	r3, r7, r1
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b25b      	sxtb	r3, r3
 800121a:	0011      	movs	r1, r2
 800121c:	0018      	movs	r0, r3
 800121e:	f7ff ff5d 	bl	80010dc <NVIC_SetPriority>
}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b004      	add	sp, #16
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	0018      	movs	r0, r3
 8001236:	f7ff ffbf 	bl	80011b8 <SysTick_Config>
 800123a:	0003      	movs	r3, r0
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800125a:	e149      	b.n	80014f0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2101      	movs	r1, #1
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4091      	lsls	r1, r2
 8001266:	000a      	movs	r2, r1
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d100      	bne.n	8001274 <HAL_GPIO_Init+0x30>
 8001272:	e13a      	b.n	80014ea <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d00b      	beq.n	8001294 <HAL_GPIO_Init+0x50>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d007      	beq.n	8001294 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001288:	2b11      	cmp	r3, #17
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b12      	cmp	r3, #18
 8001292:	d130      	bne.n	80012f6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	409a      	lsls	r2, r3
 80012a2:	0013      	movs	r3, r2
 80012a4:	43da      	mvns	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	409a      	lsls	r2, r3
 80012b6:	0013      	movs	r3, r2
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ca:	2201      	movs	r2, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	2201      	movs	r2, #1
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	43da      	mvns	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0xf2>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b12      	cmp	r3, #18
 8001334:	d123      	bne.n	800137e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	58d3      	ldr	r3, [r2, r3]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2207      	movs	r2, #7
 8001348:	4013      	ands	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	43da      	mvns	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2107      	movs	r1, #7
 8001362:	400b      	ands	r3, r1
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	6939      	ldr	r1, [r7, #16]
 800137c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	43da      	mvns	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2203      	movs	r2, #3
 800139c:	401a      	ands	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	055b      	lsls	r3, r3, #21
 80013ba:	4013      	ands	r3, r2
 80013bc:	d100      	bne.n	80013c0 <HAL_GPIO_Init+0x17c>
 80013be:	e094      	b.n	80014ea <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c0:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_GPIO_Init+0x2c4>)
 80013c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <HAL_GPIO_Init+0x2c4>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	430a      	orrs	r2, r1
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80013cc:	4a4f      	ldr	r2, [pc, #316]	; (800150c <HAL_GPIO_Init+0x2c8>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	589b      	ldr	r3, [r3, r2]
 80013d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2203      	movs	r2, #3
 80013de:	4013      	ands	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	409a      	lsls	r2, r3
 80013e6:	0013      	movs	r3, r2
 80013e8:	43da      	mvns	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	23a0      	movs	r3, #160	; 0xa0
 80013f4:	05db      	lsls	r3, r3, #23
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0x1de>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a44      	ldr	r2, [pc, #272]	; (8001510 <HAL_GPIO_Init+0x2cc>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00d      	beq.n	800141e <HAL_GPIO_Init+0x1da>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a43      	ldr	r2, [pc, #268]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d007      	beq.n	800141a <HAL_GPIO_Init+0x1d6>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a42      	ldr	r2, [pc, #264]	; (8001518 <HAL_GPIO_Init+0x2d4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_GPIO_Init+0x1d2>
 8001412:	2305      	movs	r3, #5
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x1e0>
 8001416:	2306      	movs	r3, #6
 8001418:	e004      	b.n	8001424 <HAL_GPIO_Init+0x1e0>
 800141a:	2302      	movs	r3, #2
 800141c:	e002      	b.n	8001424 <HAL_GPIO_Init+0x1e0>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x1e0>
 8001422:	2300      	movs	r3, #0
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	2103      	movs	r1, #3
 8001428:	400a      	ands	r2, r1
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4093      	lsls	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001434:	4935      	ldr	r1, [pc, #212]	; (800150c <HAL_GPIO_Init+0x2c8>)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001442:	4b36      	ldr	r3, [pc, #216]	; (800151c <HAL_GPIO_Init+0x2d8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43da      	mvns	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	4013      	ands	r3, r2
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_GPIO_Init+0x2d8>)
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800146c:	4b2b      	ldr	r3, [pc, #172]	; (800151c <HAL_GPIO_Init+0x2d8>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	43da      	mvns	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	029b      	lsls	r3, r3, #10
 8001484:	4013      	ands	r3, r2
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_GPIO_Init+0x2d8>)
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_GPIO_Init+0x2d8>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	035b      	lsls	r3, r3, #13
 80014ae:	4013      	ands	r3, r2
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_GPIO_Init+0x2d8>)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_GPIO_Init+0x2d8>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43da      	mvns	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	039b      	lsls	r3, r3, #14
 80014d8:	4013      	ands	r3, r2
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_GPIO_Init+0x2d8>)
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	40da      	lsrs	r2, r3
 80014f8:	1e13      	subs	r3, r2, #0
 80014fa:	d000      	beq.n	80014fe <HAL_GPIO_Init+0x2ba>
 80014fc:	e6ae      	b.n	800125c <HAL_GPIO_Init+0x18>
  }
}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b006      	add	sp, #24
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000
 8001510:	50000400 	.word	0x50000400
 8001514:	50000800 	.word	0x50000800
 8001518:	50001c00 	.word	0x50001c00
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	0008      	movs	r0, r1
 800152a:	0011      	movs	r1, r2
 800152c:	1cbb      	adds	r3, r7, #2
 800152e:	1c02      	adds	r2, r0, #0
 8001530:	801a      	strh	r2, [r3, #0]
 8001532:	1c7b      	adds	r3, r7, #1
 8001534:	1c0a      	adds	r2, r1, #0
 8001536:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	1c7b      	adds	r3, r7, #1
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001540:	1cbb      	adds	r3, r7, #2
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800154a:	1cbb      	adds	r3, r7, #2
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	000a      	movs	r2, r1
 8001564:	1cbb      	adds	r3, r7, #2
 8001566:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800156e:	1cbb      	adds	r3, r7, #2
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4013      	ands	r3, r2
 8001576:	041a      	lsls	r2, r3, #16
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43db      	mvns	r3, r3
 800157c:	1cb9      	adds	r1, r7, #2
 800157e:	8809      	ldrh	r1, [r1, #0]
 8001580:	400b      	ands	r3, r1
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
}
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b004      	add	sp, #16
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e082      	b.n	80016a8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2241      	movs	r2, #65	; 0x41
 80015a6:	5c9b      	ldrb	r3, [r3, r2]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d107      	bne.n	80015be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	2100      	movs	r1, #0
 80015b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff f9db 	bl	8000974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2241      	movs	r2, #65	; 0x41
 80015c2:	2124      	movs	r1, #36	; 0x24
 80015c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2101      	movs	r1, #1
 80015d2:	438a      	bics	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4934      	ldr	r1, [pc, #208]	; (80016b0 <HAL_I2C_Init+0x120>)
 80015e0:	400a      	ands	r2, r1
 80015e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4931      	ldr	r1, [pc, #196]	; (80016b4 <HAL_I2C_Init+0x124>)
 80015f0:	400a      	ands	r2, r1
 80015f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d108      	bne.n	800160e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	0209      	lsls	r1, r1, #8
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	e007      	b.n	800161e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2184      	movs	r1, #132	; 0x84
 8001618:	0209      	lsls	r1, r1, #8
 800161a:	430a      	orrs	r2, r1
 800161c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d104      	bne.n	8001630 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	491f      	ldr	r1, [pc, #124]	; (80016b8 <HAL_I2C_Init+0x128>)
 800163c:	430a      	orrs	r2, r1
 800163e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	491a      	ldr	r1, [pc, #104]	; (80016b4 <HAL_I2C_Init+0x124>)
 800164c:	400a      	ands	r2, r1
 800164e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	431a      	orrs	r2, r3
 800165a:	0011      	movs	r1, r2
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	021a      	lsls	r2, r3, #8
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69d9      	ldr	r1, [r3, #28]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1a      	ldr	r2, [r3, #32]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2101      	movs	r1, #1
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2241      	movs	r2, #65	; 0x41
 8001694:	2120      	movs	r1, #32
 8001696:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2242      	movs	r2, #66	; 0x42
 80016a2:	2100      	movs	r1, #0
 80016a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	f0ffffff 	.word	0xf0ffffff
 80016b4:	ffff7fff 	.word	0xffff7fff
 80016b8:	02008000 	.word	0x02008000

080016bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2241      	movs	r2, #65	; 0x41
 80016ca:	5c9b      	ldrb	r3, [r3, r2]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d138      	bne.n	8001744 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2240      	movs	r2, #64	; 0x40
 80016d6:	5c9b      	ldrb	r3, [r3, r2]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016dc:	2302      	movs	r3, #2
 80016de:	e032      	b.n	8001746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2240      	movs	r2, #64	; 0x40
 80016e4:	2101      	movs	r1, #1
 80016e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2241      	movs	r2, #65	; 0x41
 80016ec:	2124      	movs	r1, #36	; 0x24
 80016ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2101      	movs	r1, #1
 80016fc:	438a      	bics	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4911      	ldr	r1, [pc, #68]	; (8001750 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2101      	movs	r1, #1
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2241      	movs	r2, #65	; 0x41
 8001734:	2120      	movs	r1, #32
 8001736:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2240      	movs	r2, #64	; 0x40
 800173c:	2100      	movs	r1, #0
 800173e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	e000      	b.n	8001746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001744:	2302      	movs	r3, #2
  }
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	b002      	add	sp, #8
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	ffffefff 	.word	0xffffefff

08001754 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2241      	movs	r2, #65	; 0x41
 8001762:	5c9b      	ldrb	r3, [r3, r2]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b20      	cmp	r3, #32
 8001768:	d139      	bne.n	80017de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2240      	movs	r2, #64	; 0x40
 800176e:	5c9b      	ldrb	r3, [r3, r2]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001774:	2302      	movs	r3, #2
 8001776:	e033      	b.n	80017e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2240      	movs	r2, #64	; 0x40
 800177c:	2101      	movs	r1, #1
 800177e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2241      	movs	r2, #65	; 0x41
 8001784:	2124      	movs	r1, #36	; 0x24
 8001786:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2101      	movs	r1, #1
 8001794:	438a      	bics	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2101      	movs	r1, #1
 80017c6:	430a      	orrs	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2241      	movs	r2, #65	; 0x41
 80017ce:	2120      	movs	r1, #32
 80017d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	2100      	movs	r1, #0
 80017d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017de:	2302      	movs	r3, #2
  }
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b004      	add	sp, #16
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	fffff0ff 	.word	0xfffff0ff

080017ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f000 fb6a 	bl	8001ed4 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001800:	4bc7      	ldr	r3, [pc, #796]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	220c      	movs	r2, #12
 8001806:	4013      	ands	r3, r2
 8001808:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800180a:	4bc5      	ldr	r3, [pc, #788]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2201      	movs	r2, #1
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCC_OscConfig+0x36>
 8001820:	e07d      	b.n	800191e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b08      	cmp	r3, #8
 8001826:	d007      	beq.n	8001838 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d112      	bne.n	8001854 <HAL_RCC_OscConfig+0x68>
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	429a      	cmp	r2, r3
 8001836:	d10d      	bne.n	8001854 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	4bb9      	ldr	r3, [pc, #740]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	4013      	ands	r3, r2
 8001842:	d100      	bne.n	8001846 <HAL_RCC_OscConfig+0x5a>
 8001844:	e06a      	b.n	800191c <HAL_RCC_OscConfig+0x130>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d166      	bne.n	800191c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	f000 fb40 	bl	8001ed4 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	025b      	lsls	r3, r3, #9
 800185c:	429a      	cmp	r2, r3
 800185e:	d107      	bne.n	8001870 <HAL_RCC_OscConfig+0x84>
 8001860:	4baf      	ldr	r3, [pc, #700]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4bae      	ldr	r3, [pc, #696]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	0249      	lsls	r1, r1, #9
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e027      	b.n	80018c0 <HAL_RCC_OscConfig+0xd4>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	23a0      	movs	r3, #160	; 0xa0
 8001876:	02db      	lsls	r3, r3, #11
 8001878:	429a      	cmp	r2, r3
 800187a:	d10e      	bne.n	800189a <HAL_RCC_OscConfig+0xae>
 800187c:	4ba8      	ldr	r3, [pc, #672]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4ba7      	ldr	r3, [pc, #668]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	02c9      	lsls	r1, r1, #11
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	4ba5      	ldr	r3, [pc, #660]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4ba4      	ldr	r3, [pc, #656]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	0249      	lsls	r1, r1, #9
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e012      	b.n	80018c0 <HAL_RCC_OscConfig+0xd4>
 800189a:	4ba1      	ldr	r3, [pc, #644]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4ba0      	ldr	r3, [pc, #640]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 80018a0:	49a0      	ldr	r1, [pc, #640]	; (8001b24 <HAL_RCC_OscConfig+0x338>)
 80018a2:	400a      	ands	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	4b9e      	ldr	r3, [pc, #632]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	025b      	lsls	r3, r3, #9
 80018ae:	4013      	ands	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4b9a      	ldr	r3, [pc, #616]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b99      	ldr	r3, [pc, #612]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 80018ba:	499b      	ldr	r1, [pc, #620]	; (8001b28 <HAL_RCC_OscConfig+0x33c>)
 80018bc:	400a      	ands	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d014      	beq.n	80018f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff f9c4 	bl	8000c54 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d2:	f7ff f9bf 	bl	8000c54 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b64      	cmp	r3, #100	; 0x64
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e2f7      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018e4:	4b8e      	ldr	r3, [pc, #568]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	029b      	lsls	r3, r3, #10
 80018ec:	4013      	ands	r3, r2
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0xe6>
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f9af 	bl	8000c54 <HAL_GetTick>
 80018f6:	0003      	movs	r3, r0
 80018f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff f9aa 	bl	8000c54 <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e2e2      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800190e:	4b84      	ldr	r3, [pc, #528]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	029b      	lsls	r3, r3, #10
 8001916:	4013      	ands	r3, r2
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x110>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d100      	bne.n	800192a <HAL_RCC_OscConfig+0x13e>
 8001928:	e098      	b.n	8001a5c <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	2220      	movs	r2, #32
 8001934:	4013      	ands	r3, r2
 8001936:	d009      	beq.n	800194c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001938:	4b79      	ldr	r3, [pc, #484]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 800193e:	2120      	movs	r1, #32
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	2220      	movs	r2, #32
 8001948:	4393      	bics	r3, r2
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b04      	cmp	r3, #4
 8001950:	d005      	beq.n	800195e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	2b0c      	cmp	r3, #12
 8001956:	d13d      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1e8>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d13a      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800195e:	4b70      	ldr	r3, [pc, #448]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2204      	movs	r2, #4
 8001964:	4013      	ands	r3, r2
 8001966:	d004      	beq.n	8001972 <HAL_RCC_OscConfig+0x186>
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e2b0      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a6d      	ldr	r2, [pc, #436]	; (8001b2c <HAL_RCC_OscConfig+0x340>)
 8001978:	4013      	ands	r3, r2
 800197a:	0019      	movs	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	021a      	lsls	r2, r3, #8
 8001982:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001984:	430a      	orrs	r2, r1
 8001986:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001988:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2209      	movs	r2, #9
 800198e:	4393      	bics	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800199a:	f000 fbcb 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 800199e:	0001      	movs	r1, r0
 80019a0:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	220f      	movs	r2, #15
 80019a8:	4013      	ands	r3, r2
 80019aa:	4a61      	ldr	r2, [pc, #388]	; (8001b30 <HAL_RCC_OscConfig+0x344>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	000a      	movs	r2, r1
 80019b0:	40da      	lsrs	r2, r3
 80019b2:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <HAL_RCC_OscConfig+0x348>)
 80019b4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80019b6:	2513      	movs	r5, #19
 80019b8:	197c      	adds	r4, r7, r5
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff f904 	bl	8000bc8 <HAL_InitTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80019c4:	197b      	adds	r3, r7, r5
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d047      	beq.n	8001a5c <HAL_RCC_OscConfig+0x270>
      {
        return status;
 80019cc:	2313      	movs	r3, #19
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	e27f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d027      	beq.n	8001a2a <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019da:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2209      	movs	r2, #9
 80019e0:	4393      	bics	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 80019e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff f932 	bl	8000c54 <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff f92d 	bl	8000c54 <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e265      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a08:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d0f1      	beq.n	80019f6 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a12:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4a45      	ldr	r2, [pc, #276]	; (8001b2c <HAL_RCC_OscConfig+0x340>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	021a      	lsls	r2, r3, #8
 8001a22:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	e018      	b.n	8001a5c <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001a30:	2101      	movs	r1, #1
 8001a32:	438a      	bics	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff f90d 	bl	8000c54 <HAL_GetTick>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff f908 	bl	8000c54 <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e240      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a52:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2204      	movs	r2, #4
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d1f1      	bne.n	8001a40 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2210      	movs	r2, #16
 8001a62:	4013      	ands	r3, r2
 8001a64:	d100      	bne.n	8001a68 <HAL_RCC_OscConfig+0x27c>
 8001a66:	e09e      	b.n	8001ba6 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d13f      	bne.n	8001aee <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4013      	ands	r3, r2
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x29a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e226      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a2b      	ldr	r2, [pc, #172]	; (8001b38 <HAL_RCC_OscConfig+0x34c>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	0a19      	lsrs	r1, r3, #8
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	061a      	lsls	r2, r3, #24
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	0b5b      	lsrs	r3, r3, #13
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	0212      	lsls	r2, r2, #8
 8001aba:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	491a      	ldr	r1, [pc, #104]	; (8001b30 <HAL_RCC_OscConfig+0x344>)
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_OscConfig+0x348>)
 8001ace:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001ad0:	2513      	movs	r5, #19
 8001ad2:	197c      	adds	r4, r7, r5
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff f877 	bl	8000bc8 <HAL_InitTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ade:	197b      	adds	r3, r7, r5
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d05f      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8001ae6:	2313      	movs	r3, #19
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	e1f2      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d03d      	beq.n	8001b72 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	0049      	lsls	r1, r1, #1
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff f8a6 	bl	8000c54 <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b0c:	e016      	b.n	8001b3c <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f8a1 	bl	8000c54 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d90f      	bls.n	8001b3c <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e1d9      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
 8001b20:	40021000 	.word	0x40021000
 8001b24:	fffeffff 	.word	0xfffeffff
 8001b28:	fffbffff 	.word	0xfffbffff
 8001b2c:	ffffe0ff 	.word	0xffffe0ff
 8001b30:	0800303c 	.word	0x0800303c
 8001b34:	20000000 	.word	0x20000000
 8001b38:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b3c:	4bca      	ldr	r3, [pc, #808]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d0e2      	beq.n	8001b0e <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b48:	4bc7      	ldr	r3, [pc, #796]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4ac7      	ldr	r2, [pc, #796]	; (8001e6c <HAL_RCC_OscConfig+0x680>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1a      	ldr	r2, [r3, #32]
 8001b56:	4bc4      	ldr	r3, [pc, #784]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5c:	4bc2      	ldr	r3, [pc, #776]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	0a19      	lsrs	r1, r3, #8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	061a      	lsls	r2, r3, #24
 8001b6a:	4bbf      	ldr	r3, [pc, #764]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	e019      	b.n	8001ba6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b72:	4bbd      	ldr	r3, [pc, #756]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4bbc      	ldr	r3, [pc, #752]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001b78:	49bd      	ldr	r1, [pc, #756]	; (8001e70 <HAL_RCC_OscConfig+0x684>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f869 	bl	8000c54 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b88:	f7ff f864 	bl	8000c54 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e19c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b9a:	4bb3      	ldr	r3, [pc, #716]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2208      	movs	r2, #8
 8001bac:	4013      	ands	r3, r2
 8001bae:	d036      	beq.n	8001c1e <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d019      	beq.n	8001bec <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb8:	4bab      	ldr	r3, [pc, #684]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bbc:	4baa      	ldr	r3, [pc, #680]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f846 	bl	8000c54 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff f841 	bl	8000c54 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e179      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001be0:	4ba1      	ldr	r3, [pc, #644]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d0f1      	beq.n	8001bce <HAL_RCC_OscConfig+0x3e2>
 8001bea:	e018      	b.n	8001c1e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bec:	4b9e      	ldr	r3, [pc, #632]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001bee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bf0:	4b9d      	ldr	r3, [pc, #628]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff f82c 	bl	8000c54 <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c02:	f7ff f827 	bl	8000c54 <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e15f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c14:	4b94      	ldr	r3, [pc, #592]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d1f1      	bne.n	8001c02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2204      	movs	r2, #4
 8001c24:	4013      	ands	r3, r2
 8001c26:	d100      	bne.n	8001c2a <HAL_RCC_OscConfig+0x43e>
 8001c28:	e0af      	b.n	8001d8a <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	2323      	movs	r3, #35	; 0x23
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b8d      	ldr	r3, [pc, #564]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	055b      	lsls	r3, r3, #21
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d10a      	bne.n	8001c54 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b8a      	ldr	r3, [pc, #552]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c42:	4b89      	ldr	r3, [pc, #548]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	0549      	lsls	r1, r1, #21
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c4c:	2323      	movs	r3, #35	; 0x23
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b87      	ldr	r3, [pc, #540]	; (8001e74 <HAL_RCC_OscConfig+0x688>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d11a      	bne.n	8001c96 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c60:	4b84      	ldr	r3, [pc, #528]	; (8001e74 <HAL_RCC_OscConfig+0x688>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b83      	ldr	r3, [pc, #524]	; (8001e74 <HAL_RCC_OscConfig+0x688>)
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	0049      	lsls	r1, r1, #1
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7fe fff1 	bl	8000c54 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c78:	f7fe ffec 	bl	8000c54 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e124      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8a:	4b7a      	ldr	r3, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x688>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x4c6>
 8001ca2:	4b71      	ldr	r3, [pc, #452]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca6:	4b70      	ldr	r3, [pc, #448]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0049      	lsls	r1, r1, #1
 8001cac:	430a      	orrs	r2, r1
 8001cae:	651a      	str	r2, [r3, #80]	; 0x50
 8001cb0:	e031      	b.n	8001d16 <HAL_RCC_OscConfig+0x52a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4e8>
 8001cba:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cbe:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001cc0:	496b      	ldr	r1, [pc, #428]	; (8001e70 <HAL_RCC_OscConfig+0x684>)
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	651a      	str	r2, [r3, #80]	; 0x50
 8001cc6:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cca:	4b67      	ldr	r3, [pc, #412]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001ccc:	496a      	ldr	r1, [pc, #424]	; (8001e78 <HAL_RCC_OscConfig+0x68c>)
 8001cce:	400a      	ands	r2, r1
 8001cd0:	651a      	str	r2, [r3, #80]	; 0x50
 8001cd2:	e020      	b.n	8001d16 <HAL_RCC_OscConfig+0x52a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	23a0      	movs	r3, #160	; 0xa0
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d10e      	bne.n	8001cfe <HAL_RCC_OscConfig+0x512>
 8001ce0:	4b61      	ldr	r3, [pc, #388]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001ce2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ce4:	4b60      	ldr	r3, [pc, #384]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	00c9      	lsls	r1, r1, #3
 8001cea:	430a      	orrs	r2, r1
 8001cec:	651a      	str	r2, [r3, #80]	; 0x50
 8001cee:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001cf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cf2:	4b5d      	ldr	r3, [pc, #372]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	0049      	lsls	r1, r1, #1
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	651a      	str	r2, [r3, #80]	; 0x50
 8001cfc:	e00b      	b.n	8001d16 <HAL_RCC_OscConfig+0x52a>
 8001cfe:	4b5a      	ldr	r3, [pc, #360]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d02:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001d04:	495a      	ldr	r1, [pc, #360]	; (8001e70 <HAL_RCC_OscConfig+0x684>)
 8001d06:	400a      	ands	r2, r1
 8001d08:	651a      	str	r2, [r3, #80]	; 0x50
 8001d0a:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d0e:	4b56      	ldr	r3, [pc, #344]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001d10:	4959      	ldr	r1, [pc, #356]	; (8001e78 <HAL_RCC_OscConfig+0x68c>)
 8001d12:	400a      	ands	r2, r1
 8001d14:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d015      	beq.n	8001d4a <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7fe ff99 	bl	8000c54 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d26:	e009      	b.n	8001d3c <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7fe ff94 	bl	8000c54 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	4a52      	ldr	r2, [pc, #328]	; (8001e7c <HAL_RCC_OscConfig+0x690>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e0cb      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d3c:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	d0ef      	beq.n	8001d28 <HAL_RCC_OscConfig+0x53c>
 8001d48:	e014      	b.n	8001d74 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7fe ff83 	bl	8000c54 <HAL_GetTick>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d52:	e009      	b.n	8001d68 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7fe ff7e 	bl	8000c54 <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x690>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0b5      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d68:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001d6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d1ef      	bne.n	8001d54 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d74:	2323      	movs	r3, #35	; 0x23
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001d84:	493e      	ldr	r1, [pc, #248]	; (8001e80 <HAL_RCC_OscConfig+0x694>)
 8001d86:	400a      	ands	r2, r1
 8001d88:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d100      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5a8>
 8001d92:	e09e      	b.n	8001ed2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d100      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5b0>
 8001d9a:	e077      	b.n	8001e8c <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d145      	bne.n	8001e30 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001daa:	4936      	ldr	r1, [pc, #216]	; (8001e84 <HAL_RCC_OscConfig+0x698>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7fe ff50 	bl	8000c54 <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dba:	f7fe ff4b 	bl	8000c54 <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e083      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dcc:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	049b      	lsls	r3, r3, #18
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a2a      	ldr	r2, [pc, #168]	; (8001e88 <HAL_RCC_OscConfig+0x69c>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	431a      	orrs	r2, r3
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001dfe:	2180      	movs	r1, #128	; 0x80
 8001e00:	0449      	lsls	r1, r1, #17
 8001e02:	430a      	orrs	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7fe ff25 	bl	8000c54 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe ff20 	bl	8000c54 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e058      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	049b      	lsls	r3, r3, #18
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x624>
 8001e2e:	e050      	b.n	8001ed2 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001e36:	4913      	ldr	r1, [pc, #76]	; (8001e84 <HAL_RCC_OscConfig+0x698>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe ff0a 	bl	8000c54 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e46:	f7fe ff05 	bl	8000c54 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e03d      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_RCC_OscConfig+0x67c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	049b      	lsls	r3, r3, #18
 8001e60:	4013      	ands	r3, r2
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x65a>
 8001e64:	e035      	b.n	8001ed2 <HAL_RCC_OscConfig+0x6e6>
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	ffff1fff 	.word	0xffff1fff
 8001e70:	fffffeff 	.word	0xfffffeff
 8001e74:	40007000 	.word	0x40007000
 8001e78:	fffffbff 	.word	0xfffffbff
 8001e7c:	00001388 	.word	0x00001388
 8001e80:	efffffff 	.word	0xefffffff
 8001e84:	feffffff 	.word	0xfeffffff
 8001e88:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_RCC_OscConfig+0x6f0>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	025b      	lsls	r3, r3, #9
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d10f      	bne.n	8001ece <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	23f0      	movs	r3, #240	; 0xf0
 8001eb2:	039b      	lsls	r3, r3, #14
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	23c0      	movs	r3, #192	; 0xc0
 8001ec2:	041b      	lsls	r3, r3, #16
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b00a      	add	sp, #40	; 0x28
 8001eda:	bdb0      	pop	{r4, r5, r7, pc}
 8001edc:	40021000 	.word	0x40021000

08001ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e10d      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b88      	ldr	r3, [pc, #544]	; (8002118 <HAL_RCC_ClockConfig+0x238>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4013      	ands	r3, r2
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d911      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b85      	ldr	r3, [pc, #532]	; (8002118 <HAL_RCC_ClockConfig+0x238>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4393      	bics	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	4b82      	ldr	r3, [pc, #520]	; (8002118 <HAL_RCC_ClockConfig+0x238>)
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f14:	4b80      	ldr	r3, [pc, #512]	; (8002118 <HAL_RCC_ClockConfig+0x238>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0f4      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f30:	4b7a      	ldr	r3, [pc, #488]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	22f0      	movs	r2, #240	; 0xf0
 8001f36:	4393      	bics	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	4b77      	ldr	r3, [pc, #476]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d100      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x70>
 8001f4e:	e089      	b.n	8002064 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f58:	4b70      	ldr	r3, [pc, #448]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	4013      	ands	r3, r2
 8001f62:	d120      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0d3      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f70:	4b6a      	ldr	r3, [pc, #424]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	049b      	lsls	r3, r3, #18
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d114      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0c7      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f88:	4b64      	ldr	r3, [pc, #400]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d109      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0bc      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f96:	4b61      	ldr	r3, [pc, #388]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0b4      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2203      	movs	r2, #3
 8001fac:	4393      	bics	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fba:	f7fe fe4b 	bl	8000c54 <HAL_GetTick>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d111      	bne.n	8001fee <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fca:	e009      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7fe fe42 	bl	8000c54 <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_RCC_ClockConfig+0x240>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e097      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe0:	4b4e      	ldr	r3, [pc, #312]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d1ef      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xec>
 8001fec:	e03a      	b.n	8002064 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d111      	bne.n	800201a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff6:	e009      	b.n	800200c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7fe fe2c 	bl	8000c54 <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	4a47      	ldr	r2, [pc, #284]	; (8002120 <HAL_RCC_ClockConfig+0x240>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e081      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800200c:	4b43      	ldr	r3, [pc, #268]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	220c      	movs	r2, #12
 8002012:	4013      	ands	r3, r2
 8002014:	2b0c      	cmp	r3, #12
 8002016:	d1ef      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x118>
 8002018:	e024      	b.n	8002064 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d11b      	bne.n	800205a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002022:	e009      	b.n	8002038 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7fe fe16 	bl	8000c54 <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <HAL_RCC_ClockConfig+0x240>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e06b      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002038:	4b38      	ldr	r3, [pc, #224]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	220c      	movs	r2, #12
 800203e:	4013      	ands	r3, r2
 8002040:	2b04      	cmp	r3, #4
 8002042:	d1ef      	bne.n	8002024 <HAL_RCC_ClockConfig+0x144>
 8002044:	e00e      	b.n	8002064 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002046:	f7fe fe05 	bl	8000c54 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	4a33      	ldr	r2, [pc, #204]	; (8002120 <HAL_RCC_ClockConfig+0x240>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e05a      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800205a:	4b30      	ldr	r3, [pc, #192]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	220c      	movs	r2, #12
 8002060:	4013      	ands	r3, r2
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCC_ClockConfig+0x238>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2201      	movs	r2, #1
 800206a:	4013      	ands	r3, r2
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d211      	bcs.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCC_ClockConfig+0x238>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	4393      	bics	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_RCC_ClockConfig+0x238>)
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_ClockConfig+0x238>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e03c      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2204      	movs	r2, #4
 800209c:	4013      	ands	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HAL_RCC_ClockConfig+0x244>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	0019      	movs	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 80020b0:	430a      	orrs	r2, r1
 80020b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2208      	movs	r2, #8
 80020ba:	4013      	ands	r3, r2
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4a19      	ldr	r2, [pc, #100]	; (8002128 <HAL_RCC_ClockConfig+0x248>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	00da      	lsls	r2, r3, #3
 80020ce:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 80020d0:	430a      	orrs	r2, r1
 80020d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020d4:	f000 f82e 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020d8:	0001      	movs	r1, r0
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_RCC_ClockConfig+0x23c>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	220f      	movs	r2, #15
 80020e2:	4013      	ands	r3, r2
 80020e4:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_RCC_ClockConfig+0x24c>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	000a      	movs	r2, r1
 80020ea:	40da      	lsrs	r2, r3
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <HAL_RCC_ClockConfig+0x250>)
 80020ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80020f0:	250b      	movs	r5, #11
 80020f2:	197c      	adds	r4, r7, r5
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7fe fd67 	bl	8000bc8 <HAL_InitTick>
 80020fa:	0003      	movs	r3, r0
 80020fc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80020fe:	197b      	adds	r3, r7, r5
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002106:	230b      	movs	r3, #11
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	e000      	b.n	8002110 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b004      	add	sp, #16
 8002116:	bdb0      	pop	{r4, r5, r7, pc}
 8002118:	40022000 	.word	0x40022000
 800211c:	40021000 	.word	0x40021000
 8002120:	00001388 	.word	0x00001388
 8002124:	fffff8ff 	.word	0xfffff8ff
 8002128:	ffffc7ff 	.word	0xffffc7ff
 800212c:	0800303c 	.word	0x0800303c
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCC_GetSysClockFreq+0xf4>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	220c      	movs	r2, #12
 8002144:	4013      	ands	r3, r2
 8002146:	2b08      	cmp	r3, #8
 8002148:	d00e      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x34>
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d00f      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x3a>
 800214e:	2b04      	cmp	r3, #4
 8002150:	d157      	bne.n	8002202 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002152:	4b35      	ldr	r3, [pc, #212]	; (8002228 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2210      	movs	r2, #16
 8002158:	4013      	ands	r3, r2
 800215a:	d002      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800215c:	4b33      	ldr	r3, [pc, #204]	; (800222c <HAL_RCC_GetSysClockFreq+0xf8>)
 800215e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002160:	e05d      	b.n	800221e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002164:	613b      	str	r3, [r7, #16]
      break;
 8002166:	e05a      	b.n	800221e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002168:	4b32      	ldr	r3, [pc, #200]	; (8002234 <HAL_RCC_GetSysClockFreq+0x100>)
 800216a:	613b      	str	r3, [r7, #16]
      break;
 800216c:	e057      	b.n	800221e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	0c9b      	lsrs	r3, r3, #18
 8002172:	220f      	movs	r2, #15
 8002174:	4013      	ands	r3, r2
 8002176:	4a30      	ldr	r2, [pc, #192]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	0d9b      	lsrs	r3, r3, #22
 8002180:	2203      	movs	r2, #3
 8002182:	4013      	ands	r3, r2
 8002184:	3301      	adds	r3, #1
 8002186:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_GetSysClockFreq+0xf4>)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	025b      	lsls	r3, r3, #9
 8002190:	4013      	ands	r3, r2
 8002192:	d00f      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	000a      	movs	r2, r1
 8002198:	0152      	lsls	r2, r2, #5
 800219a:	1a52      	subs	r2, r2, r1
 800219c:	0193      	lsls	r3, r2, #6
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	185b      	adds	r3, r3, r1
 80021a4:	025b      	lsls	r3, r3, #9
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7fd ffad 	bl	8000108 <__udivsi3>
 80021ae:	0003      	movs	r3, r0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e023      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_RCC_GetSysClockFreq+0xf4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2210      	movs	r2, #16
 80021ba:	4013      	ands	r3, r2
 80021bc:	d00f      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	000a      	movs	r2, r1
 80021c2:	0152      	lsls	r2, r2, #5
 80021c4:	1a52      	subs	r2, r2, r1
 80021c6:	0193      	lsls	r3, r2, #6
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	185b      	adds	r3, r3, r1
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7fd ff98 	bl	8000108 <__udivsi3>
 80021d8:	0003      	movs	r3, r0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e00e      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	000a      	movs	r2, r1
 80021e2:	0152      	lsls	r2, r2, #5
 80021e4:	1a52      	subs	r2, r2, r1
 80021e6:	0193      	lsls	r3, r2, #6
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	185b      	adds	r3, r3, r1
 80021ee:	029b      	lsls	r3, r3, #10
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7fd ff88 	bl	8000108 <__udivsi3>
 80021f8:	0003      	movs	r3, r0
 80021fa:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
      break;
 8002200:	e00d      	b.n	800221e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	0b5b      	lsrs	r3, r3, #13
 8002208:	2207      	movs	r2, #7
 800220a:	4013      	ands	r3, r2
 800220c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	0212      	lsls	r2, r2, #8
 8002216:	409a      	lsls	r2, r3
 8002218:	0013      	movs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
      break;
 800221c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800221e:	693b      	ldr	r3, [r7, #16]
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b006      	add	sp, #24
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	003d0900 	.word	0x003d0900
 8002230:	00f42400 	.word	0x00f42400
 8002234:	007a1200 	.word	0x007a1200
 8002238:	0800304c 	.word	0x0800304c

0800223c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2220      	movs	r2, #32
 800224a:	4013      	ands	r3, r2
 800224c:	d100      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x14>
 800224e:	e0c7      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002250:	2317      	movs	r3, #23
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002258:	4b82      	ldr	r3, [pc, #520]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800225a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	055b      	lsls	r3, r3, #21
 8002260:	4013      	ands	r3, r2
 8002262:	d10a      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b7f      	ldr	r3, [pc, #508]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002268:	4b7e      	ldr	r3, [pc, #504]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	0549      	lsls	r1, r1, #21
 800226e:	430a      	orrs	r2, r1
 8002270:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002272:	2317      	movs	r3, #23
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	4b7b      	ldr	r3, [pc, #492]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4013      	ands	r3, r2
 8002284:	d11a      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002286:	4b78      	ldr	r3, [pc, #480]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b77      	ldr	r3, [pc, #476]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0049      	lsls	r1, r1, #1
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002294:	f7fe fcde 	bl	8000c54 <HAL_GetTick>
 8002298:	0003      	movs	r3, r0
 800229a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	e008      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229e:	f7fe fcd9 	bl	8000c54 <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b64      	cmp	r3, #100	; 0x64
 80022aa:	d901      	bls.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0d4      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	4b6d      	ldr	r3, [pc, #436]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4013      	ands	r3, r2
 80022ba:	d0f0      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80022bc:	4b69      	ldr	r3, [pc, #420]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	23c0      	movs	r3, #192	; 0xc0
 80022c2:	039b      	lsls	r3, r3, #14
 80022c4:	4013      	ands	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	23c0      	movs	r3, #192	; 0xc0
 80022ce:	039b      	lsls	r3, r3, #14
 80022d0:	4013      	ands	r3, r2
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d013      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	23c0      	movs	r3, #192	; 0xc0
 80022de:	029b      	lsls	r3, r3, #10
 80022e0:	401a      	ands	r2, r3
 80022e2:	23c0      	movs	r3, #192	; 0xc0
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d10a      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80022ea:	4b5e      	ldr	r3, [pc, #376]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	029b      	lsls	r3, r3, #10
 80022f2:	401a      	ands	r2, r3
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	029b      	lsls	r3, r3, #10
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d101      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0ac      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002300:	4b58      	ldr	r3, [pc, #352]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002304:	23c0      	movs	r3, #192	; 0xc0
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	4013      	ands	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d03b      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	23c0      	movs	r3, #192	; 0xc0
 8002318:	029b      	lsls	r3, r3, #10
 800231a:	4013      	ands	r3, r2
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	429a      	cmp	r2, r3
 8002320:	d033      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2220      	movs	r2, #32
 8002328:	4013      	ands	r3, r2
 800232a:	d02e      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800232c:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800232e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002330:	4a4e      	ldr	r2, [pc, #312]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002332:	4013      	ands	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002336:	4b4b      	ldr	r3, [pc, #300]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800233a:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0309      	lsls	r1, r1, #12
 8002340:	430a      	orrs	r2, r1
 8002342:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002344:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002348:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800234a:	4949      	ldr	r1, [pc, #292]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800234c:	400a      	ands	r2, r1
 800234e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002350:	4b44      	ldr	r3, [pc, #272]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4013      	ands	r3, r2
 800235e:	d014      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe fc78 	bl	8000c54 <HAL_GetTick>
 8002364:	0003      	movs	r3, r0
 8002366:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002368:	e009      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fc73 	bl	8000c54 <HAL_GetTick>
 800236e:	0002      	movs	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	4a3f      	ldr	r2, [pc, #252]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e06d      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800237e:	4b39      	ldr	r3, [pc, #228]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002380:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4013      	ands	r3, r2
 8002388:	d0ef      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	23c0      	movs	r3, #192	; 0xc0
 8002390:	029b      	lsls	r3, r3, #10
 8002392:	401a      	ands	r2, r3
 8002394:	23c0      	movs	r3, #192	; 0xc0
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	429a      	cmp	r2, r3
 800239a:	d10c      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800239c:	4b31      	ldr	r3, [pc, #196]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a35      	ldr	r2, [pc, #212]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	23c0      	movs	r3, #192	; 0xc0
 80023ac:	039b      	lsls	r3, r3, #14
 80023ae:	401a      	ands	r2, r3
 80023b0:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	23c0      	movs	r3, #192	; 0xc0
 80023c0:	029b      	lsls	r3, r3, #10
 80023c2:	401a      	ands	r2, r3
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023ca:	2317      	movs	r3, #23
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d8:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023da:	4928      	ldr	r1, [pc, #160]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023dc:	400a      	ands	r2, r1
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2202      	movs	r2, #2
 80023e6:	4013      	ands	r3, r2
 80023e8:	d009      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	220c      	movs	r2, #12
 80023f0:	4393      	bics	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2204      	movs	r2, #4
 8002404:	4013      	ands	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800240a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240c:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002418:	430a      	orrs	r2, r1
 800241a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2208      	movs	r2, #8
 8002422:	4013      	ands	r3, r2
 8002424:	d009      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800242c:	4013      	ands	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002436:	430a      	orrs	r2, r1
 8002438:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	4013      	ands	r3, r2
 8002442:	d009      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800244a:	4013      	ands	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002454:	430a      	orrs	r2, r1
 8002456:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b006      	add	sp, #24
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	40021000 	.word	0x40021000
 8002468:	40007000 	.word	0x40007000
 800246c:	fffcffff 	.word	0xfffcffff
 8002470:	fff7ffff 	.word	0xfff7ffff
 8002474:	00001388 	.word	0x00001388
 8002478:	ffcfffff 	.word	0xffcfffff
 800247c:	efffffff 	.word	0xefffffff
 8002480:	fffff3ff 	.word	0xfffff3ff
 8002484:	ffffcfff 	.word	0xffffcfff
 8002488:	fff3ffff 	.word	0xfff3ffff

0800248c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e051      	b.n	8002542 <HAL_SPI_Init+0xb6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2251      	movs	r2, #81	; 0x51
 80024a8:	5c9b      	ldrb	r3, [r3, r2]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2250      	movs	r2, #80	; 0x50
 80024b4:	2100      	movs	r1, #0
 80024b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7fe fa9e 	bl	80009fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2251      	movs	r2, #81	; 0x51
 80024c4:	2102      	movs	r1, #2
 80024c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2140      	movs	r1, #64	; 0x40
 80024d4:	438a      	bics	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6999      	ldr	r1, [r3, #24]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	400b      	ands	r3, r1
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	431a      	orrs	r2, r3
 800250c:	0011      	movs	r1, r2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	2204      	movs	r2, #4
 8002522:	4013      	ands	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2251      	movs	r2, #81	; 0x51
 800253c:	2101      	movs	r1, #1
 800253e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b088      	sub	sp, #32
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	1dbb      	adds	r3, r7, #6
 8002558:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800255a:	231f      	movs	r3, #31
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2250      	movs	r2, #80	; 0x50
 8002566:	5c9b      	ldrb	r3, [r3, r2]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_SPI_Transmit+0x26>
 800256c:	2302      	movs	r3, #2
 800256e:	e136      	b.n	80027de <HAL_SPI_Transmit+0x294>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2250      	movs	r2, #80	; 0x50
 8002574:	2101      	movs	r1, #1
 8002576:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002578:	f7fe fb6c 	bl	8000c54 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002580:	2316      	movs	r3, #22
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	1dba      	adds	r2, r7, #6
 8002586:	8812      	ldrh	r2, [r2, #0]
 8002588:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2251      	movs	r2, #81	; 0x51
 800258e:	5c9b      	ldrb	r3, [r3, r2]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d004      	beq.n	80025a0 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002596:	231f      	movs	r3, #31
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	2202      	movs	r2, #2
 800259c:	701a      	strb	r2, [r3, #0]
    goto error;
 800259e:	e113      	b.n	80027c8 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_SPI_Transmit+0x64>
 80025a6:	1dbb      	adds	r3, r7, #6
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d104      	bne.n	80025b8 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80025ae:	231f      	movs	r3, #31
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
    goto error;
 80025b6:	e107      	b.n	80027c8 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2251      	movs	r2, #81	; 0x51
 80025bc:	2103      	movs	r1, #3
 80025be:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1dba      	adds	r2, r7, #6
 80025d0:	8812      	ldrh	r2, [r2, #0]
 80025d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1dba      	adds	r2, r7, #6
 80025d8:	8812      	ldrh	r2, [r2, #0]
 80025da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	429a      	cmp	r2, r3
 8002604:	d108      	bne.n	8002618 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	01c9      	lsls	r1, r1, #7
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2240      	movs	r2, #64	; 0x40
 8002620:	4013      	ands	r3, r2
 8002622:	2b40      	cmp	r3, #64	; 0x40
 8002624:	d007      	beq.n	8002636 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2140      	movs	r1, #64	; 0x40
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	429a      	cmp	r2, r3
 8002640:	d14e      	bne.n	80026e0 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <HAL_SPI_Transmit+0x10a>
 800264a:	2316      	movs	r3, #22
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d13f      	bne.n	80026d4 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	1c9a      	adds	r2, r3, #2
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002678:	e02c      	b.n	80026d4 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	2b02      	cmp	r3, #2
 8002686:	d112      	bne.n	80026ae <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	881a      	ldrh	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	1c9a      	adds	r2, r3, #2
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80026ac:	e012      	b.n	80026d4 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ae:	f7fe fad1 	bl	8000c54 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d802      	bhi.n	80026c4 <HAL_SPI_Transmit+0x17a>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	d102      	bne.n	80026ca <HAL_SPI_Transmit+0x180>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d104      	bne.n	80026d4 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 80026ca:	231f      	movs	r3, #31
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	2203      	movs	r2, #3
 80026d0:	701a      	strb	r2, [r3, #0]
          goto error;
 80026d2:	e079      	b.n	80027c8 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1cd      	bne.n	800267a <HAL_SPI_Transmit+0x130>
 80026de:	e04f      	b.n	8002780 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <HAL_SPI_Transmit+0x1a8>
 80026e8:	2316      	movs	r3, #22
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d141      	bne.n	8002776 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	7812      	ldrb	r2, [r2, #0]
 80026fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002718:	e02d      	b.n	8002776 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2202      	movs	r2, #2
 8002722:	4013      	ands	r3, r2
 8002724:	2b02      	cmp	r3, #2
 8002726:	d113      	bne.n	8002750 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	330c      	adds	r3, #12
 8002732:	7812      	ldrb	r2, [r2, #0]
 8002734:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	86da      	strh	r2, [r3, #54]	; 0x36
 800274e:	e012      	b.n	8002776 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002750:	f7fe fa80 	bl	8000c54 <HAL_GetTick>
 8002754:	0002      	movs	r2, r0
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d802      	bhi.n	8002766 <HAL_SPI_Transmit+0x21c>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	d102      	bne.n	800276c <HAL_SPI_Transmit+0x222>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800276c:	231f      	movs	r3, #31
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2203      	movs	r2, #3
 8002772:	701a      	strb	r2, [r3, #0]
          goto error;
 8002774:	e028      	b.n	80027c8 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1cc      	bne.n	800271a <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	0018      	movs	r0, r3
 8002788:	f000 fbe2 	bl	8002f50 <SPI_EndRxTxTransaction>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d002      	beq.n	8002796 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80027bc:	231f      	movs	r3, #31
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e000      	b.n	80027c8 <HAL_SPI_Transmit+0x27e>
  }

error:
 80027c6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2251      	movs	r2, #81	; 0x51
 80027cc:	2101      	movs	r1, #1
 80027ce:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2250      	movs	r2, #80	; 0x50
 80027d4:	2100      	movs	r1, #0
 80027d6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80027d8:	231f      	movs	r3, #31
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b008      	add	sp, #32
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	1dbb      	adds	r3, r7, #6
 80027f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027f8:	2317      	movs	r3, #23
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	2382      	movs	r3, #130	; 0x82
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	429a      	cmp	r2, r3
 800280a:	d113      	bne.n	8002834 <HAL_SPI_Receive+0x4c>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10f      	bne.n	8002834 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2251      	movs	r2, #81	; 0x51
 8002818:	2104      	movs	r1, #4
 800281a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800281c:	1dbb      	adds	r3, r7, #6
 800281e:	881c      	ldrh	r4, [r3, #0]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	0023      	movs	r3, r4
 800282c:	f000 f8fa 	bl	8002a24 <HAL_SPI_TransmitReceive>
 8002830:	0003      	movs	r3, r0
 8002832:	e0f1      	b.n	8002a18 <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2250      	movs	r2, #80	; 0x50
 8002838:	5c9b      	ldrb	r3, [r3, r2]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_SPI_Receive+0x5a>
 800283e:	2302      	movs	r3, #2
 8002840:	e0ea      	b.n	8002a18 <HAL_SPI_Receive+0x230>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2250      	movs	r2, #80	; 0x50
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800284a:	f7fe fa03 	bl	8000c54 <HAL_GetTick>
 800284e:	0003      	movs	r3, r0
 8002850:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2251      	movs	r2, #81	; 0x51
 8002856:	5c9b      	ldrb	r3, [r3, r2]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d004      	beq.n	8002868 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800285e:	2317      	movs	r3, #23
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	2202      	movs	r2, #2
 8002864:	701a      	strb	r2, [r3, #0]
    goto error;
 8002866:	e0cc      	b.n	8002a02 <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_SPI_Receive+0x8e>
 800286e:	1dbb      	adds	r3, r7, #6
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d104      	bne.n	8002880 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002876:	2317      	movs	r3, #23
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
    goto error;
 800287e:	e0c0      	b.n	8002a02 <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2251      	movs	r2, #81	; 0x51
 8002884:	2104      	movs	r1, #4
 8002886:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1dba      	adds	r2, r7, #6
 8002898:	8812      	ldrh	r2, [r2, #0]
 800289a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1dba      	adds	r2, r7, #6
 80028a0:	8812      	ldrh	r2, [r2, #0]
 80028a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d107      	bne.n	80028de <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4951      	ldr	r1, [pc, #324]	; (8002a20 <HAL_SPI_Receive+0x238>)
 80028da:	400a      	ands	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b40      	cmp	r3, #64	; 0x40
 80028ea:	d007      	beq.n	80028fc <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2140      	movs	r1, #64	; 0x40
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d164      	bne.n	80029ce <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002904:	e02f      	b.n	8002966 <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	2b01      	cmp	r3, #1
 8002912:	d115      	bne.n	8002940 <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	330c      	adds	r3, #12
 800291a:	001a      	movs	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800293e:	e012      	b.n	8002966 <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002940:	f7fe f988 	bl	8000c54 <HAL_GetTick>
 8002944:	0002      	movs	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d802      	bhi.n	8002956 <HAL_SPI_Receive+0x16e>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_SPI_Receive+0x174>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d104      	bne.n	8002966 <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 800295c:	2317      	movs	r3, #23
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2203      	movs	r2, #3
 8002962:	701a      	strb	r2, [r3, #0]
          goto error;
 8002964:	e04d      	b.n	8002a02 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ca      	bne.n	8002906 <HAL_SPI_Receive+0x11e>
 8002970:	e032      	b.n	80029d8 <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2201      	movs	r2, #1
 800297a:	4013      	ands	r3, r2
 800297c:	2b01      	cmp	r3, #1
 800297e:	d113      	bne.n	80029a8 <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	b292      	uxth	r2, r2
 800298c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	1c9a      	adds	r2, r3, #2
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029a6:	e012      	b.n	80029ce <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029a8:	f7fe f954 	bl	8000c54 <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d802      	bhi.n	80029be <HAL_SPI_Receive+0x1d6>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	3301      	adds	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_SPI_Receive+0x1dc>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d104      	bne.n	80029ce <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 80029c4:	2317      	movs	r3, #23
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2203      	movs	r2, #3
 80029ca:	701a      	strb	r2, [r3, #0]
          goto error;
 80029cc:	e019      	b.n	8002a02 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1cc      	bne.n	8002972 <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 fa4c 	bl	8002e7c <SPI_EndRxTransaction>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d002      	beq.n	80029ee <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 80029f6:	2317      	movs	r3, #23
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e000      	b.n	8002a02 <HAL_SPI_Receive+0x21a>
  }

error :
 8002a00:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2251      	movs	r2, #81	; 0x51
 8002a06:	2101      	movs	r1, #1
 8002a08:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2250      	movs	r2, #80	; 0x50
 8002a0e:	2100      	movs	r1, #0
 8002a10:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a12:	2317      	movs	r3, #23
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	781b      	ldrb	r3, [r3, #0]
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b007      	add	sp, #28
 8002a1e:	bd90      	pop	{r4, r7, pc}
 8002a20:	ffffbfff 	.word	0xffffbfff

08002a24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	; 0x30
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	001a      	movs	r2, r3
 8002a32:	1cbb      	adds	r3, r7, #2
 8002a34:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a36:	2301      	movs	r3, #1
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a3a:	232b      	movs	r3, #43	; 0x2b
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2250      	movs	r2, #80	; 0x50
 8002a46:	5c9b      	ldrb	r3, [r3, r2]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_SPI_TransmitReceive+0x2c>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e1a1      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x370>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2250      	movs	r2, #80	; 0x50
 8002a54:	2101      	movs	r1, #1
 8002a56:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a58:	f7fe f8fc 	bl	8000c54 <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a60:	2023      	movs	r0, #35	; 0x23
 8002a62:	183b      	adds	r3, r7, r0
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	2151      	movs	r1, #81	; 0x51
 8002a68:	5c52      	ldrb	r2, [r2, r1]
 8002a6a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a72:	231a      	movs	r3, #26
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	1cba      	adds	r2, r7, #2
 8002a78:	8812      	ldrh	r2, [r2, #0]
 8002a7a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a7c:	183b      	adds	r3, r7, r0
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d012      	beq.n	8002aaa <HAL_SPI_TransmitReceive+0x86>
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	2382      	movs	r3, #130	; 0x82
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d108      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d104      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0x7c>
 8002a96:	2323      	movs	r3, #35	; 0x23
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d004      	beq.n	8002aaa <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8002aa0:	232b      	movs	r3, #43	; 0x2b
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	701a      	strb	r2, [r3, #0]
    goto error;
 8002aa8:	e169      	b.n	8002d7e <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <HAL_SPI_TransmitReceive+0x9a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_SPI_TransmitReceive+0x9a>
 8002ab6:	1cbb      	adds	r3, r7, #2
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d104      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8002abe:	232b      	movs	r3, #43	; 0x2b
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ac6:	e15a      	b.n	8002d7e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2251      	movs	r2, #81	; 0x51
 8002acc:	5c9b      	ldrb	r3, [r3, r2]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d003      	beq.n	8002adc <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2251      	movs	r2, #81	; 0x51
 8002ad8:	2105      	movs	r1, #5
 8002ada:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1cba      	adds	r2, r7, #2
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1cba      	adds	r2, r7, #2
 8002af4:	8812      	ldrh	r2, [r2, #0]
 8002af6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1cba      	adds	r2, r7, #2
 8002b02:	8812      	ldrh	r2, [r2, #0]
 8002b04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1cba      	adds	r2, r7, #2
 8002b0a:	8812      	ldrh	r2, [r2, #0]
 8002b0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2240      	movs	r2, #64	; 0x40
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d007      	beq.n	8002b38 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2140      	movs	r1, #64	; 0x40
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d000      	beq.n	8002b46 <HAL_SPI_TransmitReceive+0x122>
 8002b44:	e07a      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <HAL_SPI_TransmitReceive+0x134>
 8002b4e:	231a      	movs	r3, #26
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d166      	bne.n	8002c26 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	881a      	ldrh	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	1c9a      	adds	r2, r3, #2
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b7c:	e053      	b.n	8002c26 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2202      	movs	r2, #2
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d11b      	bne.n	8002bc4 <HAL_SPI_TransmitReceive+0x1a0>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_SPI_TransmitReceive+0x1a0>
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d113      	bne.n	8002bc4 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	881a      	ldrh	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	1c9a      	adds	r2, r3, #2
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d119      	bne.n	8002c06 <HAL_SPI_TransmitReceive+0x1e2>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d014      	beq.n	8002c06 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	b292      	uxth	r2, r2
 8002be8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	1c9a      	adds	r2, r3, #2
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c02:	2301      	movs	r3, #1
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c06:	f7fe f825 	bl	8000c54 <HAL_GetTick>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d807      	bhi.n	8002c26 <HAL_SPI_TransmitReceive+0x202>
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	3301      	adds	r3, #1
 8002c1a:	d004      	beq.n	8002c26 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8002c1c:	232b      	movs	r3, #43	; 0x2b
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2203      	movs	r2, #3
 8002c22:	701a      	strb	r2, [r3, #0]
        goto error;
 8002c24:	e0ab      	b.n	8002d7e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1a6      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x15a>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1a1      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x15a>
 8002c3a:	e07f      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_SPI_TransmitReceive+0x22c>
 8002c44:	231a      	movs	r3, #26
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d000      	beq.n	8002c50 <HAL_SPI_TransmitReceive+0x22c>
 8002c4e:	e06b      	b.n	8002d28 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	7812      	ldrb	r2, [r2, #0]
 8002c5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c76:	e057      	b.n	8002d28 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d11c      	bne.n	8002cc0 <HAL_SPI_TransmitReceive+0x29c>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d017      	beq.n	8002cc0 <HAL_SPI_TransmitReceive+0x29c>
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d114      	bne.n	8002cc0 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	330c      	adds	r3, #12
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d119      	bne.n	8002d02 <HAL_SPI_TransmitReceive+0x2de>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d014      	beq.n	8002d02 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d02:	f7fd ffa7 	bl	8000c54 <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d802      	bhi.n	8002d18 <HAL_SPI_TransmitReceive+0x2f4>
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	3301      	adds	r3, #1
 8002d16:	d102      	bne.n	8002d1e <HAL_SPI_TransmitReceive+0x2fa>
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d104      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8002d1e:	232b      	movs	r3, #43	; 0x2b
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	2203      	movs	r2, #3
 8002d24:	701a      	strb	r2, [r3, #0]
        goto error;
 8002d26:	e02a      	b.n	8002d7e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1a2      	bne.n	8002c78 <HAL_SPI_TransmitReceive+0x254>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d19d      	bne.n	8002c78 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 f904 	bl	8002f50 <SPI_EndRxTxTransaction>
 8002d48:	1e03      	subs	r3, r0, #0
 8002d4a:	d007      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8002d4c:	232b      	movs	r3, #43	; 0x2b
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d5a:	e010      	b.n	8002d7e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	e000      	b.n	8002d7e <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8002d7c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2251      	movs	r2, #81	; 0x51
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2250      	movs	r2, #80	; 0x50
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002d8e:	232b      	movs	r3, #43	; 0x2b
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	781b      	ldrb	r3, [r3, #0]
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b00c      	add	sp, #48	; 0x30
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	1dfb      	adds	r3, r7, #7
 8002daa:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dac:	e050      	b.n	8002e50 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	d04d      	beq.n	8002e50 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002db4:	f7fd ff4e 	bl	8000c54 <HAL_GetTick>
 8002db8:	0002      	movs	r2, r0
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d902      	bls.n	8002dca <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d142      	bne.n	8002e50 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	21e0      	movs	r1, #224	; 0xe0
 8002dd6:	438a      	bics	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	2382      	movs	r3, #130	; 0x82
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d113      	bne.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0x72>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d005      	beq.n	8002dfe <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d107      	bne.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2140      	movs	r1, #64	; 0x40
 8002e0a:	438a      	bics	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	019b      	lsls	r3, r3, #6
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d110      	bne.n	8002e3c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4914      	ldr	r1, [pc, #80]	; (8002e78 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002e26:	400a      	ands	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	0189      	lsls	r1, r1, #6
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2251      	movs	r2, #81	; 0x51
 8002e40:	2101      	movs	r1, #1
 8002e42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2250      	movs	r2, #80	; 0x50
 8002e48:	2100      	movs	r1, #0
 8002e4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e00f      	b.n	8002e70 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	425a      	negs	r2, r3
 8002e60:	4153      	adcs	r3, r2
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	001a      	movs	r2, r3
 8002e66:	1dfb      	adds	r3, r7, #7
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d19f      	bne.n	8002dae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b004      	add	sp, #16
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	ffffdfff 	.word	0xffffdfff

08002e7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	2382      	movs	r3, #130	; 0x82
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d113      	bne.n	8002ebc <SPI_EndRxTransaction+0x40>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d005      	beq.n	8002eac <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d107      	bne.n	8002ebc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	438a      	bics	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	2382      	movs	r3, #130	; 0x82
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d12b      	bne.n	8002f20 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d012      	beq.n	8002efa <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	0013      	movs	r3, r2
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	f7ff ff5b 	bl	8002d9c <SPI_WaitFlagStateUntilTimeout>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d02d      	beq.n	8002f46 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	2220      	movs	r2, #32
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e026      	b.n	8002f48 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	0013      	movs	r3, r2
 8002f04:	2200      	movs	r2, #0
 8002f06:	2101      	movs	r1, #1
 8002f08:	f7ff ff48 	bl	8002d9c <SPI_WaitFlagStateUntilTimeout>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d01a      	beq.n	8002f46 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	2220      	movs	r2, #32
 8002f16:	431a      	orrs	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e013      	b.n	8002f48 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	0013      	movs	r3, r2
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	f7ff ff35 	bl	8002d9c <SPI_WaitFlagStateUntilTimeout>
 8002f32:	1e03      	subs	r3, r0, #0
 8002f34:	d007      	beq.n	8002f46 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e000      	b.n	8002f48 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	2382      	movs	r3, #130	; 0x82
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d112      	bne.n	8002f8e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	0013      	movs	r3, r2
 8002f72:	2200      	movs	r2, #0
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	f7ff ff11 	bl	8002d9c <SPI_WaitFlagStateUntilTimeout>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d020      	beq.n	8002fc0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	2220      	movs	r2, #32
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e019      	b.n	8002fc2 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2251      	movs	r2, #81	; 0x51
 8002f92:	5c9b      	ldrb	r3, [r3, r2]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d112      	bne.n	8002fc0 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	0013      	movs	r3, r2
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	f7ff fef8 	bl	8002d9c <SPI_WaitFlagStateUntilTimeout>
 8002fac:	1e03      	subs	r3, r0, #0
 8002fae:	d007      	beq.n	8002fc0 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e000      	b.n	8002fc2 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <__libc_init_array>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	2600      	movs	r6, #0
 8002fd0:	4d0c      	ldr	r5, [pc, #48]	; (8003004 <__libc_init_array+0x38>)
 8002fd2:	4c0d      	ldr	r4, [pc, #52]	; (8003008 <__libc_init_array+0x3c>)
 8002fd4:	1b64      	subs	r4, r4, r5
 8002fd6:	10a4      	asrs	r4, r4, #2
 8002fd8:	42a6      	cmp	r6, r4
 8002fda:	d109      	bne.n	8002ff0 <__libc_init_array+0x24>
 8002fdc:	2600      	movs	r6, #0
 8002fde:	f000 f821 	bl	8003024 <_init>
 8002fe2:	4d0a      	ldr	r5, [pc, #40]	; (800300c <__libc_init_array+0x40>)
 8002fe4:	4c0a      	ldr	r4, [pc, #40]	; (8003010 <__libc_init_array+0x44>)
 8002fe6:	1b64      	subs	r4, r4, r5
 8002fe8:	10a4      	asrs	r4, r4, #2
 8002fea:	42a6      	cmp	r6, r4
 8002fec:	d105      	bne.n	8002ffa <__libc_init_array+0x2e>
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	00b3      	lsls	r3, r6, #2
 8002ff2:	58eb      	ldr	r3, [r5, r3]
 8002ff4:	4798      	blx	r3
 8002ff6:	3601      	adds	r6, #1
 8002ff8:	e7ee      	b.n	8002fd8 <__libc_init_array+0xc>
 8002ffa:	00b3      	lsls	r3, r6, #2
 8002ffc:	58eb      	ldr	r3, [r5, r3]
 8002ffe:	4798      	blx	r3
 8003000:	3601      	adds	r6, #1
 8003002:	e7f2      	b.n	8002fea <__libc_init_array+0x1e>
 8003004:	08003058 	.word	0x08003058
 8003008:	08003058 	.word	0x08003058
 800300c:	08003058 	.word	0x08003058
 8003010:	0800305c 	.word	0x0800305c

08003014 <memset>:
 8003014:	0003      	movs	r3, r0
 8003016:	1812      	adds	r2, r2, r0
 8003018:	4293      	cmp	r3, r2
 800301a:	d100      	bne.n	800301e <memset+0xa>
 800301c:	4770      	bx	lr
 800301e:	7019      	strb	r1, [r3, #0]
 8003020:	3301      	adds	r3, #1
 8003022:	e7f9      	b.n	8003018 <memset+0x4>

08003024 <_init>:
 8003024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302a:	bc08      	pop	{r3}
 800302c:	469e      	mov	lr, r3
 800302e:	4770      	bx	lr

08003030 <_fini>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr
