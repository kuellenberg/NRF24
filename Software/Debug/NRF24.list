
NRF24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800218c  0800218c  0001218c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a8  080021a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080021a8  080021a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021a8  080021a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a8  080021a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021ac  080021ac  000121ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  080021bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080021bc  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b7c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015b3  00000000  00000000  00027bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f0  00000000  00000000  00029168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000728  00000000  00000000  00029958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001001d  00000000  00000000  0002a080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007539  00000000  00000000  0003a09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00061da3  00000000  00000000  000415d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a3379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b58  00000000  00000000  000a33f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002174 	.word	0x08002174

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002174 	.word	0x08002174

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 faf8 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f816 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f926 	bl	800047c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f8e4 	bl	80003fc <MX_I2C1_Init>
  MX_ADC_Init();
 8000234:	f000 f87c 	bl	8000330 <MX_ADC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000238:	2380      	movs	r3, #128	; 0x80
 800023a:	021b      	lsls	r3, r3, #8
 800023c:	4a05      	ldr	r2, [pc, #20]	; (8000254 <main+0x34>)
 800023e:	0019      	movs	r1, r3
 8000240:	0010      	movs	r0, r2
 8000242:	f000 ffd2 	bl	80011ea <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000246:	23fa      	movs	r3, #250	; 0xfa
 8000248:	005b      	lsls	r3, r3, #1
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fb54 	bl	80008f8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000250:	e7f2      	b.n	8000238 <main+0x18>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	50000800 	.word	0x50000800

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b099      	sub	sp, #100	; 0x64
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	242c      	movs	r4, #44	; 0x2c
 8000260:	193b      	adds	r3, r7, r4
 8000262:	0018      	movs	r0, r3
 8000264:	2334      	movs	r3, #52	; 0x34
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f001 ff7b 	bl	8002164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	2318      	movs	r3, #24
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	0018      	movs	r0, r3
 8000274:	2314      	movs	r3, #20
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f001 ff73 	bl	8002164 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027e:	003b      	movs	r3, r7
 8000280:	0018      	movs	r0, r3
 8000282:	2318      	movs	r3, #24
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f001 ff6c 	bl	8002164 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800028c:	4b26      	ldr	r3, [pc, #152]	; (8000328 <SystemClock_Config+0xd0>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a26      	ldr	r2, [pc, #152]	; (800032c <SystemClock_Config+0xd4>)
 8000292:	401a      	ands	r2, r3
 8000294:	4b24      	ldr	r3, [pc, #144]	; (8000328 <SystemClock_Config+0xd0>)
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	0109      	lsls	r1, r1, #4
 800029a:	430a      	orrs	r2, r1
 800029c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800029e:	0021      	movs	r1, r4
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2210      	movs	r2, #16
 80002a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2201      	movs	r2, #1
 80002aa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2200      	movs	r2, #0
 80002b0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	22a0      	movs	r2, #160	; 0xa0
 80002b6:	0212      	lsls	r2, r2, #8
 80002b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	0018      	movs	r0, r3
 80002c4:	f001 f8da 	bl	800147c <HAL_RCC_OscConfig>
 80002c8:	1e03      	subs	r3, r0, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002cc:	f000 f986 	bl	80005dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	2118      	movs	r1, #24
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	220f      	movs	r2, #15
 80002d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2100      	movs	r1, #0
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 fc3b 	bl	8001b70 <HAL_RCC_ClockConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002fe:	f000 f96d 	bl	80005dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000302:	003b      	movs	r3, r7
 8000304:	2208      	movs	r2, #8
 8000306:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000308:	003b      	movs	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030e:	003b      	movs	r3, r7
 8000310:	0018      	movs	r0, r3
 8000312:	f001 fddb 	bl	8001ecc <HAL_RCCEx_PeriphCLKConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800031a:	f000 f95f 	bl	80005dc <Error_Handler>
  }
}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	b019      	add	sp, #100	; 0x64
 8000324:	bd90      	pop	{r4, r7, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	40007000 	.word	0x40007000
 800032c:	ffffe7ff 	.word	0xffffe7ff

08000330 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000336:	003b      	movs	r3, r7
 8000338:	0018      	movs	r0, r3
 800033a:	2308      	movs	r3, #8
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f001 ff10 	bl	8002164 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000344:	4b2a      	ldr	r3, [pc, #168]	; (80003f0 <MX_ADC_Init+0xc0>)
 8000346:	4a2b      	ldr	r2, [pc, #172]	; (80003f4 <MX_ADC_Init+0xc4>)
 8000348:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800034a:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <MX_ADC_Init+0xc0>)
 800034c:	2200      	movs	r2, #0
 800034e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000350:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <MX_ADC_Init+0xc0>)
 8000352:	22c0      	movs	r2, #192	; 0xc0
 8000354:	0612      	lsls	r2, r2, #24
 8000356:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000358:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <MX_ADC_Init+0xc0>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800035e:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <MX_ADC_Init+0xc0>)
 8000360:	2200      	movs	r2, #0
 8000362:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000364:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <MX_ADC_Init+0xc0>)
 8000366:	2201      	movs	r2, #1
 8000368:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036a:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <MX_ADC_Init+0xc0>)
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <MX_ADC_Init+0xc0>)
 8000372:	2220      	movs	r2, #32
 8000374:	2100      	movs	r1, #0
 8000376:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000378:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <MX_ADC_Init+0xc0>)
 800037a:	2221      	movs	r2, #33	; 0x21
 800037c:	2100      	movs	r1, #0
 800037e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_ADC_Init+0xc0>)
 8000382:	2200      	movs	r2, #0
 8000384:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_ADC_Init+0xc0>)
 8000388:	22c2      	movs	r2, #194	; 0xc2
 800038a:	32ff      	adds	r2, #255	; 0xff
 800038c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_ADC_Init+0xc0>)
 8000390:	222c      	movs	r2, #44	; 0x2c
 8000392:	2100      	movs	r1, #0
 8000394:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000396:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <MX_ADC_Init+0xc0>)
 8000398:	2204      	movs	r2, #4
 800039a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800039c:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <MX_ADC_Init+0xc0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <MX_ADC_Init+0xc0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_ADC_Init+0xc0>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_ADC_Init+0xc0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_ADC_Init+0xc0>)
 80003b6:	0018      	movs	r0, r3
 80003b8:	f000 fac0 	bl	800093c <HAL_ADC_Init>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80003c0:	f000 f90c 	bl	80005dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003c4:	003b      	movs	r3, r7
 80003c6:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <MX_ADC_Init+0xc8>)
 80003c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003ca:	003b      	movs	r3, r7
 80003cc:	2280      	movs	r2, #128	; 0x80
 80003ce:	0152      	lsls	r2, r2, #5
 80003d0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003d2:	003a      	movs	r2, r7
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_ADC_Init+0xc0>)
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 fc23 	bl	8000c24 <HAL_ADC_ConfigChannel>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80003e2:	f000 f8fb 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b002      	add	sp, #8
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	20000074 	.word	0x20000074
 80003f4:	40012400 	.word	0x40012400
 80003f8:	04000002 	.word	0x04000002

080003fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000400:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <MX_I2C1_Init+0x78>)
 8000402:	4a1d      	ldr	r2, [pc, #116]	; (8000478 <MX_I2C1_Init+0x7c>)
 8000404:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000406:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <MX_I2C1_Init+0x78>)
 8000408:	22e1      	movs	r2, #225	; 0xe1
 800040a:	00d2      	lsls	r2, r2, #3
 800040c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800040e:	4b19      	ldr	r3, [pc, #100]	; (8000474 <MX_I2C1_Init+0x78>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_I2C1_Init+0x78>)
 8000416:	2201      	movs	r2, #1
 8000418:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_I2C1_Init+0x78>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_I2C1_Init+0x78>)
 8000422:	2200      	movs	r2, #0
 8000424:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <MX_I2C1_Init+0x78>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_I2C1_Init+0x78>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_I2C1_Init+0x78>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_I2C1_Init+0x78>)
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fef0 	bl	8001220 <HAL_I2C_Init>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d001      	beq.n	8000448 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000444:	f000 f8ca 	bl	80005dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <MX_I2C1_Init+0x78>)
 800044a:	2100      	movs	r1, #0
 800044c:	0018      	movs	r0, r3
 800044e:	f000 ff7d 	bl	800134c <HAL_I2CEx_ConfigAnalogFilter>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000456:	f000 f8c1 	bl	80005dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_I2C1_Init+0x78>)
 800045c:	2100      	movs	r1, #0
 800045e:	0018      	movs	r0, r3
 8000460:	f000 ffc0 	bl	80013e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d001      	beq.n	800046c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000468:	f000 f8b8 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	20000028 	.word	0x20000028
 8000478:	40005400 	.word	0x40005400

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	240c      	movs	r4, #12
 8000484:	193b      	adds	r3, r7, r4
 8000486:	0018      	movs	r0, r3
 8000488:	2314      	movs	r3, #20
 800048a:	001a      	movs	r2, r3
 800048c:	2100      	movs	r1, #0
 800048e:	f001 fe69 	bl	8002164 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000492:	4b4f      	ldr	r3, [pc, #316]	; (80005d0 <MX_GPIO_Init+0x154>)
 8000494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000496:	4b4e      	ldr	r3, [pc, #312]	; (80005d0 <MX_GPIO_Init+0x154>)
 8000498:	2104      	movs	r1, #4
 800049a:	430a      	orrs	r2, r1
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
 800049e:	4b4c      	ldr	r3, [pc, #304]	; (80005d0 <MX_GPIO_Init+0x154>)
 80004a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a2:	2204      	movs	r2, #4
 80004a4:	4013      	ands	r3, r2
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b49      	ldr	r3, [pc, #292]	; (80005d0 <MX_GPIO_Init+0x154>)
 80004ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ae:	4b48      	ldr	r3, [pc, #288]	; (80005d0 <MX_GPIO_Init+0x154>)
 80004b0:	2101      	movs	r1, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004b6:	4b46      	ldr	r3, [pc, #280]	; (80005d0 <MX_GPIO_Init+0x154>)
 80004b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b43      	ldr	r3, [pc, #268]	; (80005d0 <MX_GPIO_Init+0x154>)
 80004c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004c6:	4b42      	ldr	r3, [pc, #264]	; (80005d0 <MX_GPIO_Init+0x154>)
 80004c8:	2102      	movs	r1, #2
 80004ca:	430a      	orrs	r2, r1
 80004cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ce:	4b40      	ldr	r3, [pc, #256]	; (80005d0 <MX_GPIO_Init+0x154>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d2:	2202      	movs	r2, #2
 80004d4:	4013      	ands	r3, r2
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	021b      	lsls	r3, r3, #8
 80004de:	483d      	ldr	r0, [pc, #244]	; (80005d4 <MX_GPIO_Init+0x158>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	0019      	movs	r1, r3
 80004e4:	f000 fe64 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80004e8:	4b3b      	ldr	r3, [pc, #236]	; (80005d8 <MX_GPIO_Init+0x15c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	2103      	movs	r1, #3
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fe5e 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_PWR_Pin|BAT_CHECK_Pin, GPIO_PIN_RESET);
 80004f4:	2381      	movs	r3, #129	; 0x81
 80004f6:	0219      	lsls	r1, r3, #8
 80004f8:	23a0      	movs	r3, #160	; 0xa0
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2200      	movs	r2, #0
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fe56 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	0212      	lsls	r2, r2, #8
 800050a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2201      	movs	r2, #1
 8000510:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 800051e:	193b      	adds	r3, r7, r4
 8000520:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <MX_GPIO_Init+0x158>)
 8000522:	0019      	movs	r1, r3
 8000524:	0010      	movs	r0, r2
 8000526:	f000 fcd5 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2204      	movs	r2, #4
 800052e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2200      	movs	r2, #0
 8000534:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800053c:	193a      	adds	r2, r7, r4
 800053e:	23a0      	movs	r3, #160	; 0xa0
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fcc5 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	22e0      	movs	r2, #224	; 0xe0
 800054e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2202      	movs	r2, #2
 8000554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2203      	movs	r2, #3
 8000560:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	193a      	adds	r2, r7, r4
 800056a:	23a0      	movs	r3, #160	; 0xa0
 800056c:	05db      	lsls	r3, r3, #23
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f000 fcaf 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin;
 8000576:	0021      	movs	r1, r4
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2203      	movs	r2, #3
 800057c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2201      	movs	r2, #1
 8000582:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000590:	000c      	movs	r4, r1
 8000592:	187b      	adds	r3, r7, r1
 8000594:	4a10      	ldr	r2, [pc, #64]	; (80005d8 <MX_GPIO_Init+0x15c>)
 8000596:	0019      	movs	r1, r3
 8000598:	0010      	movs	r0, r2
 800059a:	f000 fc9b 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_PWR_Pin BAT_CHECK_Pin */
  GPIO_InitStruct.Pin = NRF_PWR_Pin|BAT_CHECK_Pin;
 800059e:	0021      	movs	r1, r4
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2281      	movs	r2, #129	; 0x81
 80005a4:	0212      	lsls	r2, r2, #8
 80005a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2201      	movs	r2, #1
 80005ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	187a      	adds	r2, r7, r1
 80005bc:	23a0      	movs	r3, #160	; 0xa0
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	0011      	movs	r1, r2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fc86 	bl	8000ed4 <HAL_GPIO_Init>

}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b009      	add	sp, #36	; 0x24
 80005ce:	bd90      	pop	{r4, r7, pc}
 80005d0:	40021000 	.word	0x40021000
 80005d4:	50000800 	.word	0x50000800
 80005d8:	50000400 	.word	0x50000400

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <HAL_MspInit+0x24>)
 80005ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_MspInit+0x24>)
 80005f2:	2101      	movs	r1, #1
 80005f4:	430a      	orrs	r2, r1
 80005f6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <HAL_MspInit+0x24>)
 80005fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <HAL_MspInit+0x24>)
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	0549      	lsls	r1, r1, #21
 8000602:	430a      	orrs	r2, r1
 8000604:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	230c      	movs	r3, #12
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	0018      	movs	r0, r3
 800061e:	2314      	movs	r3, #20
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f001 fd9e 	bl	8002164 <memset>
  if(hadc->Instance==ADC1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a15      	ldr	r2, [pc, #84]	; (8000684 <HAL_ADC_MspInit+0x74>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d123      	bne.n	800067a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_ADC_MspInit+0x78>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_ADC_MspInit+0x78>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0089      	lsls	r1, r1, #2
 800063c:	430a      	orrs	r2, r1
 800063e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <HAL_ADC_MspInit+0x78>)
 8000642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <HAL_ADC_MspInit+0x78>)
 8000646:	2101      	movs	r1, #1
 8000648:	430a      	orrs	r2, r1
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_ADC_MspInit+0x78>)
 800064e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000650:	2201      	movs	r2, #1
 8000652:	4013      	ands	r3, r2
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 8000658:	210c      	movs	r1, #12
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2202      	movs	r2, #2
 800065e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2203      	movs	r2, #3
 8000664:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 800066c:	187a      	adds	r2, r7, r1
 800066e:	23a0      	movs	r3, #160	; 0xa0
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fc2d 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b008      	add	sp, #32
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40012400 	.word	0x40012400
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	230c      	movs	r3, #12
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	0018      	movs	r0, r3
 800069a:	2314      	movs	r3, #20
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f001 fd60 	bl	8002164 <memset>
  if(hi2c->Instance==I2C1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a18      	ldr	r2, [pc, #96]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d12a      	bne.n	8000704 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <HAL_I2C_MspInit+0x84>)
 80006b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <HAL_I2C_MspInit+0x84>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_I2C_MspInit+0x84>)
 80006bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006be:	2201      	movs	r2, #1
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006c6:	210c      	movs	r1, #12
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	22c0      	movs	r2, #192	; 0xc0
 80006cc:	00d2      	lsls	r2, r2, #3
 80006ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2212      	movs	r2, #18
 80006d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2203      	movs	r2, #3
 80006e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2201      	movs	r2, #1
 80006e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	187a      	adds	r2, r7, r1
 80006ea:	23a0      	movs	r3, #160	; 0xa0
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	0011      	movs	r1, r2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 fbef 	bl	8000ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_I2C_MspInit+0x84>)
 80006f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_I2C_MspInit+0x84>)
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	0389      	lsls	r1, r1, #14
 8000700:	430a      	orrs	r2, r1
 8000702:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b008      	add	sp, #32
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40005400 	.word	0x40005400
 8000710:	40021000 	.word	0x40021000

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f000 f8c0 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <SystemInit+0x64>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <SystemInit+0x64>)
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	0049      	lsls	r1, r1, #1
 8000756:	430a      	orrs	r2, r1
 8000758:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <SystemInit+0x64>)
 800075c:	68da      	ldr	r2, [r3, #12]
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x64>)
 8000760:	4913      	ldr	r1, [pc, #76]	; (80007b0 <SystemInit+0x68>)
 8000762:	400a      	ands	r2, r1
 8000764:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <SystemInit+0x64>)
 800076c:	4911      	ldr	r1, [pc, #68]	; (80007b4 <SystemInit+0x6c>)
 800076e:	400a      	ands	r2, r1
 8000770:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <SystemInit+0x64>)
 8000774:	689a      	ldr	r2, [r3, #8]
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <SystemInit+0x64>)
 8000778:	2101      	movs	r1, #1
 800077a:	438a      	bics	r2, r1
 800077c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <SystemInit+0x64>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <SystemInit+0x64>)
 8000784:	490c      	ldr	r1, [pc, #48]	; (80007b8 <SystemInit+0x70>)
 8000786:	400a      	ands	r2, r1
 8000788:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <SystemInit+0x64>)
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <SystemInit+0x64>)
 8000790:	490a      	ldr	r1, [pc, #40]	; (80007bc <SystemInit+0x74>)
 8000792:	400a      	ands	r2, r1
 8000794:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <SystemInit+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <SystemInit+0x78>)
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	0512      	lsls	r2, r2, #20
 80007a2:	609a      	str	r2, [r3, #8]
#endif
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40021000 	.word	0x40021000
 80007b0:	88ff400c 	.word	0x88ff400c
 80007b4:	fef6fff6 	.word	0xfef6fff6
 80007b8:	fffbffff 	.word	0xfffbffff
 80007bc:	ff02ffff 	.word	0xff02ffff
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80007c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80007c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007ca:	e003      	b.n	80007d4 <LoopCopyDataInit>

080007cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80007ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007d2:	3104      	adds	r1, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <LoopForever+0xa>)
  ldr  r3, =_edata
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <LoopForever+0xe>)
  adds  r2, r0, r1
 80007d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007dc:	d3f6      	bcc.n	80007cc <CopyDataInit>
  ldr  r2, =_sbss
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <LoopForever+0x12>)
  b  LoopFillZerobss
 80007e0:	e002      	b.n	80007e8 <LoopFillZerobss>

080007e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80007e2:	2300      	movs	r3, #0
  str  r3, [r2]
 80007e4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e6:	3204      	adds	r2, #4

080007e8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <LoopForever+0x16>)
  cmp  r2, r3
 80007ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007ec:	d3f9      	bcc.n	80007e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007ee:	f7ff ffab 	bl	8000748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f001 fc93 	bl	800211c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f6:	f7ff fd13 	bl	8000220 <main>

080007fa <LoopForever>:

LoopForever:
    b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
   ldr   r0, =_estack
 80007fc:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000800:	080021b0 	.word	0x080021b0
  ldr  r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000808:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800080c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000810:	200000d4 	.word	0x200000d4

08000814 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_COMP_IRQHandler>
	...

08000818 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_Init+0x3c>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_Init+0x3c>)
 800082a:	2140      	movs	r1, #64	; 0x40
 800082c:	430a      	orrs	r2, r1
 800082e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000830:	2000      	movs	r0, #0
 8000832:	f000 f811 	bl	8000858 <HAL_InitTick>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d003      	beq.n	8000842 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e001      	b.n	8000846 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000842:	f7ff fed1 	bl	80005e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40022000 	.word	0x40022000

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_InitTick+0x5c>)
 8000862:	681c      	ldr	r4, [r3, #0]
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_InitTick+0x60>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	0019      	movs	r1, r3
 800086a:	23fa      	movs	r3, #250	; 0xfa
 800086c:	0098      	lsls	r0, r3, #2
 800086e:	f7ff fc4b 	bl	8000108 <__udivsi3>
 8000872:	0003      	movs	r3, r0
 8000874:	0019      	movs	r1, r3
 8000876:	0020      	movs	r0, r4
 8000878:	f7ff fc46 	bl	8000108 <__udivsi3>
 800087c:	0003      	movs	r3, r0
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fb1b 	bl	8000eba <HAL_SYSTICK_Config>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	e00f      	b.n	80008ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d80b      	bhi.n	80008aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	2301      	movs	r3, #1
 8000896:	425b      	negs	r3, r3
 8000898:	2200      	movs	r2, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f000 faf8 	bl	8000e90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_InitTick+0x64>)
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e000      	b.n	80008ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b003      	add	sp, #12
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000004 	.word	0x20000004

080008c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_IncTick+0x1c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	001a      	movs	r2, r3
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x20>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	18d2      	adds	r2, r2, r3
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <HAL_IncTick+0x20>)
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000008 	.word	0x20000008
 80008e0:	200000d0 	.word	0x200000d0

080008e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;
 80008e8:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <HAL_GetTick+0x10>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	200000d0 	.word	0x200000d0

080008f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000900:	f7ff fff0 	bl	80008e4 <HAL_GetTick>
 8000904:	0003      	movs	r3, r0
 8000906:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	d005      	beq.n	800091e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_Delay+0x40>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	001a      	movs	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	189b      	adds	r3, r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	f7ff ffe0 	bl	80008e4 <HAL_GetTick>
 8000924:	0002      	movs	r2, r0
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	429a      	cmp	r2, r3
 800092e:	d8f7      	bhi.n	8000920 <HAL_Delay+0x28>
  {
  }
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b004      	add	sp, #16
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000008 	.word	0x20000008

0800093c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e159      	b.n	8000c02 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10a      	bne.n	800096c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2250      	movs	r2, #80	; 0x50
 8000960:	2100      	movs	r1, #0
 8000962:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff fe52 	bl	8000610 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000970:	2210      	movs	r2, #16
 8000972:	4013      	ands	r3, r2
 8000974:	2b10      	cmp	r3, #16
 8000976:	d005      	beq.n	8000984 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	2204      	movs	r2, #4
 8000980:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000982:	d00b      	beq.n	800099c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000988:	2210      	movs	r2, #16
 800098a:	431a      	orrs	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2250      	movs	r2, #80	; 0x50
 8000994:	2100      	movs	r1, #0
 8000996:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e132      	b.n	8000c02 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009a0:	4a9a      	ldr	r2, [pc, #616]	; (8000c0c <HAL_ADC_Init+0x2d0>)
 80009a2:	4013      	ands	r3, r2
 80009a4:	2202      	movs	r2, #2
 80009a6:	431a      	orrs	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	2203      	movs	r2, #3
 80009b4:	4013      	ands	r3, r2
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d108      	bne.n	80009cc <HAL_ADC_Init+0x90>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2201      	movs	r2, #1
 80009c2:	4013      	ands	r3, r2
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d101      	bne.n	80009cc <HAL_ADC_Init+0x90>
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <HAL_ADC_Init+0x92>
 80009cc:	2300      	movs	r3, #0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d149      	bne.n	8000a66 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	23c0      	movs	r3, #192	; 0xc0
 80009d8:	061b      	lsls	r3, r3, #24
 80009da:	429a      	cmp	r2, r3
 80009dc:	d00b      	beq.n	80009f6 <HAL_ADC_Init+0xba>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d005      	beq.n	80009f6 <HAL_ADC_Init+0xba>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	061b      	lsls	r3, r3, #24
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d111      	bne.n	8000a1a <HAL_ADC_Init+0xde>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	691a      	ldr	r2, [r3, #16]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	0092      	lsls	r2, r2, #2
 8000a02:	0892      	lsrs	r2, r2, #2
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6919      	ldr	r1, [r3, #16]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	e014      	b.n	8000a44 <HAL_ADC_Init+0x108>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	691a      	ldr	r2, [r3, #16]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	0092      	lsls	r2, r2, #2
 8000a26:	0892      	lsrs	r2, r2, #2
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	4b79      	ldr	r3, [pc, #484]	; (8000c10 <HAL_ADC_Init+0x2d4>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b78      	ldr	r3, [pc, #480]	; (8000c10 <HAL_ADC_Init+0x2d4>)
 8000a30:	4978      	ldr	r1, [pc, #480]	; (8000c14 <HAL_ADC_Init+0x2d8>)
 8000a32:	400a      	ands	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	4b76      	ldr	r3, [pc, #472]	; (8000c10 <HAL_ADC_Init+0x2d4>)
 8000a38:	6819      	ldr	r1, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	4b74      	ldr	r3, [pc, #464]	; (8000c10 <HAL_ADC_Init+0x2d4>)
 8000a40:	430a      	orrs	r2, r1
 8000a42:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68da      	ldr	r2, [r3, #12]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2118      	movs	r1, #24
 8000a50:	438a      	bics	r2, r1
 8000a52:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68d9      	ldr	r1, [r3, #12]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	430a      	orrs	r2, r1
 8000a64:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000a66:	4b6a      	ldr	r3, [pc, #424]	; (8000c10 <HAL_ADC_Init+0x2d4>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4b69      	ldr	r3, [pc, #420]	; (8000c10 <HAL_ADC_Init+0x2d4>)
 8000a6c:	496a      	ldr	r1, [pc, #424]	; (8000c18 <HAL_ADC_Init+0x2dc>)
 8000a6e:	400a      	ands	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000a72:	4b67      	ldr	r3, [pc, #412]	; (8000c10 <HAL_ADC_Init+0x2d4>)
 8000a74:	6819      	ldr	r1, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	065a      	lsls	r2, r3, #25
 8000a7c:	4b64      	ldr	r3, [pc, #400]	; (8000c10 <HAL_ADC_Init+0x2d4>)
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	055b      	lsls	r3, r3, #21
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	d108      	bne.n	8000aa2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2180      	movs	r1, #128	; 0x80
 8000a9c:	0549      	lsls	r1, r1, #21
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	495b      	ldr	r1, [pc, #364]	; (8000c1c <HAL_ADC_Init+0x2e0>)
 8000aae:	400a      	ands	r2, r1
 8000ab0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68d9      	ldr	r1, [r3, #12]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	691b      	ldr	r3, [r3, #16]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d101      	bne.n	8000ac8 <HAL_ADC_Init+0x18c>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	e000      	b.n	8000aca <HAL_ADC_Init+0x18e>
 8000ac8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000aca:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2020      	movs	r0, #32
 8000ad0:	5c1b      	ldrb	r3, [r3, r0]
 8000ad2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000ad4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	202c      	movs	r0, #44	; 0x2c
 8000ada:	5c1b      	ldrb	r3, [r3, r0]
 8000adc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ade:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ae4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000aec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000af4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	430a      	orrs	r2, r1
 8000afc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b02:	23c2      	movs	r3, #194	; 0xc2
 8000b04:	33ff      	adds	r3, #255	; 0xff
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d00b      	beq.n	8000b22 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68d9      	ldr	r1, [r3, #12]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2221      	movs	r2, #33	; 0x21
 8000b26:	5c9b      	ldrb	r3, [r3, r2]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d11a      	bne.n	8000b62 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2220      	movs	r2, #32
 8000b30:	5c9b      	ldrb	r3, [r3, r2]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d109      	bne.n	8000b4a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	0249      	lsls	r1, r1, #9
 8000b44:	430a      	orrs	r2, r1
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	e00b      	b.n	8000b62 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b4e:	2220      	movs	r2, #32
 8000b50:	431a      	orrs	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d11f      	bne.n	8000baa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	691a      	ldr	r2, [r3, #16]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	492a      	ldr	r1, [pc, #168]	; (8000c20 <HAL_ADC_Init+0x2e4>)
 8000b76:	400a      	ands	r2, r1
 8000b78:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6919      	ldr	r1, [r3, #16]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b88:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000b8e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	430a      	orrs	r2, r1
 8000b96:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	691a      	ldr	r2, [r3, #16]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	611a      	str	r2, [r3, #16]
 8000ba8:	e00e      	b.n	8000bc8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d107      	bne.n	8000bc8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	691a      	ldr	r2, [r3, #16]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	438a      	bics	r2, r1
 8000bc6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2107      	movs	r1, #7
 8000bd4:	438a      	bics	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6959      	ldr	r1, [r3, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	4393      	bics	r3, r2
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	fffffefd 	.word	0xfffffefd
 8000c10:	40012708 	.word	0x40012708
 8000c14:	ffc3ffff 	.word	0xffc3ffff
 8000c18:	fdffffff 	.word	0xfdffffff
 8000c1c:	fffe0219 	.word	0xfffe0219
 8000c20:	fffffc03 	.word	0xfffffc03

08000c24 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2250      	movs	r2, #80	; 0x50
 8000c32:	5c9b      	ldrb	r3, [r3, r2]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d101      	bne.n	8000c3c <HAL_ADC_ConfigChannel+0x18>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e06c      	b.n	8000d16 <HAL_ADC_ConfigChannel+0xf2>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2250      	movs	r2, #80	; 0x50
 8000c40:	2101      	movs	r1, #1
 8000c42:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	d00b      	beq.n	8000c68 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c54:	2220      	movs	r2, #32
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2250      	movs	r2, #80	; 0x50
 8000c60:	2100      	movs	r1, #0
 8000c62:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e056      	b.n	8000d16 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4a2c      	ldr	r2, [pc, #176]	; (8000d20 <HAL_ADC_ConfigChannel+0xfc>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d028      	beq.n	8000cc4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	035b      	lsls	r3, r3, #13
 8000c7e:	0b5a      	lsrs	r2, r3, #13
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	02db      	lsls	r3, r3, #11
 8000c90:	4013      	ands	r3, r2
 8000c92:	d009      	beq.n	8000ca8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <HAL_ADC_ConfigChannel+0x100>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <HAL_ADC_ConfigChannel+0x100>)
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	0409      	lsls	r1, r1, #16
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000ca2:	200a      	movs	r0, #10
 8000ca4:	f000 f844 	bl	8000d30 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	029b      	lsls	r3, r3, #10
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d02b      	beq.n	8000d0c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_ADC_ConfigChannel+0x100>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <HAL_ADC_ConfigChannel+0x100>)
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	03c9      	lsls	r1, r1, #15
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e023      	b.n	8000d0c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	035b      	lsls	r3, r3, #13
 8000cd0:	0b5b      	lsrs	r3, r3, #13
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	400a      	ands	r2, r1
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	02db      	lsls	r3, r3, #11
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d005      	beq.n	8000cf4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_ADC_ConfigChannel+0x100>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_ADC_ConfigChannel+0x100>)
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <HAL_ADC_ConfigChannel+0x104>)
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	029b      	lsls	r3, r3, #10
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d005      	beq.n	8000d0c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_ADC_ConfigChannel+0x100>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_ADC_ConfigChannel+0x100>)
 8000d06:	4909      	ldr	r1, [pc, #36]	; (8000d2c <HAL_ADC_ConfigChannel+0x108>)
 8000d08:	400a      	ands	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2250      	movs	r2, #80	; 0x50
 8000d10:	2100      	movs	r1, #0
 8000d12:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	00001001 	.word	0x00001001
 8000d24:	40012708 	.word	0x40012708
 8000d28:	ff7fffff 	.word	0xff7fffff
 8000d2c:	ffbfffff 	.word	0xffbfffff

08000d30 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <ADC_DelayMicroSecond+0x34>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	490a      	ldr	r1, [pc, #40]	; (8000d68 <ADC_DelayMicroSecond+0x38>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff f9e2 	bl	8000108 <__udivsi3>
 8000d44:	0003      	movs	r3, r0
 8000d46:	001a      	movs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4353      	muls	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8000d4e:	e002      	b.n	8000d56 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1f9      	bne.n	8000d50 <ADC_DelayMicroSecond+0x20>
  } 
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b004      	add	sp, #16
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	000f4240 	.word	0x000f4240

08000d6c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d80:	d932      	bls.n	8000de8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d82:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <NVIC_SetPriority+0xd4>)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	0019      	movs	r1, r3
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	400b      	ands	r3, r1
 8000d8e:	3b08      	subs	r3, #8
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3306      	adds	r3, #6
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	18d3      	adds	r3, r2, r3
 8000d98:	3304      	adds	r3, #4
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	1dfa      	adds	r2, r7, #7
 8000d9e:	7812      	ldrb	r2, [r2, #0]
 8000da0:	0011      	movs	r1, r2
 8000da2:	2203      	movs	r2, #3
 8000da4:	400a      	ands	r2, r1
 8000da6:	00d2      	lsls	r2, r2, #3
 8000da8:	21ff      	movs	r1, #255	; 0xff
 8000daa:	4091      	lsls	r1, r2
 8000dac:	000a      	movs	r2, r1
 8000dae:	43d2      	mvns	r2, r2
 8000db0:	401a      	ands	r2, r3
 8000db2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	019b      	lsls	r3, r3, #6
 8000db8:	22ff      	movs	r2, #255	; 0xff
 8000dba:	401a      	ands	r2, r3
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	4003      	ands	r3, r0
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dca:	481d      	ldr	r0, [pc, #116]	; (8000e40 <NVIC_SetPriority+0xd4>)
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	001c      	movs	r4, r3
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	4023      	ands	r3, r4
 8000dd6:	3b08      	subs	r3, #8
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	3306      	adds	r3, #6
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	18c3      	adds	r3, r0, r3
 8000de2:	3304      	adds	r3, #4
 8000de4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000de6:	e027      	b.n	8000e38 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de8:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <NVIC_SetPriority+0xd8>)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	33c0      	adds	r3, #192	; 0xc0
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	589b      	ldr	r3, [r3, r2]
 8000df8:	1dfa      	adds	r2, r7, #7
 8000dfa:	7812      	ldrb	r2, [r2, #0]
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	2203      	movs	r2, #3
 8000e00:	400a      	ands	r2, r1
 8000e02:	00d2      	lsls	r2, r2, #3
 8000e04:	21ff      	movs	r1, #255	; 0xff
 8000e06:	4091      	lsls	r1, r2
 8000e08:	000a      	movs	r2, r1
 8000e0a:	43d2      	mvns	r2, r2
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	019b      	lsls	r3, r3, #6
 8000e14:	22ff      	movs	r2, #255	; 0xff
 8000e16:	401a      	ands	r2, r3
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	2303      	movs	r3, #3
 8000e20:	4003      	ands	r3, r0
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <NVIC_SetPriority+0xd8>)
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	430a      	orrs	r2, r1
 8000e32:	33c0      	adds	r3, #192	; 0xc0
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	501a      	str	r2, [r3, r0]
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	e000ed00 	.word	0xe000ed00
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <SysTick_Config+0x40>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d901      	bls.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e010      	b.n	8000e80 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <SysTick_Config+0x44>)
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	3a01      	subs	r2, #1
 8000e64:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	2301      	movs	r3, #1
 8000e68:	425b      	negs	r3, r3
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff ff7d 	bl	8000d6c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SysTick_Config+0x44>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x44>)
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	00ffffff 	.word	0x00ffffff
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	1c02      	adds	r2, r0, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ff5d 	bl	8000d6c <NVIC_SetPriority>
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ffbf 	bl	8000e48 <SysTick_Config>
 8000eca:	0003      	movs	r3, r0
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eea:	e149      	b.n	8001180 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d100      	bne.n	8000f04 <HAL_GPIO_Init+0x30>
 8000f02:	e13a      	b.n	800117a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d00b      	beq.n	8000f24 <HAL_GPIO_Init+0x50>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d007      	beq.n	8000f24 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f18:	2b11      	cmp	r3, #17
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b12      	cmp	r3, #18
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	43da      	mvns	r2, r3
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	409a      	lsls	r2, r3
 8000f46:	0013      	movs	r3, r2
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	2201      	movs	r2, #1
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0xf2>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b12      	cmp	r3, #18
 8000fc4:	d123      	bne.n	800100e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	58d3      	ldr	r3, [r2, r3]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	4013      	ands	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2107      	movs	r1, #7
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	6939      	ldr	r1, [r7, #16]
 800100c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	401a      	ands	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	055b      	lsls	r3, r3, #21
 800104a:	4013      	ands	r3, r2
 800104c:	d100      	bne.n	8001050 <HAL_GPIO_Init+0x17c>
 800104e:	e094      	b.n	800117a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b51      	ldr	r3, [pc, #324]	; (8001198 <HAL_GPIO_Init+0x2c4>)
 8001052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001054:	4b50      	ldr	r3, [pc, #320]	; (8001198 <HAL_GPIO_Init+0x2c4>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800105c:	4a4f      	ldr	r2, [pc, #316]	; (800119c <HAL_GPIO_Init+0x2c8>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	589b      	ldr	r3, [r3, r2]
 8001068:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2203      	movs	r2, #3
 800106e:	4013      	ands	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	409a      	lsls	r2, r3
 8001076:	0013      	movs	r3, r2
 8001078:	43da      	mvns	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	23a0      	movs	r3, #160	; 0xa0
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	429a      	cmp	r2, r3
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x1de>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a44      	ldr	r2, [pc, #272]	; (80011a0 <HAL_GPIO_Init+0x2cc>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x1da>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a43      	ldr	r2, [pc, #268]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x1d6>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a42      	ldr	r2, [pc, #264]	; (80011a8 <HAL_GPIO_Init+0x2d4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x1d2>
 80010a2:	2305      	movs	r3, #5
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x1e0>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x1e0>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x1e0>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x1e0>
 80010b2:	2300      	movs	r3, #0
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	2103      	movs	r1, #3
 80010b8:	400a      	ands	r2, r1
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c4:	4935      	ldr	r1, [pc, #212]	; (800119c <HAL_GPIO_Init+0x2c8>)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d2:	4b36      	ldr	r3, [pc, #216]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43da      	mvns	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	025b      	lsls	r3, r3, #9
 80010ea:	4013      	ands	r3, r2
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43da      	mvns	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	029b      	lsls	r3, r3, #10
 8001114:	4013      	ands	r3, r2
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43da      	mvns	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	035b      	lsls	r3, r3, #13
 800113e:	4013      	ands	r3, r2
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43da      	mvns	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	039b      	lsls	r3, r3, #14
 8001168:	4013      	ands	r3, r2
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	40da      	lsrs	r2, r3
 8001188:	1e13      	subs	r3, r2, #0
 800118a:	d000      	beq.n	800118e <HAL_GPIO_Init+0x2ba>
 800118c:	e6ae      	b.n	8000eec <HAL_GPIO_Init+0x18>
  }
}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b006      	add	sp, #24
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	50000400 	.word	0x50000400
 80011a4:	50000800 	.word	0x50000800
 80011a8:	50001c00 	.word	0x50001c00
 80011ac:	40010400 	.word	0x40010400

080011b0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	0008      	movs	r0, r1
 80011ba:	0011      	movs	r1, r2
 80011bc:	1cbb      	adds	r3, r7, #2
 80011be:	1c02      	adds	r2, r0, #0
 80011c0:	801a      	strh	r2, [r3, #0]
 80011c2:	1c7b      	adds	r3, r7, #1
 80011c4:	1c0a      	adds	r2, r1, #0
 80011c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c8:	1c7b      	adds	r3, r7, #1
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d004      	beq.n	80011da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d0:	1cbb      	adds	r3, r7, #2
 80011d2:	881a      	ldrh	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011da:	1cbb      	adds	r3, r7, #2
 80011dc:	881a      	ldrh	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	000a      	movs	r2, r1
 80011f4:	1cbb      	adds	r3, r7, #2
 80011f6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011fe:	1cbb      	adds	r3, r7, #2
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4013      	ands	r3, r2
 8001206:	041a      	lsls	r2, r3, #16
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	1cb9      	adds	r1, r7, #2
 800120e:	8809      	ldrh	r1, [r1, #0]
 8001210:	400b      	ands	r3, r1
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b004      	add	sp, #16
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e082      	b.n	8001338 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2241      	movs	r2, #65	; 0x41
 8001236:	5c9b      	ldrb	r3, [r3, r2]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d107      	bne.n	800124e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2240      	movs	r2, #64	; 0x40
 8001242:	2100      	movs	r1, #0
 8001244:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff fa1f 	bl	800068c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2241      	movs	r2, #65	; 0x41
 8001252:	2124      	movs	r1, #36	; 0x24
 8001254:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2101      	movs	r1, #1
 8001262:	438a      	bics	r2, r1
 8001264:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4934      	ldr	r1, [pc, #208]	; (8001340 <HAL_I2C_Init+0x120>)
 8001270:	400a      	ands	r2, r1
 8001272:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4931      	ldr	r1, [pc, #196]	; (8001344 <HAL_I2C_Init+0x124>)
 8001280:	400a      	ands	r2, r1
 8001282:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d108      	bne.n	800129e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	0209      	lsls	r1, r1, #8
 8001298:	430a      	orrs	r2, r1
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	e007      	b.n	80012ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2184      	movs	r1, #132	; 0x84
 80012a8:	0209      	lsls	r1, r1, #8
 80012aa:	430a      	orrs	r2, r1
 80012ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d104      	bne.n	80012c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	491f      	ldr	r1, [pc, #124]	; (8001348 <HAL_I2C_Init+0x128>)
 80012cc:	430a      	orrs	r2, r1
 80012ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	491a      	ldr	r1, [pc, #104]	; (8001344 <HAL_I2C_Init+0x124>)
 80012dc:	400a      	ands	r2, r1
 80012de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	431a      	orrs	r2, r3
 80012ea:	0011      	movs	r1, r2
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	021a      	lsls	r2, r3, #8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69d9      	ldr	r1, [r3, #28]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1a      	ldr	r2, [r3, #32]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2101      	movs	r1, #1
 8001316:	430a      	orrs	r2, r1
 8001318:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2241      	movs	r2, #65	; 0x41
 8001324:	2120      	movs	r1, #32
 8001326:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2242      	movs	r2, #66	; 0x42
 8001332:	2100      	movs	r1, #0
 8001334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}
 8001340:	f0ffffff 	.word	0xf0ffffff
 8001344:	ffff7fff 	.word	0xffff7fff
 8001348:	02008000 	.word	0x02008000

0800134c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2241      	movs	r2, #65	; 0x41
 800135a:	5c9b      	ldrb	r3, [r3, r2]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b20      	cmp	r3, #32
 8001360:	d138      	bne.n	80013d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2240      	movs	r2, #64	; 0x40
 8001366:	5c9b      	ldrb	r3, [r3, r2]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800136c:	2302      	movs	r3, #2
 800136e:	e032      	b.n	80013d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2240      	movs	r2, #64	; 0x40
 8001374:	2101      	movs	r1, #1
 8001376:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2241      	movs	r2, #65	; 0x41
 800137c:	2124      	movs	r1, #36	; 0x24
 800137e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2101      	movs	r1, #1
 800138c:	438a      	bics	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4911      	ldr	r1, [pc, #68]	; (80013e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800139c:	400a      	ands	r2, r1
 800139e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6819      	ldr	r1, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2101      	movs	r1, #1
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2241      	movs	r2, #65	; 0x41
 80013c4:	2120      	movs	r1, #32
 80013c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2240      	movs	r2, #64	; 0x40
 80013cc:	2100      	movs	r1, #0
 80013ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e000      	b.n	80013d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013d4:	2302      	movs	r3, #2
  }
}
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	ffffefff 	.word	0xffffefff

080013e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2241      	movs	r2, #65	; 0x41
 80013f2:	5c9b      	ldrb	r3, [r3, r2]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b20      	cmp	r3, #32
 80013f8:	d139      	bne.n	800146e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2240      	movs	r2, #64	; 0x40
 80013fe:	5c9b      	ldrb	r3, [r3, r2]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001404:	2302      	movs	r3, #2
 8001406:	e033      	b.n	8001470 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2240      	movs	r2, #64	; 0x40
 800140c:	2101      	movs	r1, #1
 800140e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2241      	movs	r2, #65	; 0x41
 8001414:	2124      	movs	r1, #36	; 0x24
 8001416:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2101      	movs	r1, #1
 8001424:	438a      	bics	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4a11      	ldr	r2, [pc, #68]	; (8001478 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2101      	movs	r1, #1
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2241      	movs	r2, #65	; 0x41
 800145e:	2120      	movs	r1, #32
 8001460:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2240      	movs	r2, #64	; 0x40
 8001466:	2100      	movs	r1, #0
 8001468:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800146e:	2302      	movs	r3, #2
  }
}
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	b004      	add	sp, #16
 8001476:	bd80      	pop	{r7, pc}
 8001478:	fffff0ff 	.word	0xfffff0ff

0800147c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	f000 fb6a 	bl	8001b64 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001490:	4bc7      	ldr	r3, [pc, #796]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	220c      	movs	r2, #12
 8001496:	4013      	ands	r3, r2
 8001498:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800149a:	4bc5      	ldr	r3, [pc, #788]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	025b      	lsls	r3, r3, #9
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2201      	movs	r2, #1
 80014ac:	4013      	ands	r3, r2
 80014ae:	d100      	bne.n	80014b2 <HAL_RCC_OscConfig+0x36>
 80014b0:	e07d      	b.n	80015ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d007      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d112      	bne.n	80014e4 <HAL_RCC_OscConfig+0x68>
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	025b      	lsls	r3, r3, #9
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d10d      	bne.n	80014e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	4bb9      	ldr	r3, [pc, #740]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	029b      	lsls	r3, r3, #10
 80014d0:	4013      	ands	r3, r2
 80014d2:	d100      	bne.n	80014d6 <HAL_RCC_OscConfig+0x5a>
 80014d4:	e06a      	b.n	80015ac <HAL_RCC_OscConfig+0x130>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d166      	bne.n	80015ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	f000 fb40 	bl	8001b64 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	025b      	lsls	r3, r3, #9
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d107      	bne.n	8001500 <HAL_RCC_OscConfig+0x84>
 80014f0:	4baf      	ldr	r3, [pc, #700]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4bae      	ldr	r3, [pc, #696]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	0249      	lsls	r1, r1, #9
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e027      	b.n	8001550 <HAL_RCC_OscConfig+0xd4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	23a0      	movs	r3, #160	; 0xa0
 8001506:	02db      	lsls	r3, r3, #11
 8001508:	429a      	cmp	r2, r3
 800150a:	d10e      	bne.n	800152a <HAL_RCC_OscConfig+0xae>
 800150c:	4ba8      	ldr	r3, [pc, #672]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4ba7      	ldr	r3, [pc, #668]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001512:	2180      	movs	r1, #128	; 0x80
 8001514:	02c9      	lsls	r1, r1, #11
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	4ba5      	ldr	r3, [pc, #660]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4ba4      	ldr	r3, [pc, #656]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	0249      	lsls	r1, r1, #9
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e012      	b.n	8001550 <HAL_RCC_OscConfig+0xd4>
 800152a:	4ba1      	ldr	r3, [pc, #644]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4ba0      	ldr	r3, [pc, #640]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001530:	49a0      	ldr	r1, [pc, #640]	; (80017b4 <HAL_RCC_OscConfig+0x338>)
 8001532:	400a      	ands	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	4b9e      	ldr	r3, [pc, #632]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	025b      	lsls	r3, r3, #9
 800153e:	4013      	ands	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4b9a      	ldr	r3, [pc, #616]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b99      	ldr	r3, [pc, #612]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800154a:	499b      	ldr	r1, [pc, #620]	; (80017b8 <HAL_RCC_OscConfig+0x33c>)
 800154c:	400a      	ands	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d014      	beq.n	8001582 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff f9c4 	bl	80008e4 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001562:	f7ff f9bf 	bl	80008e4 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b64      	cmp	r3, #100	; 0x64
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e2f7      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001574:	4b8e      	ldr	r3, [pc, #568]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	029b      	lsls	r3, r3, #10
 800157c:	4013      	ands	r3, r2
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0xe6>
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff f9af 	bl	80008e4 <HAL_GetTick>
 8001586:	0003      	movs	r3, r0
 8001588:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff f9aa 	bl	80008e4 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e2e2      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800159e:	4b84      	ldr	r3, [pc, #528]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	029b      	lsls	r3, r3, #10
 80015a6:	4013      	ands	r3, r2
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x110>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2202      	movs	r2, #2
 80015b4:	4013      	ands	r3, r2
 80015b6:	d100      	bne.n	80015ba <HAL_RCC_OscConfig+0x13e>
 80015b8:	e098      	b.n	80016ec <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	2220      	movs	r2, #32
 80015c4:	4013      	ands	r3, r2
 80015c6:	d009      	beq.n	80015dc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80015c8:	4b79      	ldr	r3, [pc, #484]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b78      	ldr	r3, [pc, #480]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80015ce:	2120      	movs	r1, #32
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	2220      	movs	r2, #32
 80015d8:	4393      	bics	r3, r2
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d005      	beq.n	80015ee <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	2b0c      	cmp	r3, #12
 80015e6:	d13d      	bne.n	8001664 <HAL_RCC_OscConfig+0x1e8>
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d13a      	bne.n	8001664 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015ee:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2204      	movs	r2, #4
 80015f4:	4013      	ands	r3, r2
 80015f6:	d004      	beq.n	8001602 <HAL_RCC_OscConfig+0x186>
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e2b0      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b6b      	ldr	r3, [pc, #428]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4a6d      	ldr	r2, [pc, #436]	; (80017bc <HAL_RCC_OscConfig+0x340>)
 8001608:	4013      	ands	r3, r2
 800160a:	0019      	movs	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	021a      	lsls	r2, r3, #8
 8001612:	4b67      	ldr	r3, [pc, #412]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001618:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2209      	movs	r2, #9
 800161e:	4393      	bics	r3, r2
 8001620:	0019      	movs	r1, r3
 8001622:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800162a:	f000 fbcb 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 800162e:	0001      	movs	r1, r0
 8001630:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	220f      	movs	r2, #15
 8001638:	4013      	ands	r3, r2
 800163a:	4a61      	ldr	r2, [pc, #388]	; (80017c0 <HAL_RCC_OscConfig+0x344>)
 800163c:	5cd3      	ldrb	r3, [r2, r3]
 800163e:	000a      	movs	r2, r1
 8001640:	40da      	lsrs	r2, r3
 8001642:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <HAL_RCC_OscConfig+0x348>)
 8001644:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001646:	2513      	movs	r5, #19
 8001648:	197c      	adds	r4, r7, r5
 800164a:	2000      	movs	r0, #0
 800164c:	f7ff f904 	bl	8000858 <HAL_InitTick>
 8001650:	0003      	movs	r3, r0
 8001652:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001654:	197b      	adds	r3, r7, r5
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d047      	beq.n	80016ec <HAL_RCC_OscConfig+0x270>
      {
        return status;
 800165c:	2313      	movs	r3, #19
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	e27f      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	2b00      	cmp	r3, #0
 8001668:	d027      	beq.n	80016ba <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800166a:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2209      	movs	r2, #9
 8001670:	4393      	bics	r3, r2
 8001672:	0019      	movs	r1, r3
 8001674:	4b4e      	ldr	r3, [pc, #312]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff f932 	bl	80008e4 <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff f92d 	bl	80008e4 <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e265      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001698:	4b45      	ldr	r3, [pc, #276]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2204      	movs	r2, #4
 800169e:	4013      	ands	r3, r2
 80016a0:	d0f1      	beq.n	8001686 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a2:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a45      	ldr	r2, [pc, #276]	; (80017bc <HAL_RCC_OscConfig+0x340>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	0019      	movs	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	021a      	lsls	r2, r3, #8
 80016b2:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80016b4:	430a      	orrs	r2, r1
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	e018      	b.n	80016ec <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ba:	4b3d      	ldr	r3, [pc, #244]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80016c0:	2101      	movs	r1, #1
 80016c2:	438a      	bics	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff f90d 	bl	80008e4 <HAL_GetTick>
 80016ca:	0003      	movs	r3, r0
 80016cc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d0:	f7ff f908 	bl	80008e4 <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e240      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016e2:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2204      	movs	r2, #4
 80016e8:	4013      	ands	r3, r2
 80016ea:	d1f1      	bne.n	80016d0 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2210      	movs	r2, #16
 80016f2:	4013      	ands	r3, r2
 80016f4:	d100      	bne.n	80016f8 <HAL_RCC_OscConfig+0x27c>
 80016f6:	e09e      	b.n	8001836 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d13f      	bne.n	800177e <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d005      	beq.n	8001716 <HAL_RCC_OscConfig+0x29a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e226      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001716:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4a2b      	ldr	r2, [pc, #172]	; (80017c8 <HAL_RCC_OscConfig+0x34c>)
 800171c:	4013      	ands	r3, r2
 800171e:	0019      	movs	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1a      	ldr	r2, [r3, #32]
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001726:	430a      	orrs	r2, r1
 8001728:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	0a19      	lsrs	r1, r3, #8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	061a      	lsls	r2, r3, #24
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	0b5b      	lsrs	r3, r3, #13
 8001744:	3301      	adds	r3, #1
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	0212      	lsls	r2, r2, #8
 800174a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	210f      	movs	r1, #15
 8001754:	400b      	ands	r3, r1
 8001756:	491a      	ldr	r1, [pc, #104]	; (80017c0 <HAL_RCC_OscConfig+0x344>)
 8001758:	5ccb      	ldrb	r3, [r1, r3]
 800175a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_RCC_OscConfig+0x348>)
 800175e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001760:	2513      	movs	r5, #19
 8001762:	197c      	adds	r4, r7, r5
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff f877 	bl	8000858 <HAL_InitTick>
 800176a:	0003      	movs	r3, r0
 800176c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800176e:	197b      	adds	r3, r7, r5
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d05f      	beq.n	8001836 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8001776:	2313      	movs	r3, #19
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	e1f2      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d03d      	beq.n	8001802 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	0049      	lsls	r1, r1, #1
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff f8a6 	bl	80008e4 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800179c:	e016      	b.n	80017cc <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179e:	f7ff f8a1 	bl	80008e4 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d90f      	bls.n	80017cc <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1d9      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
 80017b0:	40021000 	.word	0x40021000
 80017b4:	fffeffff 	.word	0xfffeffff
 80017b8:	fffbffff 	.word	0xfffbffff
 80017bc:	ffffe0ff 	.word	0xffffe0ff
 80017c0:	0800218c 	.word	0x0800218c
 80017c4:	20000000 	.word	0x20000000
 80017c8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017cc:	4bca      	ldr	r3, [pc, #808]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4013      	ands	r3, r2
 80017d6:	d0e2      	beq.n	800179e <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d8:	4bc7      	ldr	r3, [pc, #796]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4ac7      	ldr	r2, [pc, #796]	; (8001afc <HAL_RCC_OscConfig+0x680>)
 80017de:	4013      	ands	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1a      	ldr	r2, [r3, #32]
 80017e6:	4bc4      	ldr	r3, [pc, #784]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ec:	4bc2      	ldr	r3, [pc, #776]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	0a19      	lsrs	r1, r3, #8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	061a      	lsls	r2, r3, #24
 80017fa:	4bbf      	ldr	r3, [pc, #764]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	e019      	b.n	8001836 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001802:	4bbd      	ldr	r3, [pc, #756]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4bbc      	ldr	r3, [pc, #752]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001808:	49bd      	ldr	r1, [pc, #756]	; (8001b00 <HAL_RCC_OscConfig+0x684>)
 800180a:	400a      	ands	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff f869 	bl	80008e4 <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001818:	f7ff f864 	bl	80008e4 <HAL_GetTick>
 800181c:	0002      	movs	r2, r0
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e19c      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800182a:	4bb3      	ldr	r3, [pc, #716]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4013      	ands	r3, r2
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2208      	movs	r2, #8
 800183c:	4013      	ands	r3, r2
 800183e:	d036      	beq.n	80018ae <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d019      	beq.n	800187c <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001848:	4bab      	ldr	r3, [pc, #684]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 800184a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800184c:	4baa      	ldr	r3, [pc, #680]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 800184e:	2101      	movs	r1, #1
 8001850:	430a      	orrs	r2, r1
 8001852:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001854:	f7ff f846 	bl	80008e4 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185e:	f7ff f841 	bl	80008e4 <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e179      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001870:	4ba1      	ldr	r3, [pc, #644]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001874:	2202      	movs	r2, #2
 8001876:	4013      	ands	r3, r2
 8001878:	d0f1      	beq.n	800185e <HAL_RCC_OscConfig+0x3e2>
 800187a:	e018      	b.n	80018ae <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187c:	4b9e      	ldr	r3, [pc, #632]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 800187e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001880:	4b9d      	ldr	r3, [pc, #628]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001882:	2101      	movs	r1, #1
 8001884:	438a      	bics	r2, r1
 8001886:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001888:	f7ff f82c 	bl	80008e4 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001892:	f7ff f827 	bl	80008e4 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e15f      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018a4:	4b94      	ldr	r3, [pc, #592]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80018a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a8:	2202      	movs	r2, #2
 80018aa:	4013      	ands	r3, r2
 80018ac:	d1f1      	bne.n	8001892 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2204      	movs	r2, #4
 80018b4:	4013      	ands	r3, r2
 80018b6:	d100      	bne.n	80018ba <HAL_RCC_OscConfig+0x43e>
 80018b8:	e0af      	b.n	8001a1a <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ba:	2323      	movs	r3, #35	; 0x23
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c2:	4b8d      	ldr	r3, [pc, #564]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80018c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	055b      	lsls	r3, r3, #21
 80018ca:	4013      	ands	r3, r2
 80018cc:	d10a      	bne.n	80018e4 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b8a      	ldr	r3, [pc, #552]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80018d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018d2:	4b89      	ldr	r3, [pc, #548]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0549      	lsls	r1, r1, #21
 80018d8:	430a      	orrs	r2, r1
 80018da:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80018dc:	2323      	movs	r3, #35	; 0x23
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	4b87      	ldr	r3, [pc, #540]	; (8001b04 <HAL_RCC_OscConfig+0x688>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	d11a      	bne.n	8001926 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f0:	4b84      	ldr	r3, [pc, #528]	; (8001b04 <HAL_RCC_OscConfig+0x688>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b83      	ldr	r3, [pc, #524]	; (8001b04 <HAL_RCC_OscConfig+0x688>)
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	0049      	lsls	r1, r1, #1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7fe fff1 	bl	80008e4 <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001908:	f7fe ffec 	bl	80008e4 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e124      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b7a      	ldr	r3, [pc, #488]	; (8001b04 <HAL_RCC_OscConfig+0x688>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4013      	ands	r3, r2
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	429a      	cmp	r2, r3
 8001930:	d107      	bne.n	8001942 <HAL_RCC_OscConfig+0x4c6>
 8001932:	4b71      	ldr	r3, [pc, #452]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001934:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001936:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0049      	lsls	r1, r1, #1
 800193c:	430a      	orrs	r2, r1
 800193e:	651a      	str	r2, [r3, #80]	; 0x50
 8001940:	e031      	b.n	80019a6 <HAL_RCC_OscConfig+0x52a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x4e8>
 800194a:	4b6b      	ldr	r3, [pc, #428]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 800194c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800194e:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001950:	496b      	ldr	r1, [pc, #428]	; (8001b00 <HAL_RCC_OscConfig+0x684>)
 8001952:	400a      	ands	r2, r1
 8001954:	651a      	str	r2, [r3, #80]	; 0x50
 8001956:	4b68      	ldr	r3, [pc, #416]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800195a:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 800195c:	496a      	ldr	r1, [pc, #424]	; (8001b08 <HAL_RCC_OscConfig+0x68c>)
 800195e:	400a      	ands	r2, r1
 8001960:	651a      	str	r2, [r3, #80]	; 0x50
 8001962:	e020      	b.n	80019a6 <HAL_RCC_OscConfig+0x52a>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	23a0      	movs	r3, #160	; 0xa0
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	429a      	cmp	r2, r3
 800196e:	d10e      	bne.n	800198e <HAL_RCC_OscConfig+0x512>
 8001970:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001972:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001976:	2180      	movs	r1, #128	; 0x80
 8001978:	00c9      	lsls	r1, r1, #3
 800197a:	430a      	orrs	r2, r1
 800197c:	651a      	str	r2, [r3, #80]	; 0x50
 800197e:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001982:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	0049      	lsls	r1, r1, #1
 8001988:	430a      	orrs	r2, r1
 800198a:	651a      	str	r2, [r3, #80]	; 0x50
 800198c:	e00b      	b.n	80019a6 <HAL_RCC_OscConfig+0x52a>
 800198e:	4b5a      	ldr	r3, [pc, #360]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001992:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001994:	495a      	ldr	r1, [pc, #360]	; (8001b00 <HAL_RCC_OscConfig+0x684>)
 8001996:	400a      	ands	r2, r1
 8001998:	651a      	str	r2, [r3, #80]	; 0x50
 800199a:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 800199c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80019a0:	4959      	ldr	r1, [pc, #356]	; (8001b08 <HAL_RCC_OscConfig+0x68c>)
 80019a2:	400a      	ands	r2, r1
 80019a4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d015      	beq.n	80019da <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7fe ff99 	bl	80008e4 <HAL_GetTick>
 80019b2:	0003      	movs	r3, r0
 80019b4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019b6:	e009      	b.n	80019cc <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b8:	f7fe ff94 	bl	80008e4 <HAL_GetTick>
 80019bc:	0002      	movs	r2, r0
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_RCC_OscConfig+0x690>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e0cb      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80019ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d0ef      	beq.n	80019b8 <HAL_RCC_OscConfig+0x53c>
 80019d8:	e014      	b.n	8001a04 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019da:	f7fe ff83 	bl	80008e4 <HAL_GetTick>
 80019de:	0003      	movs	r3, r0
 80019e0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019e2:	e009      	b.n	80019f8 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7fe ff7e 	bl	80008e4 <HAL_GetTick>
 80019e8:	0002      	movs	r2, r0
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	4a47      	ldr	r2, [pc, #284]	; (8001b0c <HAL_RCC_OscConfig+0x690>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0b5      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 80019fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	d1ef      	bne.n	80019e4 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a04:	2323      	movs	r3, #35	; 0x23
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d105      	bne.n	8001a1a <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001a14:	493e      	ldr	r1, [pc, #248]	; (8001b10 <HAL_RCC_OscConfig+0x694>)
 8001a16:	400a      	ands	r2, r1
 8001a18:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d100      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5a8>
 8001a22:	e09e      	b.n	8001b62 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d100      	bne.n	8001a2c <HAL_RCC_OscConfig+0x5b0>
 8001a2a:	e077      	b.n	8001b1c <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d145      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001a3a:	4936      	ldr	r1, [pc, #216]	; (8001b14 <HAL_RCC_OscConfig+0x698>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7fe ff50 	bl	80008e4 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7fe ff4b 	bl	80008e4 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e083      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a5c:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	049b      	lsls	r3, r3, #18
 8001a64:	4013      	ands	r3, r2
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a2a      	ldr	r2, [pc, #168]	; (8001b18 <HAL_RCC_OscConfig+0x69c>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	431a      	orrs	r2, r3
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	0449      	lsls	r1, r1, #17
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7fe ff25 	bl	80008e4 <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7fe ff20 	bl	80008e4 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e058      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	049b      	lsls	r3, r3, #18
 8001aba:	4013      	ands	r3, r2
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x624>
 8001abe:	e050      	b.n	8001b62 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001ac6:	4913      	ldr	r1, [pc, #76]	; (8001b14 <HAL_RCC_OscConfig+0x698>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7fe ff0a 	bl	80008e4 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7fe ff05 	bl	80008e4 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e03d      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_RCC_OscConfig+0x67c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	049b      	lsls	r3, r3, #18
 8001af0:	4013      	ands	r3, r2
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x65a>
 8001af4:	e035      	b.n	8001b62 <HAL_RCC_OscConfig+0x6e6>
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	40021000 	.word	0x40021000
 8001afc:	ffff1fff 	.word	0xffff1fff
 8001b00:	fffffeff 	.word	0xfffffeff
 8001b04:	40007000 	.word	0x40007000
 8001b08:	fffffbff 	.word	0xfffffbff
 8001b0c:	00001388 	.word	0x00001388
 8001b10:	efffffff 	.word	0xefffffff
 8001b14:	feffffff 	.word	0xfeffffff
 8001b18:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e01d      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_RCC_OscConfig+0x6f0>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	025b      	lsls	r3, r3, #9
 8001b34:	401a      	ands	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d10f      	bne.n	8001b5e <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	23f0      	movs	r3, #240	; 0xf0
 8001b42:	039b      	lsls	r3, r3, #14
 8001b44:	401a      	ands	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	23c0      	movs	r3, #192	; 0xc0
 8001b52:	041b      	lsls	r3, r3, #16
 8001b54:	401a      	ands	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b00a      	add	sp, #40	; 0x28
 8001b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e10d      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b88      	ldr	r3, [pc, #544]	; (8001da8 <HAL_RCC_ClockConfig+0x238>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d911      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b85      	ldr	r3, [pc, #532]	; (8001da8 <HAL_RCC_ClockConfig+0x238>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2201      	movs	r2, #1
 8001b98:	4393      	bics	r3, r2
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	4b82      	ldr	r3, [pc, #520]	; (8001da8 <HAL_RCC_ClockConfig+0x238>)
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba4:	4b80      	ldr	r3, [pc, #512]	; (8001da8 <HAL_RCC_ClockConfig+0x238>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4013      	ands	r3, r2
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0f4      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d009      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b7a      	ldr	r3, [pc, #488]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	22f0      	movs	r2, #240	; 0xf0
 8001bc6:	4393      	bics	r3, r2
 8001bc8:	0019      	movs	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	4b77      	ldr	r3, [pc, #476]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d100      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x70>
 8001bde:	e089      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001be8:	4b70      	ldr	r3, [pc, #448]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	029b      	lsls	r3, r3, #10
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d120      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0d3      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c00:	4b6a      	ldr	r3, [pc, #424]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	049b      	lsls	r3, r3, #18
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d114      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0c7      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c18:	4b64      	ldr	r3, [pc, #400]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d109      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0bc      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c26:	4b61      	ldr	r3, [pc, #388]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0b4      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001c46:	430a      	orrs	r2, r1
 8001c48:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c4a:	f7fe fe4b 	bl	80008e4 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d111      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c5a:	e009      	b.n	8001c70 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7fe fe42 	bl	80008e4 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_RCC_ClockConfig+0x240>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e097      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c70:	4b4e      	ldr	r3, [pc, #312]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	220c      	movs	r2, #12
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d1ef      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xec>
 8001c7c:	e03a      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d111      	bne.n	8001caa <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c86:	e009      	b.n	8001c9c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f7fe fe2c 	bl	80008e4 <HAL_GetTick>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	4a47      	ldr	r2, [pc, #284]	; (8001db0 <HAL_RCC_ClockConfig+0x240>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e081      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9c:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	220c      	movs	r2, #12
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	d1ef      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x118>
 8001ca8:	e024      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d11b      	bne.n	8001cea <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb2:	e009      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7fe fe16 	bl	80008e4 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	4a3c      	ldr	r2, [pc, #240]	; (8001db0 <HAL_RCC_ClockConfig+0x240>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e06b      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	220c      	movs	r2, #12
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d1ef      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x144>
 8001cd4:	e00e      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd6:	f7fe fe05 	bl	80008e4 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	4a33      	ldr	r2, [pc, #204]	; (8001db0 <HAL_RCC_ClockConfig+0x240>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e05a      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cea:	4b30      	ldr	r3, [pc, #192]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	220c      	movs	r2, #12
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <HAL_RCC_ClockConfig+0x238>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d211      	bcs.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_RCC_ClockConfig+0x238>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4393      	bics	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_RCC_ClockConfig+0x238>)
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d14:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_RCC_ClockConfig+0x238>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e03c      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <HAL_RCC_ClockConfig+0x244>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001d40:	430a      	orrs	r2, r1
 8001d42:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d00a      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <HAL_RCC_ClockConfig+0x248>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	00da      	lsls	r2, r3, #3
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d64:	f000 f82e 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d68:	0001      	movs	r1, r0
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_RCC_ClockConfig+0x23c>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	220f      	movs	r2, #15
 8001d72:	4013      	ands	r3, r2
 8001d74:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <HAL_RCC_ClockConfig+0x24c>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	000a      	movs	r2, r1
 8001d7a:	40da      	lsrs	r2, r3
 8001d7c:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_RCC_ClockConfig+0x250>)
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001d80:	250b      	movs	r5, #11
 8001d82:	197c      	adds	r4, r7, r5
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7fe fd67 	bl	8000858 <HAL_InitTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d8e:	197b      	adds	r3, r7, r5
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001d96:	230b      	movs	r3, #11
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	e000      	b.n	8001da0 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b004      	add	sp, #16
 8001da6:	bdb0      	pop	{r4, r5, r7, pc}
 8001da8:	40022000 	.word	0x40022000
 8001dac:	40021000 	.word	0x40021000
 8001db0:	00001388 	.word	0x00001388
 8001db4:	fffff8ff 	.word	0xfffff8ff
 8001db8:	ffffc7ff 	.word	0xffffc7ff
 8001dbc:	0800218c 	.word	0x0800218c
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001dca:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d00e      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d00f      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d157      	bne.n	8001e92 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2210      	movs	r2, #16
 8001de8:	4013      	ands	r3, r2
 8001dea:	d002      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001dec:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dee:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001df0:	e05d      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001df2:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001df4:	613b      	str	r3, [r7, #16]
      break;
 8001df6:	e05a      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df8:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001dfa:	613b      	str	r3, [r7, #16]
      break;
 8001dfc:	e057      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	0c9b      	lsrs	r3, r3, #18
 8001e02:	220f      	movs	r2, #15
 8001e04:	4013      	ands	r3, r2
 8001e06:	4a30      	ldr	r2, [pc, #192]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	0d9b      	lsrs	r3, r3, #22
 8001e10:	2203      	movs	r2, #3
 8001e12:	4013      	ands	r3, r2
 8001e14:	3301      	adds	r3, #1
 8001e16:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	025b      	lsls	r3, r3, #9
 8001e20:	4013      	ands	r3, r2
 8001e22:	d00f      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	000a      	movs	r2, r1
 8001e28:	0152      	lsls	r2, r2, #5
 8001e2a:	1a52      	subs	r2, r2, r1
 8001e2c:	0193      	lsls	r3, r2, #6
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	185b      	adds	r3, r3, r1
 8001e34:	025b      	lsls	r3, r3, #9
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7fe f965 	bl	8000108 <__udivsi3>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e023      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2210      	movs	r2, #16
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d00f      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	000a      	movs	r2, r1
 8001e52:	0152      	lsls	r2, r2, #5
 8001e54:	1a52      	subs	r2, r2, r1
 8001e56:	0193      	lsls	r3, r2, #6
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	185b      	adds	r3, r3, r1
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7fe f950 	bl	8000108 <__udivsi3>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e00e      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	000a      	movs	r2, r1
 8001e72:	0152      	lsls	r2, r2, #5
 8001e74:	1a52      	subs	r2, r2, r1
 8001e76:	0193      	lsls	r3, r2, #6
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	185b      	adds	r3, r3, r1
 8001e7e:	029b      	lsls	r3, r3, #10
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7fe f940 	bl	8000108 <__udivsi3>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
      break;
 8001e90:	e00d      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	0b5b      	lsrs	r3, r3, #13
 8001e98:	2207      	movs	r2, #7
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	0212      	lsls	r2, r2, #8
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
      break;
 8001eac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eae:	693b      	ldr	r3, [r7, #16]
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b006      	add	sp, #24
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	003d0900 	.word	0x003d0900
 8001ec0:	00f42400 	.word	0x00f42400
 8001ec4:	007a1200 	.word	0x007a1200
 8001ec8:	0800219c 	.word	0x0800219c

08001ecc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	4013      	ands	r3, r2
 8001edc:	d100      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001ede:	e0c7      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001ee0:	2317      	movs	r3, #23
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee8:	4b82      	ldr	r3, [pc, #520]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	055b      	lsls	r3, r3, #21
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d10a      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef4:	4b7f      	ldr	r3, [pc, #508]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef8:	4b7e      	ldr	r3, [pc, #504]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	0549      	lsls	r1, r1, #21
 8001efe:	430a      	orrs	r2, r1
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f02:	2317      	movs	r3, #23
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	4b7b      	ldr	r3, [pc, #492]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4013      	ands	r3, r2
 8001f14:	d11a      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f16:	4b78      	ldr	r3, [pc, #480]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b77      	ldr	r3, [pc, #476]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0049      	lsls	r1, r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f24:	f7fe fcde 	bl	80008e4 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e008      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7fe fcd9 	bl	80008e4 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b64      	cmp	r3, #100	; 0x64
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0d4      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f4c:	4b69      	ldr	r3, [pc, #420]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	23c0      	movs	r3, #192	; 0xc0
 8001f52:	039b      	lsls	r3, r3, #14
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	23c0      	movs	r3, #192	; 0xc0
 8001f5e:	039b      	lsls	r3, r3, #14
 8001f60:	4013      	ands	r3, r2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d013      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	23c0      	movs	r3, #192	; 0xc0
 8001f6e:	029b      	lsls	r3, r3, #10
 8001f70:	401a      	ands	r2, r3
 8001f72:	23c0      	movs	r3, #192	; 0xc0
 8001f74:	029b      	lsls	r3, r3, #10
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d10a      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f7a:	4b5e      	ldr	r3, [pc, #376]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	029b      	lsls	r3, r3, #10
 8001f82:	401a      	ands	r2, r3
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	029b      	lsls	r3, r3, #10
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0ac      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f90:	4b58      	ldr	r3, [pc, #352]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f94:	23c0      	movs	r3, #192	; 0xc0
 8001f96:	029b      	lsls	r3, r3, #10
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d03b      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	23c0      	movs	r3, #192	; 0xc0
 8001fa8:	029b      	lsls	r3, r3, #10
 8001faa:	4013      	ands	r3, r2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d033      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d02e      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001fbc:	4b4d      	ldr	r3, [pc, #308]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc0:	4a4e      	ldr	r2, [pc, #312]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fc6:	4b4b      	ldr	r3, [pc, #300]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fca:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	0309      	lsls	r1, r1, #12
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fd4:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd8:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fda:	4949      	ldr	r1, [pc, #292]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001fdc:	400a      	ands	r2, r1
 8001fde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001fe0:	4b44      	ldr	r3, [pc, #272]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4013      	ands	r3, r2
 8001fee:	d014      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fc78 	bl	80008e4 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ff8:	e009      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7fe fc73 	bl	80008e4 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	4a3f      	ldr	r2, [pc, #252]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e06d      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800200e:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4013      	ands	r3, r2
 8002018:	d0ef      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	23c0      	movs	r3, #192	; 0xc0
 8002020:	029b      	lsls	r3, r3, #10
 8002022:	401a      	ands	r2, r3
 8002024:	23c0      	movs	r3, #192	; 0xc0
 8002026:	029b      	lsls	r3, r3, #10
 8002028:	429a      	cmp	r2, r3
 800202a:	d10c      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a35      	ldr	r2, [pc, #212]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002032:	4013      	ands	r3, r2
 8002034:	0019      	movs	r1, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	23c0      	movs	r3, #192	; 0xc0
 800203c:	039b      	lsls	r3, r3, #14
 800203e:	401a      	ands	r2, r3
 8002040:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002048:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	23c0      	movs	r3, #192	; 0xc0
 8002050:	029b      	lsls	r3, r3, #10
 8002052:	401a      	ands	r2, r3
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002056:	430a      	orrs	r2, r1
 8002058:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800205a:	2317      	movs	r3, #23
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800206a:	4928      	ldr	r1, [pc, #160]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800206c:	400a      	ands	r2, r1
 800206e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	220c      	movs	r2, #12
 8002080:	4393      	bics	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800208a:	430a      	orrs	r2, r1
 800208c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2204      	movs	r2, #4
 8002094:	4013      	ands	r3, r2
 8002096:	d009      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800209e:	4013      	ands	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020a8:	430a      	orrs	r2, r1
 80020aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2208      	movs	r2, #8
 80020b2:	4013      	ands	r3, r2
 80020b4:	d009      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	4a16      	ldr	r2, [pc, #88]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	4013      	ands	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b006      	add	sp, #24
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40007000 	.word	0x40007000
 80020fc:	fffcffff 	.word	0xfffcffff
 8002100:	fff7ffff 	.word	0xfff7ffff
 8002104:	00001388 	.word	0x00001388
 8002108:	ffcfffff 	.word	0xffcfffff
 800210c:	efffffff 	.word	0xefffffff
 8002110:	fffff3ff 	.word	0xfffff3ff
 8002114:	ffffcfff 	.word	0xffffcfff
 8002118:	fff3ffff 	.word	0xfff3ffff

0800211c <__libc_init_array>:
 800211c:	b570      	push	{r4, r5, r6, lr}
 800211e:	2600      	movs	r6, #0
 8002120:	4d0c      	ldr	r5, [pc, #48]	; (8002154 <__libc_init_array+0x38>)
 8002122:	4c0d      	ldr	r4, [pc, #52]	; (8002158 <__libc_init_array+0x3c>)
 8002124:	1b64      	subs	r4, r4, r5
 8002126:	10a4      	asrs	r4, r4, #2
 8002128:	42a6      	cmp	r6, r4
 800212a:	d109      	bne.n	8002140 <__libc_init_array+0x24>
 800212c:	2600      	movs	r6, #0
 800212e:	f000 f821 	bl	8002174 <_init>
 8002132:	4d0a      	ldr	r5, [pc, #40]	; (800215c <__libc_init_array+0x40>)
 8002134:	4c0a      	ldr	r4, [pc, #40]	; (8002160 <__libc_init_array+0x44>)
 8002136:	1b64      	subs	r4, r4, r5
 8002138:	10a4      	asrs	r4, r4, #2
 800213a:	42a6      	cmp	r6, r4
 800213c:	d105      	bne.n	800214a <__libc_init_array+0x2e>
 800213e:	bd70      	pop	{r4, r5, r6, pc}
 8002140:	00b3      	lsls	r3, r6, #2
 8002142:	58eb      	ldr	r3, [r5, r3]
 8002144:	4798      	blx	r3
 8002146:	3601      	adds	r6, #1
 8002148:	e7ee      	b.n	8002128 <__libc_init_array+0xc>
 800214a:	00b3      	lsls	r3, r6, #2
 800214c:	58eb      	ldr	r3, [r5, r3]
 800214e:	4798      	blx	r3
 8002150:	3601      	adds	r6, #1
 8002152:	e7f2      	b.n	800213a <__libc_init_array+0x1e>
 8002154:	080021a8 	.word	0x080021a8
 8002158:	080021a8 	.word	0x080021a8
 800215c:	080021a8 	.word	0x080021a8
 8002160:	080021ac 	.word	0x080021ac

08002164 <memset>:
 8002164:	0003      	movs	r3, r0
 8002166:	1812      	adds	r2, r2, r0
 8002168:	4293      	cmp	r3, r2
 800216a:	d100      	bne.n	800216e <memset+0xa>
 800216c:	4770      	bx	lr
 800216e:	7019      	strb	r1, [r3, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	e7f9      	b.n	8002168 <memset+0x4>

08002174 <_init>:
 8002174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800217a:	bc08      	pop	{r3}
 800217c:	469e      	mov	lr, r3
 800217e:	4770      	bx	lr

08002180 <_fini>:
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002186:	bc08      	pop	{r3}
 8002188:	469e      	mov	lr, r3
 800218a:	4770      	bx	lr
